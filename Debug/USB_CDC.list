
USB_CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800c8f8  0800c8f8  0001c8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd3c  0800cd3c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd44  0800cd44  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd44  0800cd44  0001cd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800cd4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202cc  2**0
                  CONTENTS
 10 .bss          00001dd4  200002cc  200002cc  000202cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020a0  200020a0  000202cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ff8  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000391c  00000000  00000000  000372f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001208  00000000  00000000  0003bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026225  00000000  00000000  0003d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001865d  00000000  00000000  000633ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dac62  00000000  00000000  0007ba4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001566ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063b8  00000000  00000000  001566fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002cc 	.word	0x200002cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8dc 	.word	0x0800c8dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d0 	.word	0x200002d0
 80001cc:	0800c8dc 	.word	0x0800c8dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HAL_GPIO_EXTI_Callback>:
//
//    return kalman_adc;
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
	{
	}
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

	adc_value = adc_buffer;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x68>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000f72:	6013      	str	r3, [r2, #0]
	//adc_kalman = kalman_filter((float)adc_average);

	if(count == 40)
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	2b28      	cmp	r3, #40	; 0x28
 8000f7a:	d111      	bne.n	8000fa0 <HAL_ADC_ConvCpltCallback+0x3c>
	{
	   adc_average = sum/count;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_ADC_ConvCpltCallback+0x78>)
 8000f8a:	6013      	str	r3, [r2, #0]
	   sum=0;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
	   count=0;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	801a      	strh	r2, [r3, #0]
	   flag_avg=1;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e00c      	b.n	8000fba <HAL_ADC_ConvCpltCallback+0x56>
	}
	else
	{
		sum+=adc_buffer;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_ADC_ConvCpltCallback+0x68>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0x74>)
 8000fac:	6013      	str	r3, [r2, #0]
		count++;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000fb8:	801a      	strh	r2, [r3, #0]
	}
	flag_adc = 1;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_ADC_ConvCpltCallback+0x80>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]

}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	2000045c 	.word	0x2000045c
 8000fd0:	20000458 	.word	0x20000458
 8000fd4:	20000468 	.word	0x20000468
 8000fd8:	20000460 	.word	0x20000460
 8000fdc:	20000464 	.word	0x20000464
 8000fe0:	2000046a 	.word	0x2000046a
 8000fe4:	2000046b 	.word	0x2000046b

08000fe8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000fe8:	b5b0      	push	{r4, r5, r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == htim1.Instance)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d11e      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		sprintf((char*)data,"%.3f %.3f\n",degree,degree_average);
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff faa1 	bl	8000548 <__aeabi_f2d>
 8001006:	4604      	mov	r4, r0
 8001008:	460d      	mov	r5, r1
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	e9cd 2300 	strd	r2, r3, [sp]
 800101c:	4622      	mov	r2, r4
 800101e:	462b      	mov	r3, r5
 8001020:	490b      	ldr	r1, [pc, #44]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001024:	f009 f9f0 	bl	800a408 <siprintf>
		CDC_Transmit_FS(data, strlen((const char*)data));
 8001028:	480a      	ldr	r0, [pc, #40]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800102a:	f7ff f8d1 	bl	80001d0 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	b29b      	uxth	r3, r3
 8001032:	4619      	mov	r1, r3
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001036:	f008 f8e1 	bl	80091fc <CDC_Transmit_FS>

	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bdb0      	pop	{r4, r5, r7, pc}
 8001042:	bf00      	nop
 8001044:	20000390 	.word	0x20000390
 8001048:	20000474 	.word	0x20000474
 800104c:	20000478 	.word	0x20000478
 8001050:	0800c8f8 	.word	0x0800c8f8
 8001054:	200003d8 	.word	0x200003d8

08001058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105c:	f000 fc62 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001060:	f000 f898 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001064:	f000 f9c2 	bl	80013ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001068:	f000 f9a0 	bl	80013ac <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800106c:	f007 fff2 	bl	8009054 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001070:	f000 f8fa 	bl	8001268 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001074:	f000 f94a 	bl	800130c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &adc_buffer, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	4939      	ldr	r1, [pc, #228]	; (8001160 <main+0x108>)
 800107c:	4839      	ldr	r0, [pc, #228]	; (8001164 <main+0x10c>)
 800107e:	f000 fe3b 	bl	8001cf8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 8001082:	4839      	ldr	r0, [pc, #228]	; (8001168 <main+0x110>)
 8001084:	f003 ff9e 	bl	8004fc4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if(flag_adc)
 8001088:	4b38      	ldr	r3, [pc, #224]	; (800116c <main+0x114>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0fb      	beq.n	8001088 <main+0x30>
	{
		vol = (float)adc_value/4095*3/0.249381;
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <main+0x118>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001174 <main+0x11c>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	ee17 0a90 	vmov	r0, s15
 80010b0:	f7ff fa4a 	bl	8000548 <__aeabi_f2d>
 80010b4:	a328      	add	r3, pc, #160	; (adr r3, 8001158 <main+0x100>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fbc7 	bl	800084c <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fd6f 	bl	8000ba8 <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4a2a      	ldr	r2, [pc, #168]	; (8001178 <main+0x120>)
 80010ce:	6013      	str	r3, [r2, #0]
		degree = vol/10*360;
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <main+0x120>)
 80010d2:	ed93 7a00 	vldr	s14, [r3]
 80010d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80010da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010de:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800117c <main+0x124>
 80010e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <main+0x128>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]
		if(flag_avg)
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <main+0x12c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0c9      	beq.n	8001088 <main+0x30>
		{
			vol_average = (float)adc_average/4095*3/0.249381;
 80010f4:	4b24      	ldr	r3, [pc, #144]	; (8001188 <main+0x130>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001100:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001174 <main+0x11c>
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001110:	ee17 0a90 	vmov	r0, s15
 8001114:	f7ff fa18 	bl	8000548 <__aeabi_f2d>
 8001118:	a30f      	add	r3, pc, #60	; (adr r3, 8001158 <main+0x100>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fb95 	bl	800084c <__aeabi_ddiv>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd3d 	bl	8000ba8 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	4a16      	ldr	r2, [pc, #88]	; (800118c <main+0x134>)
 8001132:	6013      	str	r3, [r2, #0]
			degree_average = vol_average/10*360;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <main+0x134>)
 8001136:	ed93 7a00 	vldr	s14, [r3]
 800113a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800113e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001142:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800117c <main+0x124>
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <main+0x138>)
 800114c:	edc3 7a00 	vstr	s15, [r3]
			flag_avg=0;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <main+0x12c>)
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
	if(flag_adc)
 8001156:	e797      	b.n	8001088 <main+0x30>
 8001158:	739f340d 	.word	0x739f340d
 800115c:	3fcfebb7 	.word	0x3fcfebb7
 8001160:	2000045c 	.word	0x2000045c
 8001164:	200002e8 	.word	0x200002e8
 8001168:	20000390 	.word	0x20000390
 800116c:	2000046b 	.word	0x2000046b
 8001170:	20000458 	.word	0x20000458
 8001174:	457ff000 	.word	0x457ff000
 8001178:	2000046c 	.word	0x2000046c
 800117c:	43b40000 	.word	0x43b40000
 8001180:	20000474 	.word	0x20000474
 8001184:	2000046a 	.word	0x2000046a
 8001188:	20000464 	.word	0x20000464
 800118c:	20000470 	.word	0x20000470
 8001190:	20000478 	.word	0x20000478

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	; 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f008 fcbe 	bl	8009b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a27      	ldr	r2, [pc, #156]	; (8001260 <SystemClock_Config+0xcc>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b25      	ldr	r3, [pc, #148]	; (8001260 <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a21      	ldr	r2, [pc, #132]	; (8001264 <SystemClock_Config+0xd0>)
 80011de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	2302      	movs	r3, #2
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001204:	2304      	movs	r3, #4
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001208:	23a8      	movs	r3, #168	; 0xa8
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001210:	2307      	movs	r3, #7
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fa13 	bl	8004644 <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001224:	f000 f94c 	bl	80014c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001234:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800123a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	2105      	movs	r1, #5
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fc74 	bl	8004b34 <HAL_RCC_ClockConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001252:	f000 f935 	bl	80014c0 <Error_Handler>
  }
}
 8001256:	bf00      	nop
 8001258:	3750      	adds	r7, #80	; 0x50
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40007000 	.word	0x40007000

08001268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_ADC1_Init+0x98>)
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <MX_ADC1_Init+0x9c>)
 800127e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_ADC1_Init+0x98>)
 8001282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001286:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_ADC1_Init+0x98>)
 8001296:	2201      	movs	r2, #1
 8001298:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_ADC1_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a8:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_ADC1_Init+0x98>)
 80012aa:	4a17      	ldr	r2, [pc, #92]	; (8001308 <MX_ADC1_Init+0xa0>)
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_ADC1_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_ADC1_Init+0x98>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_ADC1_Init+0x98>)
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_ADC1_Init+0x98>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_ADC1_Init+0x98>)
 80012ca:	f000 fbc1 	bl	8001a50 <HAL_ADC_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012d4:	f000 f8f4 	bl	80014c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d8:	2301      	movs	r3, #1
 80012da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012e0:	2307      	movs	r3, #7
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_ADC1_Init+0x98>)
 80012ea:	f000 fe33 	bl	8001f54 <HAL_ADC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012f4:	f000 f8e4 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002e8 	.word	0x200002e8
 8001304:	40012000 	.word	0x40012000
 8001308:	0f000001 	.word	0x0f000001

0800130c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_TIM1_Init+0x98>)
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <MX_TIM1_Init+0x9c>)
 800132c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001330:	22a8      	movs	r2, #168	; 0xa8
 8001332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_TIM1_Init+0x98>)
 800133c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001340:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <MX_TIM1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001356:	f003 fde5 	bl	8004f24 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001360:	f000 f8ae 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_TIM1_Init+0x98>)
 8001372:	f003 ff9f 	bl	80052b4 <HAL_TIM_ConfigClockSource>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800137c:	f000 f8a0 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM1_Init+0x98>)
 800138e:	f004 f9bb 	bl	8005708 <HAL_TIMEx_MasterConfigSynchronization>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001398:	f000 f892 	bl	80014c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000390 	.word	0x20000390
 80013a8:	40010000 	.word	0x40010000

080013ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_DMA_Init+0x3c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <MX_DMA_Init+0x3c>)
 80013bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_DMA_Init+0x3c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2038      	movs	r0, #56	; 0x38
 80013d4:	f001 f943 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013d8:	2038      	movs	r0, #56	; 0x38
 80013da:	f001 f95c 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a2a      	ldr	r2, [pc, #168]	; (80014b4 <MX_GPIO_Init+0xc8>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_GPIO_Init+0xc8>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_GPIO_Init+0xc8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800145c:	4816      	ldr	r0, [pc, #88]	; (80014b8 <MX_GPIO_Init+0xcc>)
 800145e:	f001 fe41 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001462:	2301      	movs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001466:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_GPIO_Init+0xd0>)
 8001478:	f001 fc98 	bl	8002dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800147c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <MX_GPIO_Init+0xcc>)
 8001496:	f001 fc89 	bl	8002dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2006      	movs	r0, #6
 80014a0:	f001 f8dd 	bl	800265e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014a4:	2006      	movs	r0, #6
 80014a6:	f001 f8f6 	bl	8002696 <HAL_NVIC_EnableIRQ>

}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40020000 	.word	0x40020000

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <Error_Handler+0x8>
	...

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_MspInit+0x4c>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_MspInit+0x4c>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_MspInit+0x4c>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a08      	ldr	r2, [pc, #32]	; (8001518 <HAL_MspInit+0x4c>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a33      	ldr	r2, [pc, #204]	; (8001608 <HAL_ADC_MspInit+0xec>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d160      	bne.n	8001600 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <HAL_ADC_MspInit+0xf0>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a31      	ldr	r2, [pc, #196]	; (800160c <HAL_ADC_MspInit+0xf0>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <HAL_ADC_MspInit+0xf0>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_ADC_MspInit+0xf0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a2a      	ldr	r2, [pc, #168]	; (800160c <HAL_ADC_MspInit+0xf0>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_ADC_MspInit+0xf0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157a:	2303      	movs	r3, #3
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4821      	ldr	r0, [pc, #132]	; (8001610 <HAL_ADC_MspInit+0xf4>)
 800158a:	f001 fc0f 	bl	8002dac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <HAL_ADC_MspInit+0xfc>)
 8001592:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015d4:	480f      	ldr	r0, [pc, #60]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015d6:	f001 f879 	bl	80026cc <HAL_DMA_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80015e0:	f7ff ff6e 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <HAL_ADC_MspInit+0xf8>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2012      	movs	r0, #18
 80015f6:	f001 f832 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015fa:	2012      	movs	r0, #18
 80015fc:	f001 f84b 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40012000 	.word	0x40012000
 800160c:	40023800 	.word	0x40023800
 8001610:	40020000 	.word	0x40020000
 8001614:	20000330 	.word	0x20000330
 8001618:	40026410 	.word	0x40026410

0800161c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <HAL_TIM_Base_MspInit+0x48>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d115      	bne.n	800165a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b0d      	ldr	r3, [pc, #52]	; (8001668 <HAL_TIM_Base_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a0c      	ldr	r2, [pc, #48]	; (8001668 <HAL_TIM_Base_MspInit+0x4c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <HAL_TIM_Base_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800164a:	2200      	movs	r2, #0
 800164c:	2100      	movs	r1, #0
 800164e:	2019      	movs	r0, #25
 8001650:	f001 f805 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001654:	2019      	movs	r0, #25
 8001656:	f001 f81e 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40010000 	.word	0x40010000
 8001668:	40023800 	.word	0x40023800

0800166c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <NMI_Handler+0x4>

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b8:	f000 f986 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016c4:	2001      	movs	r0, #1
 80016c6:	f001 fd27 	bl	8003118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016d4:	4802      	ldr	r0, [pc, #8]	; (80016e0 <ADC_IRQHandler+0x10>)
 80016d6:	f000 f9fe 	bl	8001ad6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200002e8 	.word	0x200002e8

080016e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016e8:	4802      	ldr	r0, [pc, #8]	; (80016f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016ea:	f003 fcdb 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000390 	.word	0x20000390

080016f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <DMA2_Stream0_IRQHandler+0x10>)
 80016fe:	f001 f8eb 	bl	80028d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000330 	.word	0x20000330

0800170c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <OTG_FS_IRQHandler+0x10>)
 8001712:	f001 fe69 	bl	80033e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20001964 	.word	0x20001964

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800173a:	f008 f9bb 	bl	8009ab4 <__errno>
 800173e:	4603      	mov	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
	return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe7 	bl	8001730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001762:	e7fe      	b.n	8001762 <_exit+0x12>

08001764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
	}

return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
	}
	return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f008 f920 	bl	8009ab4 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	2000047c 	.word	0x2000047c
 80018a8:	200020a0 	.word	0x200020a0

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffd7 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f008 f8df 	bl	8009ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fba9 	bl	8001058 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001914:	0800cd4c 	.word	0x0800cd4c
  ldr r2, =_sbss
 8001918:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 800191c:	200020a0 	.word	0x200020a0

08001920 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <CAN1_RX0_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 fe7b 	bl	8002648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fdb8 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fe93 	bl	80026b2 <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 fe5b 	bl	800265e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000004 	.word	0x20000004

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000480 	.word	0x20000480

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000480 	.word	0x20000480

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e033      	b.n	8001ace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fd54 	bl	800151c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a96:	f023 0302 	bic.w	r3, r3, #2
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fb78 	bl	8002198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
 8001abe:	e001      	b.n	8001ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b086      	sub	sp, #24
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f003 0320 	and.w	r3, r3, #32
 8001b04:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d049      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0xca>
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d046      	beq.n	8001ba0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12b      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d127      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d119      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0220 	bic.w	r2, r2, #32
 8001b6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff f9e7 	bl	8000f64 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f06f 0212 	mvn.w	r2, #18
 8001b9e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d057      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x190>
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d054      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d139      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d12b      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d124      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11d      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d119      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c30:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fc1c 	bl	8002494 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 020c 	mvn.w	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c74:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d017      	beq.n	8001cac <HAL_ADC_IRQHandler+0x1d6>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d014      	beq.n	8001cac <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10d      	bne.n	8001cac <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f945 	bl	8001f2c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f06f 0201 	mvn.w	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cba:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <HAL_ADC_IRQHandler+0x218>
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d012      	beq.n	8001cee <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f043 0202 	orr.w	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0220 	mvn.w	r2, #32
 8001cdc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f92e 	bl	8001f40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0220 	mvn.w	r2, #32
 8001cec:	601a      	str	r2, [r3, #0]
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Start_DMA+0x1e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e0e9      	b.n	8001eea <HAL_ADC_Start_DMA+0x1f2>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d018      	beq.n	8001d5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ef4 <HAL_ADC_Start_DMA+0x1fc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a6d      	ldr	r2, [pc, #436]	; (8001ef8 <HAL_ADC_Start_DMA+0x200>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9a      	lsrs	r2, r3, #18
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	d107      	bne.n	8001d7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	f040 80a1 	bne.w	8001ed0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001db8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dcc:	d106      	bne.n	8001ddc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f023 0206 	bic.w	r2, r3, #6
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <HAL_ADC_Start_DMA+0x204>)
 8001dec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	4a43      	ldr	r2, [pc, #268]	; (8001f00 <HAL_ADC_Start_DMA+0x208>)
 8001df4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	4a42      	ldr	r2, [pc, #264]	; (8001f04 <HAL_ADC_Start_DMA+0x20c>)
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	4a41      	ldr	r2, [pc, #260]	; (8001f08 <HAL_ADC_Start_DMA+0x210>)
 8001e04:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e1e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	334c      	adds	r3, #76	; 0x4c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f000 fcf2 	bl	8002828 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d12a      	bne.n	8001ea6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <HAL_ADC_Start_DMA+0x214>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d015      	beq.n	8001e86 <HAL_ADC_Start_DMA+0x18e>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2c      	ldr	r2, [pc, #176]	; (8001f10 <HAL_ADC_Start_DMA+0x218>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_Start_DMA+0x178>
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_ADC_Start_DMA+0x204>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00a      	beq.n	8001e86 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <HAL_ADC_Start_DMA+0x21c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d136      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_ADC_Start_DMA+0x204>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d130      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d129      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	e020      	b.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_ADC_Start_DMA+0x214>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d11b      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d114      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	e00b      	b.n	8001ee8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0210 	orr.w	r2, r3, #16
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	431bde83 	.word	0x431bde83
 8001efc:	40012300 	.word	0x40012300
 8001f00:	08002391 	.word	0x08002391
 8001f04:	0800244b 	.word	0x0800244b
 8001f08:	08002467 	.word	0x08002467
 8001f0c:	40012000 	.word	0x40012000
 8001f10:	40012100 	.word	0x40012100
 8001f14:	40012200 	.word	0x40012200

08001f18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x1c>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e105      	b.n	800217c <HAL_ADC_ConfigChannel+0x228>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b09      	cmp	r3, #9
 8001f7e:	d925      	bls.n	8001fcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4613      	mov	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	4413      	add	r3, r2
 8001f94:	3b1e      	subs	r3, #30
 8001f96:	2207      	movs	r2, #7
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68d9      	ldr	r1, [r3, #12]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4603      	mov	r3, r0
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4403      	add	r3, r0
 8001fbe:	3b1e      	subs	r3, #30
 8001fc0:	409a      	lsls	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	e022      	b.n	8002012 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6919      	ldr	r1, [r3, #16]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	400a      	ands	r2, r1
 8001fee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6919      	ldr	r1, [r3, #16]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4618      	mov	r0, r3
 8002002:	4603      	mov	r3, r0
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4403      	add	r3, r0
 8002008:	409a      	lsls	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d824      	bhi.n	8002064 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	3b05      	subs	r3, #5
 800202c:	221f      	movs	r2, #31
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	400a      	ands	r2, r1
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	3b05      	subs	r3, #5
 8002056:	fa00 f203 	lsl.w	r2, r0, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	635a      	str	r2, [r3, #52]	; 0x34
 8002062:	e04c      	b.n	80020fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d824      	bhi.n	80020b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	3b23      	subs	r3, #35	; 0x23
 800207e:	221f      	movs	r2, #31
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43da      	mvns	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	400a      	ands	r2, r1
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b23      	subs	r3, #35	; 0x23
 80020a8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
 80020b4:	e023      	b.n	80020fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b41      	subs	r3, #65	; 0x41
 80020c8:	221f      	movs	r2, #31
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	400a      	ands	r2, r1
 80020d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	4618      	mov	r0, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	3b41      	subs	r3, #65	; 0x41
 80020f2:	fa00 f203 	lsl.w	r2, r0, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_ADC_ConfigChannel+0x234>)
 8002100:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <HAL_ADC_ConfigChannel+0x238>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d109      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1cc>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b12      	cmp	r3, #18
 8002112:	d105      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_ADC_ConfigChannel+0x238>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d123      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x21e>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b10      	cmp	r3, #16
 8002130:	d003      	beq.n	800213a <HAL_ADC_ConfigChannel+0x1e6>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b11      	cmp	r3, #17
 8002138:	d11b      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d111      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_ADC_ConfigChannel+0x23c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_ADC_ConfigChannel+0x240>)
 8002154:	fba2 2303 	umull	r2, r3, r2, r3
 8002158:	0c9a      	lsrs	r2, r3, #18
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002164:	e002      	b.n	800216c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	3b01      	subs	r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f9      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	40012300 	.word	0x40012300
 800218c:	40012000 	.word	0x40012000
 8002190:	20000000 	.word	0x20000000
 8002194:	431bde83 	.word	0x431bde83

08002198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021a0:	4b79      	ldr	r3, [pc, #484]	; (8002388 <ADC_Init+0x1f0>)
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	431a      	orrs	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	021a      	lsls	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	4a58      	ldr	r2, [pc, #352]	; (800238c <ADC_Init+0x1f4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800223e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	e00f      	b.n	8002296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002294:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0202 	bic.w	r2, r2, #2
 80022a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e1b      	ldrb	r3, [r3, #24]
 80022b0:	005a      	lsls	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01b      	beq.n	80022fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	3b01      	subs	r3, #1
 80022f0:	035a      	lsls	r2, r3, #13
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	e007      	b.n	800230c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800230a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800231a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	3b01      	subs	r3, #1
 8002328:	051a      	lsls	r2, r3, #20
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800234e:	025a      	lsls	r2, r3, #9
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	029a      	lsls	r2, r3, #10
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40012300 	.word	0x40012300
 800238c:	0f000001 	.word	0x0f000001

08002390 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d13c      	bne.n	8002424 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d12b      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d127      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d119      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0220 	bic.w	r2, r2, #32
 80023f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d105      	bne.n	800241c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7fe fda1 	bl	8000f64 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002422:	e00e      	b.n	8002442 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fd85 	bl	8001f40 <HAL_ADC_ErrorCallback>
}
 8002436:	e004      	b.n	8002442 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fd5d 	bl	8001f18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f043 0204 	orr.w	r2, r3, #4
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fd5a 	bl	8001f40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c4:	4013      	ands	r3, r2
 80024c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <__NVIC_SetPriorityGrouping+0x44>)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	60d3      	str	r3, [r2, #12]
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <__NVIC_GetPriorityGrouping+0x18>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 0307 	and.w	r3, r3, #7
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	2b00      	cmp	r3, #0
 800251c:	db0b      	blt.n	8002536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	4907      	ldr	r1, [pc, #28]	; (8002544 <__NVIC_EnableIRQ+0x38>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2001      	movs	r0, #1
 800252e:	fa00 f202 	lsl.w	r2, r0, r2
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002614:	d301      	bcc.n	800261a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002616:	2301      	movs	r3, #1
 8002618:	e00f      	b.n	800263a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <SysTick_Config+0x40>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002622:	210f      	movs	r1, #15
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f7ff ff8e 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <SysTick_Config+0x40>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <SysTick_Config+0x40>)
 8002634:	2207      	movs	r2, #7
 8002636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff29 	bl	80024a8 <__NVIC_SetPriorityGrouping>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002670:	f7ff ff3e 	bl	80024f0 <__NVIC_GetPriorityGrouping>
 8002674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	f7ff ff8e 	bl	800259c <NVIC_EncodePriority>
 8002680:	4602      	mov	r2, r0
 8002682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	bf00      	nop
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff31 	bl	800250c <__NVIC_EnableIRQ>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffa2 	bl	8002604 <SysTick_Config>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026d8:	f7ff f98a 	bl	80019f0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e099      	b.n	800281c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002708:	e00f      	b.n	800272a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800270a:	f7ff f971 	bl	80019f0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b05      	cmp	r3, #5
 8002716:	d908      	bls.n	800272a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2203      	movs	r2, #3
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e078      	b.n	800281c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e8      	bne.n	800270a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	4b38      	ldr	r3, [pc, #224]	; (8002824 <HAL_DMA_Init+0x158>)
 8002744:	4013      	ands	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	4313      	orrs	r3, r2
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0307 	bic.w	r3, r3, #7
 80027aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d117      	bne.n	80027ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fa6f 	bl	8002cb4 <DMA_CheckFifoParam>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2240      	movs	r2, #64	; 0x40
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ea:	2301      	movs	r3, #1
 80027ec:	e016      	b.n	800281c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa26 	bl	8002c48 <DMA_CalcBaseAndBitshift>
 80027fc:	4603      	mov	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	223f      	movs	r2, #63	; 0x3f
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	f010803f 	.word	0xf010803f

08002828 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_DMA_Start_IT+0x26>
 800284a:	2302      	movs	r3, #2
 800284c:	e040      	b.n	80028d0 <HAL_DMA_Start_IT+0xa8>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d12f      	bne.n	80028c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f9b8 	bl	8002bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	223f      	movs	r2, #63	; 0x3f
 8002882:	409a      	lsls	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0216 	orr.w	r2, r2, #22
 8002896:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d007      	beq.n	80028b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e005      	b.n	80028ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028e4:	4b8e      	ldr	r3, [pc, #568]	; (8002b20 <HAL_DMA_IRQHandler+0x248>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a8e      	ldr	r2, [pc, #568]	; (8002b24 <HAL_DMA_IRQHandler+0x24c>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a9b      	lsrs	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002902:	2208      	movs	r2, #8
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01a      	beq.n	8002944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d013      	beq.n	8002944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0204 	bic.w	r2, r2, #4
 800292a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	2208      	movs	r2, #8
 8002932:	409a      	lsls	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	2201      	movs	r2, #1
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d012      	beq.n	800297a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2201      	movs	r2, #1
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297e:	2204      	movs	r2, #4
 8002980:	409a      	lsls	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d012      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	2204      	movs	r2, #4
 800299e:	409a      	lsls	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a8:	f043 0204 	orr.w	r2, r3, #4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b4:	2210      	movs	r2, #16
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d043      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03c      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	2210      	movs	r2, #16
 80029d4:	409a      	lsls	r2, r3
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d024      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
 8002a06:	e01f      	b.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d01b      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
 8002a18:	e016      	b.n	8002a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0208 	bic.w	r2, r2, #8
 8002a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	2220      	movs	r2, #32
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 808f 	beq.w	8002b78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 8087 	beq.w	8002b78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	2220      	movs	r2, #32
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b05      	cmp	r3, #5
 8002a80:	d136      	bne.n	8002af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0216 	bic.w	r2, r2, #22
 8002a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d103      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x1da>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d007      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	223f      	movs	r2, #63	; 0x3f
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d07e      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
        }
        return;
 8002aee:	e079      	b.n	8002be4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01d      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d031      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e02c      	b.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
 8002b1e:	bf00      	nop
 8002b20:	20000000 	.word	0x20000000
 8002b24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d023      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
 8002b38:	e01e      	b.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10f      	bne.n	8002b68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0210 	bic.w	r2, r2, #16
 8002b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d032      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2205      	movs	r2, #5
 8002b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d307      	bcc.n	8002bc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f2      	bne.n	8002ba4 <HAL_DMA_IRQHandler+0x2cc>
 8002bbe:	e000      	b.n	8002bc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002be4:	bf00      	nop
    }
  }
}
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d108      	bne.n	8002c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c2a:	e007      	b.n	8002c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3b10      	subs	r3, #16
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <DMA_CalcBaseAndBitshift+0x64>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d909      	bls.n	8002c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	659a      	str	r2, [r3, #88]	; 0x58
 8002c88:	e007      	b.n	8002c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	aaaaaaab 	.word	0xaaaaaaab
 8002cb0:	0800c95c 	.word	0x0800c95c

08002cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11f      	bne.n	8002d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d856      	bhi.n	8002d82 <DMA_CheckFifoParam+0xce>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <DMA_CheckFifoParam+0x28>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cff 	.word	0x08002cff
 8002ce4:	08002ced 	.word	0x08002ced
 8002ce8:	08002d83 	.word	0x08002d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d046      	beq.n	8002d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfc:	e043      	b.n	8002d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d06:	d140      	bne.n	8002d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e03d      	b.n	8002d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d16:	d121      	bne.n	8002d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d837      	bhi.n	8002d8e <DMA_CheckFifoParam+0xda>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <DMA_CheckFifoParam+0x70>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d35 	.word	0x08002d35
 8002d28:	08002d3b 	.word	0x08002d3b
 8002d2c:	08002d35 	.word	0x08002d35
 8002d30:	08002d4d 	.word	0x08002d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e030      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d025      	beq.n	8002d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e022      	b.n	8002d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d54:	d11f      	bne.n	8002d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d5a:	e01c      	b.n	8002d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d903      	bls.n	8002d6a <DMA_CheckFifoParam+0xb6>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d003      	beq.n	8002d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d68:	e018      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6e:	e015      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e00b      	b.n	8002d9a <DMA_CheckFifoParam+0xe6>
      break;
 8002d82:	bf00      	nop
 8002d84:	e00a      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e008      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e006      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e16b      	b.n	80030a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	f040 815a 	bne.w	800309a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d005      	beq.n	8002dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d130      	bne.n	8002e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 0201 	and.w	r2, r3, #1
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d017      	beq.n	8002e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d123      	bne.n	8002ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	08da      	lsrs	r2, r3, #3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3208      	adds	r2, #8
 8002eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	08da      	lsrs	r2, r3, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3208      	adds	r2, #8
 8002eea:	69b9      	ldr	r1, [r7, #24]
 8002eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2203      	movs	r2, #3
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0203 	and.w	r2, r3, #3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80b4 	beq.w	800309a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b60      	ldr	r3, [pc, #384]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a5f      	ldr	r2, [pc, #380]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_GPIO_Init+0x30c>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f4e:	4a5b      	ldr	r2, [pc, #364]	; (80030bc <HAL_GPIO_Init+0x310>)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3302      	adds	r3, #2
 8002f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	220f      	movs	r2, #15
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a52      	ldr	r2, [pc, #328]	; (80030c0 <HAL_GPIO_Init+0x314>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02b      	beq.n	8002fd2 <HAL_GPIO_Init+0x226>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a51      	ldr	r2, [pc, #324]	; (80030c4 <HAL_GPIO_Init+0x318>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d025      	beq.n	8002fce <HAL_GPIO_Init+0x222>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a50      	ldr	r2, [pc, #320]	; (80030c8 <HAL_GPIO_Init+0x31c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01f      	beq.n	8002fca <HAL_GPIO_Init+0x21e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4f      	ldr	r2, [pc, #316]	; (80030cc <HAL_GPIO_Init+0x320>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d019      	beq.n	8002fc6 <HAL_GPIO_Init+0x21a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4e      	ldr	r2, [pc, #312]	; (80030d0 <HAL_GPIO_Init+0x324>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x216>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <HAL_GPIO_Init+0x328>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x212>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4c      	ldr	r2, [pc, #304]	; (80030d8 <HAL_GPIO_Init+0x32c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x20e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4b      	ldr	r2, [pc, #300]	; (80030dc <HAL_GPIO_Init+0x330>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x20a>
 8002fb2:	2307      	movs	r3, #7
 8002fb4:	e00e      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	e00c      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fba:	2306      	movs	r3, #6
 8002fbc:	e00a      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	e008      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e006      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e004      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e002      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_GPIO_Init+0x228>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	f002 0203 	and.w	r2, r2, #3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4093      	lsls	r3, r2
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe4:	4935      	ldr	r1, [pc, #212]	; (80030bc <HAL_GPIO_Init+0x310>)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_GPIO_Init+0x334>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d003      	beq.n	8003016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003016:	4a32      	ldr	r2, [pc, #200]	; (80030e0 <HAL_GPIO_Init+0x334>)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800301c:	4b30      	ldr	r3, [pc, #192]	; (80030e0 <HAL_GPIO_Init+0x334>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003040:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <HAL_GPIO_Init+0x334>)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_GPIO_Init+0x334>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306a:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <HAL_GPIO_Init+0x334>)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_GPIO_Init+0x334>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003094:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <HAL_GPIO_Init+0x334>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	f67f ae90 	bls.w	8002dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40021400 	.word	0x40021400
 80030d8:	40021800 	.word	0x40021800
 80030dc:	40021c00 	.word	0x40021c00
 80030e0:	40013c00 	.word	0x40013c00

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003100:	e003      	b.n	800310a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003102:	887b      	ldrh	r3, [r7, #2]
 8003104:	041a      	lsls	r2, r3, #16
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	619a      	str	r2, [r3, #24]
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd ff08 	bl	8000f4c <HAL_GPIO_EXTI_Callback>
  }
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314a:	b08f      	sub	sp, #60	; 0x3c
 800314c:	af0a      	add	r7, sp, #40	; 0x28
 800314e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e10f      	b.n	800337a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d106      	bne.n	800317a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f006 f989 	bl	800948c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f002 fc5a 	bl	8005a52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	687e      	ldr	r6, [r7, #4]
 80031a6:	466d      	mov	r5, sp
 80031a8:	f106 0410 	add.w	r4, r6, #16
 80031ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80031bc:	1d33      	adds	r3, r6, #4
 80031be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c0:	6838      	ldr	r0, [r7, #0]
 80031c2:	f002 fb31 	bl	8005828 <USB_CoreInit>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0d0      	b.n	800337a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fc48 	bl	8005a74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	e04a      	b.n	8003280 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	333d      	adds	r3, #61	; 0x3d
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	333c      	adds	r3, #60	; 0x3c
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	b298      	uxth	r0, r3
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3344      	adds	r3, #68	; 0x44
 8003226:	4602      	mov	r2, r0
 8003228:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800322a:	7bfa      	ldrb	r2, [r7, #15]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	3340      	adds	r3, #64	; 0x40
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3348      	adds	r3, #72	; 0x48
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334c      	adds	r3, #76	; 0x4c
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3354      	adds	r3, #84	; 0x54
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3301      	adds	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d3af      	bcc.n	80031ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	e044      	b.n	800331a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032bc:	7bfa      	ldrb	r2, [r7, #15]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	3301      	adds	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3b5      	bcc.n	8003290 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	687e      	ldr	r6, [r7, #4]
 800332c:	466d      	mov	r5, sp
 800332e:	f106 0410 	add.w	r4, r6, #16
 8003332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800333e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003342:	1d33      	adds	r3, r6, #4
 8003344:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003346:	6838      	ldr	r0, [r7, #0]
 8003348:	f002 fbe0 	bl	8005b0c <USB_DevInit>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00d      	b.n	800337a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f003 fd2f 	bl	8006dd6 <USB_DevDisconnect>

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003382 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_PCD_Start+0x1c>
 800339a:	2302      	movs	r3, #2
 800339c:	e020      	b.n	80033e0 <HAL_PCD_Start+0x5e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d109      	bne.n	80033c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d005      	beq.n	80033c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f002 fb32 	bl	8005a30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 fcdf 	bl	8006d94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b08d      	sub	sp, #52	; 0x34
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 fd9d 	bl	8006f3e <USB_GetMode>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 848a 	bne.w	8003d20 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fd01 	bl	8006e18 <USB_ReadInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8480 	beq.w	8003d1e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	0a1b      	lsrs	r3, r3, #8
 8003428:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f003 fcee 	bl	8006e18 <USB_ReadInterrupts>
 800343c:	4603      	mov	r3, r0
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	d107      	bne.n	8003456 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f002 0202 	and.w	r2, r2, #2
 8003454:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f003 fcdc 	bl	8006e18 <USB_ReadInterrupts>
 8003460:	4603      	mov	r3, r0
 8003462:	f003 0310 	and.w	r3, r3, #16
 8003466:	2b10      	cmp	r3, #16
 8003468:	d161      	bne.n	800352e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0210 	bic.w	r2, r2, #16
 8003478:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	3304      	adds	r3, #4
 8003498:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	0c5b      	lsrs	r3, r3, #17
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d124      	bne.n	80034f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d035      	beq.n	800351e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80034bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	6a38      	ldr	r0, [r7, #32]
 80034c6:	f003 fb13 	bl	8006af0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034d6:	441a      	add	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6a1a      	ldr	r2, [r3, #32]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	091b      	lsrs	r3, r3, #4
 80034e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e8:	441a      	add	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
 80034ee:	e016      	b.n	800351e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	0c5b      	lsrs	r3, r3, #17
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	2b06      	cmp	r3, #6
 80034fa:	d110      	bne.n	800351e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003502:	2208      	movs	r2, #8
 8003504:	4619      	mov	r1, r3
 8003506:	6a38      	ldr	r0, [r7, #32]
 8003508:	f003 faf2 	bl	8006af0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6a1a      	ldr	r2, [r3, #32]
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003518:	441a      	add	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0210 	orr.w	r2, r2, #16
 800352c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fc70 	bl	8006e18 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800353e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003542:	f040 80a7 	bne.w	8003694 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f003 fc75 	bl	8006e3e <USB_ReadDevAllOutEpInterrupt>
 8003554:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003556:	e099      	b.n	800368c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 808e 	beq.w	8003680 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f003 fc99 	bl	8006ea6 <USB_ReadDevOutEPInterrupt>
 8003574:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	461a      	mov	r2, r3
 800358e:	2301      	movs	r3, #1
 8003590:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fec3 	bl	8004320 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	461a      	mov	r2, r3
 80035b2:	2308      	movs	r3, #8
 80035b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80035b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 ff99 	bl	80044f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d4:	461a      	mov	r2, r3
 80035d6:	2310      	movs	r3, #16
 80035d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d030      	beq.n	8003646 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b80      	cmp	r3, #128	; 0x80
 80035ee:	d109      	bne.n	8003604 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003602:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	3304      	adds	r3, #4
 8003618:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	78db      	ldrb	r3, [r3, #3]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	b2db      	uxtb	r3, r3
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f006 f832 	bl	8009698 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	461a      	mov	r2, r3
 8003642:	2302      	movs	r3, #2
 8003644:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	461a      	mov	r2, r3
 800365e:	2320      	movs	r3, #32
 8003660:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	461a      	mov	r2, r3
 800367a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800367e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	3301      	adds	r3, #1
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	f47f af62 	bne.w	8003558 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f003 fbbd 	bl	8006e18 <USB_ReadInterrupts>
 800369e:	4603      	mov	r3, r0
 80036a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036a8:	f040 80db 	bne.w	8003862 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 fbde 	bl	8006e72 <USB_ReadDevAllInEpInterrupt>
 80036b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036bc:	e0cd      	b.n	800385a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80c2 	beq.w	800384e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 fc04 	bl	8006ee2 <USB_ReadDevInEPInterrupt>
 80036da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d057      	beq.n	8003796 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	2201      	movs	r2, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69f9      	ldr	r1, [r7, #28]
 8003702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003706:	4013      	ands	r3, r2
 8003708:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003716:	461a      	mov	r2, r3
 8003718:	2301      	movs	r3, #1
 800371a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d132      	bne.n	800378a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003724:	6879      	ldr	r1, [r7, #4]
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	4613      	mov	r3, r2
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	334c      	adds	r3, #76	; 0x4c
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4403      	add	r3, r0
 8003744:	3348      	adds	r3, #72	; 0x48
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4419      	add	r1, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4403      	add	r3, r0
 8003758:	334c      	adds	r3, #76	; 0x4c
 800375a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d113      	bne.n	800378a <HAL_PCD_IRQHandler+0x3a2>
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3354      	adds	r3, #84	; 0x54
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d108      	bne.n	800378a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003782:	461a      	mov	r2, r3
 8003784:	2101      	movs	r1, #1
 8003786:	f003 fc0b 	bl	8006fa0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f005 fefc 	bl	800958e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ac:	461a      	mov	r2, r3
 80037ae:	2308      	movs	r3, #8
 80037b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	461a      	mov	r2, r3
 80037ca:	2310      	movs	r3, #16
 80037cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	461a      	mov	r2, r3
 80037e6:	2340      	movs	r3, #64	; 0x40
 80037e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d023      	beq.n	800383c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80037f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f6:	6a38      	ldr	r0, [r7, #32]
 80037f8:	f002 faec 	bl	8005dd4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80037fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	3338      	adds	r3, #56	; 0x38
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	3304      	adds	r3, #4
 800380e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	78db      	ldrb	r3, [r3, #3]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d108      	bne.n	800382a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	b2db      	uxtb	r3, r3
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f005 ff49 	bl	80096bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	461a      	mov	r2, r3
 8003838:	2302      	movs	r3, #2
 800383a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003846:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fcdb 	bl	8004204 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	3301      	adds	r3, #1
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003856:	085b      	lsrs	r3, r3, #1
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	f47f af2e 	bne.w	80036be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f003 fad6 	bl	8006e18 <USB_ReadInterrupts>
 800386c:	4603      	mov	r3, r0
 800386e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003876:	d122      	bne.n	80038be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003892:	2b01      	cmp	r3, #1
 8003894:	d108      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800389e:	2100      	movs	r1, #0
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fec3 	bl	800462c <HAL_PCDEx_LPM_Callback>
 80038a6:	e002      	b.n	80038ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f005 fee7 	bl	800967c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 faa8 	bl	8006e18 <USB_ReadInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d2:	d112      	bne.n	80038fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d102      	bne.n	80038ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f005 fea3 	bl	8009630 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fa8a 	bl	8006e18 <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800390a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390e:	f040 80b7 	bne.w	8003a80 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2110      	movs	r1, #16
 800392c:	4618      	mov	r0, r3
 800392e:	f002 fa51 	bl	8005dd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003932:	2300      	movs	r3, #0
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003936:	e046      	b.n	80039c6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003944:	461a      	mov	r2, r3
 8003946:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800394a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	440a      	add	r2, r1
 8003962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800396a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800397e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003990:	0151      	lsls	r1, r2, #5
 8003992:	69fa      	ldr	r2, [r7, #28]
 8003994:	440a      	add	r2, r1
 8003996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800399e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c2:	3301      	adds	r3, #1
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d3b3      	bcc.n	8003938 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d016      	beq.n	8003a1a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fc:	f043 030b 	orr.w	r3, r3, #11
 8003a00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a12:	f043 030b 	orr.w	r3, r3, #11
 8003a16:	6453      	str	r3, [r2, #68]	; 0x44
 8003a18:	e015      	b.n	8003a46 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a2c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a40:	f043 030b 	orr.w	r3, r3, #11
 8003a44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f003 fa98 	bl	8006fa0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 f9c7 	bl	8006e18 <USB_ReadInterrupts>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a94:	d124      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fa5d 	bl	8006f5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f002 fa12 	bl	8005ece <USB_GetDevSpeed>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	461a      	mov	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681c      	ldr	r4, [r3, #0]
 8003ab6:	f001 fa29 	bl	8004f0c <HAL_RCC_GetHCLKFreq>
 8003aba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f001 ff11 	bl	80058ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f005 fd87 	bl	80095de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 f997 	bl	8006e18 <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d10a      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f005 fd64 	bl	80095c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f002 0208 	and.w	r2, r2, #8
 8003b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f003 f982 	bl	8006e18 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1a:	2b80      	cmp	r3, #128	; 0x80
 8003b1c:	d122      	bne.n	8003b64 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e014      	b.n	8003b5a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d105      	bne.n	8003b54 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fb27 	bl	80041a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	3301      	adds	r3, #1
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3e5      	bcc.n	8003b30 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 f955 	bl	8006e18 <USB_ReadInterrupts>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b78:	d13b      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	e02b      	b.n	8003bd8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3340      	adds	r3, #64	; 0x40
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d115      	bne.n	8003bd2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da12      	bge.n	8003bd2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	333f      	adds	r3, #63	; 0x3f
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fae8 	bl	80041a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d3ce      	bcc.n	8003b80 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 f90e 	bl	8006e18 <USB_ReadInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c06:	d155      	bne.n	8003cb4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c08:	2301      	movs	r3, #1
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0c:	e045      	b.n	8003c9a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d12e      	bne.n	8003c94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da2b      	bge.n	8003c94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003c48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d121      	bne.n	8003c94 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c90:	6053      	str	r3, [r2, #4]
            break;
 8003c92:	e007      	b.n	8003ca4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	3301      	adds	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3b4      	bcc.n	8003c0e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 f8ad 	bl	8006e18 <USB_ReadInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f005 fd08 	bl	80096e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003cde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f003 f897 	bl	8006e18 <USB_ReadInterrupts>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d115      	bne.n	8003d20 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f005 fcf8 	bl	80096fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	e000      	b.n	8003d20 <HAL_PCD_IRQHandler+0x938>
      return;
 8003d1e:	bf00      	nop
    }
  }
}
 8003d20:	3734      	adds	r7, #52	; 0x34
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}

08003d26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_PCD_SetAddress+0x1a>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e013      	b.n	8003d68 <HAL_PCD_SetAddress+0x42>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f002 fff5 	bl	8006d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4603      	mov	r3, r0
 8003d80:	70fb      	strb	r3, [r7, #3]
 8003d82:	460b      	mov	r3, r1
 8003d84:	803b      	strh	r3, [r7, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0f      	bge.n	8003db6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 020f 	and.w	r2, r3, #15
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	3338      	adds	r3, #56	; 0x38
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	705a      	strb	r2, [r3, #1]
 8003db4:	e00f      	b.n	8003dd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	f003 020f 	and.w	r2, r3, #15
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003de2:	883a      	ldrh	r2, [r7, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	78ba      	ldrb	r2, [r7, #2]
 8003dec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e00:	78bb      	ldrb	r3, [r7, #2]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d102      	bne.n	8003e0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_PCD_EP_Open+0xaa>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e00e      	b.n	8003e38 <HAL_PCD_EP_Open+0xc8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f002 f875 	bl	8005f18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003e36:	7afb      	ldrb	r3, [r7, #11]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	da0f      	bge.n	8003e74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	f003 020f 	and.w	r2, r3, #15
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	3338      	adds	r3, #56	; 0x38
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	3304      	adds	r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	705a      	strb	r2, [r3, #1]
 8003e72:	e00f      	b.n	8003e94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_PCD_EP_Close+0x6e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e00e      	b.n	8003ecc <HAL_PCD_EP_Close+0x8c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f002 f8b3 	bl	8006028 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee4:	7afb      	ldrb	r3, [r7, #11]
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	3304      	adds	r3, #4
 8003efc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	2200      	movs	r2, #0
 8003f14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f16:	7afb      	ldrb	r3, [r7, #11]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d102      	bne.n	8003f30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6979      	ldr	r1, [r7, #20]
 8003f48:	f002 fb92 	bl	8006670 <USB_EP0StartXfer>
 8003f4c:	e008      	b.n	8003f60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6979      	ldr	r1, [r7, #20]
 8003f5c:	f002 f940 	bl	80061e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	f003 020f 	and.w	r2, r3, #15
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003f8c:	681b      	ldr	r3, [r3, #0]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003faa:	7afb      	ldrb	r3, [r7, #11]
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	3338      	adds	r3, #56	; 0x38
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fda:	7afb      	ldrb	r3, [r7, #11]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d102      	bne.n	8003ff4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ff4:	7afb      	ldrb	r3, [r7, #11]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	461a      	mov	r2, r3
 800400a:	6979      	ldr	r1, [r7, #20]
 800400c:	f002 fb30 	bl	8006670 <USB_EP0StartXfer>
 8004010:	e008      	b.n	8004024 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	6979      	ldr	r1, [r7, #20]
 8004020:	f002 f8de 	bl	80061e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d901      	bls.n	800404c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e050      	b.n	80040ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800404c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004050:	2b00      	cmp	r3, #0
 8004052:	da0f      	bge.n	8004074 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	f003 020f 	and.w	r2, r3, #15
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3338      	adds	r3, #56	; 0x38
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	705a      	strb	r2, [r3, #1]
 8004072:	e00d      	b.n	8004090 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	3304      	adds	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_PCD_EP_SetStall+0x82>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e01e      	b.n	80040ee <HAL_PCD_EP_SetStall+0xc0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 fd6e 	bl	8006ba0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	b2d9      	uxtb	r1, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040de:	461a      	mov	r2, r3
 80040e0:	f002 ff5e 	bl	8006fa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 020f 	and.w	r2, r3, #15
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	429a      	cmp	r2, r3
 800410e:	d901      	bls.n	8004114 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e042      	b.n	800419a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da0f      	bge.n	800413c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	3338      	adds	r3, #56	; 0x38
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	3304      	adds	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	705a      	strb	r2, [r3, #1]
 800413a:	e00f      	b.n	800415c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	3304      	adds	r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_PCD_EP_ClrStall+0x86>
 8004178:	2302      	movs	r3, #2
 800417a:	e00e      	b.n	800419a <HAL_PCD_EP_ClrStall+0xa4>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68f9      	ldr	r1, [r7, #12]
 800418a:	4618      	mov	r0, r3
 800418c:	f002 fd76 	bl	8006c7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	460b      	mov	r3, r1
 80041ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80041ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	da0c      	bge.n	80041d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	f003 020f 	and.w	r2, r3, #15
 80041bc:	4613      	mov	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	3338      	adds	r3, #56	; 0x38
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	3304      	adds	r3, #4
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e00c      	b.n	80041ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	4613      	mov	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	3304      	adds	r3, #4
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fb95 	bl	8006920 <USB_EPStopXfer>
 80041f6:	4603      	mov	r3, r0
 80041f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80041fa:	7afb      	ldrb	r3, [r7, #11]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	3338      	adds	r3, #56	; 0x38
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	3304      	adds	r3, #4
 800422a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	429a      	cmp	r2, r3
 8004236:	d901      	bls.n	800423c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e06c      	b.n	8004316 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	429a      	cmp	r2, r3
 8004250:	d902      	bls.n	8004258 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	3303      	adds	r3, #3
 800425c:	089b      	lsrs	r3, r3, #2
 800425e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004260:	e02b      	b.n	80042ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	429a      	cmp	r2, r3
 8004276:	d902      	bls.n	800427e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3303      	adds	r3, #3
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6919      	ldr	r1, [r3, #16]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004296:	b2db      	uxtb	r3, r3
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4603      	mov	r3, r0
 800429c:	6978      	ldr	r0, [r7, #20]
 800429e:	f002 fbe9 	bl	8006a74 <USB_WritePacket>

    ep->xfer_buff  += len;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	441a      	add	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a1a      	ldr	r2, [r3, #32]
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	441a      	add	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d809      	bhi.n	80042e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042d8:	429a      	cmp	r2, r3
 80042da:	d203      	bcs.n	80042e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1be      	bne.n	8004262 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	699a      	ldr	r2, [r3, #24]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d811      	bhi.n	8004314 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	2201      	movs	r2, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	43db      	mvns	r3, r3
 800430a:	6939      	ldr	r1, [r7, #16]
 800430c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004310:	4013      	ands	r3, r2
 8004312:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	333c      	adds	r3, #60	; 0x3c
 8004338:	3304      	adds	r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d17b      	bne.n	800444e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	4a61      	ldr	r2, [pc, #388]	; (80044e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	f240 80b9 	bls.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80b3 	beq.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004388:	6093      	str	r3, [r2, #8]
 800438a:	e0a7      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a2:	461a      	mov	r2, r3
 80043a4:	2320      	movs	r3, #32
 80043a6:	6093      	str	r3, [r2, #8]
 80043a8:	e098      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 8093 	bne.w	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4a4b      	ldr	r2, [pc, #300]	; (80044e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d90f      	bls.n	80043de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	461a      	mov	r2, r3
 80043d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043da:	6093      	str	r3, [r2, #8]
 80043dc:	e07e      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	4413      	add	r3, r2
 80043f0:	3304      	adds	r3, #4
 80043f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	0159      	lsls	r1, r3, #5
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	440b      	add	r3, r1
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d114      	bne.n	8004440 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004428:	461a      	mov	r2, r3
 800442a:	2101      	movs	r1, #1
 800442c:	f002 fdb8 	bl	8006fa0 <USB_EP0_OutStart>
 8004430:	e006      	b.n	8004440 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	441a      	add	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f005 f886 	bl	8009558 <HAL_PCD_DataOutStageCallback>
 800444c:	e046      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4a26      	ldr	r2, [pc, #152]	; (80044ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d124      	bne.n	80044a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	6093      	str	r3, [r2, #8]
 8004474:	e032      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448c:	461a      	mov	r2, r3
 800448e:	2320      	movs	r3, #32
 8004490:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f005 f85d 	bl	8009558 <HAL_PCD_DataOutStageCallback>
 800449e:	e01d      	b.n	80044dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d114      	bne.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044c8:	461a      	mov	r2, r3
 80044ca:	2100      	movs	r1, #0
 80044cc:	f002 fd68 	bl	8006fa0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f005 f83e 	bl	8009558 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3720      	adds	r7, #32
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	4f54300a 	.word	0x4f54300a
 80044ec:	4f54310a 	.word	0x4f54310a

080044f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	333c      	adds	r3, #60	; 0x3c
 8004508:	3304      	adds	r3, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <PCD_EP_OutSetupPacket_int+0x88>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d90e      	bls.n	8004544 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004542:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f004 fff5 	bl	8009534 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <PCD_EP_OutSetupPacket_int+0x88>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d90c      	bls.n	800456c <PCD_EP_OutSetupPacket_int+0x7c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d108      	bne.n	800456c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004564:	461a      	mov	r2, r3
 8004566:	2101      	movs	r1, #1
 8004568:	f002 fd1a 	bl	8006fa0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	4f54300a 	.word	0x4f54300a

0800457c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
 8004588:	4613      	mov	r3, r2
 800458a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d107      	bne.n	80045aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800459a:	883b      	ldrh	r3, [r7, #0]
 800459c:	0419      	lsls	r1, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28
 80045a8:	e028      	b.n	80045fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
 80045bc:	e00d      	b.n	80045da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	3340      	adds	r3, #64	; 0x40
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	0c1b      	lsrs	r3, r3, #16
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	3301      	adds	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
 80045da:	7bfa      	ldrb	r2, [r7, #15]
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	3b01      	subs	r3, #1
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3ec      	bcc.n	80045be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045e4:	883b      	ldrh	r3, [r7, #0]
 80045e6:	0418      	lsls	r0, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6819      	ldr	r1, [r3, #0]
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	4302      	orrs	r2, r0
 80045f4:	3340      	adds	r3, #64	; 0x40
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	460b      	mov	r3, r1
 8004614:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	887a      	ldrh	r2, [r7, #2]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e267      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d075      	beq.n	800474e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004662:	4b88      	ldr	r3, [pc, #544]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b04      	cmp	r3, #4
 800466c:	d00c      	beq.n	8004688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800466e:	4b85      	ldr	r3, [pc, #532]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004676:	2b08      	cmp	r3, #8
 8004678:	d112      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467a:	4b82      	ldr	r3, [pc, #520]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004686:	d10b      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004688:	4b7e      	ldr	r3, [pc, #504]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05b      	beq.n	800474c <HAL_RCC_OscConfig+0x108>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d157      	bne.n	800474c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e242      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d106      	bne.n	80046b8 <HAL_RCC_OscConfig+0x74>
 80046aa:	4b76      	ldr	r3, [pc, #472]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e01d      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c0:	d10c      	bne.n	80046dc <HAL_RCC_OscConfig+0x98>
 80046c2:	4b70      	ldr	r3, [pc, #448]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a6f      	ldr	r2, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b6d      	ldr	r3, [pc, #436]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a6c      	ldr	r2, [pc, #432]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0xb0>
 80046dc:	4b69      	ldr	r3, [pc, #420]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a65      	ldr	r2, [pc, #404]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80046ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d013      	beq.n	8004724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fd f978 	bl	80019f0 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004704:	f7fd f974 	bl	80019f0 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	; 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e207      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004716:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0xc0>
 8004722:	e014      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004724:	f7fd f964 	bl	80019f0 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800472c:	f7fd f960 	bl	80019f0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b64      	cmp	r3, #100	; 0x64
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e1f3      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800473e:	4b51      	ldr	r3, [pc, #324]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0xe8>
 800474a:	e000      	b.n	800474e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800475a:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00b      	beq.n	800477e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800476e:	2b08      	cmp	r3, #8
 8004770:	d11c      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004772:	4b44      	ldr	r3, [pc, #272]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d116      	bne.n	80047ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800477e:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e1c7      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4937      	ldr	r1, [pc, #220]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	e03a      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d020      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b4:	4b34      	ldr	r3, [pc, #208]	; (8004888 <HAL_RCC_OscConfig+0x244>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ba:	f7fd f919 	bl	80019f0 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c2:	f7fd f915 	bl	80019f0 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e1a8      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d4:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0f0      	beq.n	80047c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e0:	4b28      	ldr	r3, [pc, #160]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	4925      	ldr	r1, [pc, #148]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047f6:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_RCC_OscConfig+0x244>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fd f8f8 	bl	80019f0 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004804:	f7fd f8f4 	bl	80019f0 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e187      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d036      	beq.n	800489c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_RCC_OscConfig+0x248>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483c:	f7fd f8d8 	bl	80019f0 <HAL_GetTick>
 8004840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004844:	f7fd f8d4 	bl	80019f0 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e167      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004856:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_OscConfig+0x240>)
 8004858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0f0      	beq.n	8004844 <HAL_RCC_OscConfig+0x200>
 8004862:	e01b      	b.n	800489c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_OscConfig+0x248>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486a:	f7fd f8c1 	bl	80019f0 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	e00e      	b.n	8004890 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004872:	f7fd f8bd 	bl	80019f0 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d907      	bls.n	8004890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e150      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
 8004884:	40023800 	.word	0x40023800
 8004888:	42470000 	.word	0x42470000
 800488c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b88      	ldr	r3, [pc, #544]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ea      	bne.n	8004872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8097 	beq.w	80049d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	4b81      	ldr	r3, [pc, #516]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	4b7d      	ldr	r3, [pc, #500]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	4a7c      	ldr	r2, [pc, #496]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ca:	4b7a      	ldr	r3, [pc, #488]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048da:	4b77      	ldr	r3, [pc, #476]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d118      	bne.n	8004918 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e6:	4b74      	ldr	r3, [pc, #464]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a73      	ldr	r2, [pc, #460]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f2:	f7fd f87d 	bl	80019f0 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f8:	e008      	b.n	800490c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fa:	f7fd f879 	bl	80019f0 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e10c      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490c:	4b6a      	ldr	r3, [pc, #424]	; (8004ab8 <HAL_RCC_OscConfig+0x474>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0f0      	beq.n	80048fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d106      	bne.n	800492e <HAL_RCC_OscConfig+0x2ea>
 8004920:	4b64      	ldr	r3, [pc, #400]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a63      	ldr	r2, [pc, #396]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	e01c      	b.n	8004968 <HAL_RCC_OscConfig+0x324>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b05      	cmp	r3, #5
 8004934:	d10c      	bne.n	8004950 <HAL_RCC_OscConfig+0x30c>
 8004936:	4b5f      	ldr	r3, [pc, #380]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493a:	4a5e      	ldr	r2, [pc, #376]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 800493c:	f043 0304 	orr.w	r3, r3, #4
 8004940:	6713      	str	r3, [r2, #112]	; 0x70
 8004942:	4b5c      	ldr	r3, [pc, #368]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	4a5b      	ldr	r2, [pc, #364]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6713      	str	r3, [r2, #112]	; 0x70
 800494e:	e00b      	b.n	8004968 <HAL_RCC_OscConfig+0x324>
 8004950:	4b58      	ldr	r3, [pc, #352]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a57      	ldr	r2, [pc, #348]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	4b55      	ldr	r3, [pc, #340]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004962:	f023 0304 	bic.w	r3, r3, #4
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d015      	beq.n	800499c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004970:	f7fd f83e 	bl	80019f0 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004978:	f7fd f83a 	bl	80019f0 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e0cb      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800498e:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ee      	beq.n	8004978 <HAL_RCC_OscConfig+0x334>
 800499a:	e014      	b.n	80049c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800499c:	f7fd f828 	bl	80019f0 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fd f824 	bl	80019f0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0b5      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ba:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ee      	bne.n	80049a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	4a38      	ldr	r2, [pc, #224]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a1 	beq.w	8004b24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e2:	4b34      	ldr	r3, [pc, #208]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d05c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d141      	bne.n	8004a7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f6:	4b31      	ldr	r3, [pc, #196]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fc:	f7fc fff8 	bl	80019f0 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fc fff4 	bl	80019f0 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e087      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	019b      	lsls	r3, r3, #6
 8004a32:	431a      	orrs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	085b      	lsrs	r3, r3, #1
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	061b      	lsls	r3, r3, #24
 8004a46:	491b      	ldr	r1, [pc, #108]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a52:	f7fc ffcd 	bl	80019f0 <HAL_GetTick>
 8004a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a5a:	f7fc ffc9 	bl	80019f0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e05c      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6c:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0f0      	beq.n	8004a5a <HAL_RCC_OscConfig+0x416>
 8004a78:	e054      	b.n	8004b24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_RCC_OscConfig+0x478>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fc ffb6 	bl	80019f0 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a88:	f7fc ffb2 	bl	80019f0 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e045      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x444>
 8004aa6:	e03d      	b.n	8004b24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d107      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e038      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac0:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <HAL_RCC_OscConfig+0x4ec>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d028      	beq.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d121      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d11a      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d111      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0cc      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b48:	4b68      	ldr	r3, [pc, #416]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d90c      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b65      	ldr	r3, [pc, #404]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b63      	ldr	r3, [pc, #396]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0b8      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d020      	beq.n	8004bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b88:	4b59      	ldr	r3, [pc, #356]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	4a58      	ldr	r2, [pc, #352]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba0:	4b53      	ldr	r3, [pc, #332]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a52      	ldr	r2, [pc, #328]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b50      	ldr	r3, [pc, #320]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	494d      	ldr	r1, [pc, #308]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d044      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd2:	4b47      	ldr	r3, [pc, #284]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d119      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e07f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d003      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d107      	bne.n	8004c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d109      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e06f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c02:	4b3b      	ldr	r3, [pc, #236]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e067      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c12:	4b37      	ldr	r3, [pc, #220]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	4934      	ldr	r1, [pc, #208]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c24:	f7fc fee4 	bl	80019f0 <HAL_GetTick>
 8004c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c2c:	f7fc fee0 	bl	80019f0 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e04f      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c42:	4b2b      	ldr	r3, [pc, #172]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 020c 	and.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d1eb      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c54:	4b25      	ldr	r3, [pc, #148]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d20c      	bcs.n	8004c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b22      	ldr	r3, [pc, #136]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e032      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d008      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4916      	ldr	r1, [pc, #88]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	490e      	ldr	r1, [pc, #56]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cba:	f000 f821 	bl	8004d00 <HAL_RCC_GetSysClockFreq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	490a      	ldr	r1, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ccc:	5ccb      	ldrb	r3, [r1, r3]
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8004cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <HAL_RCC_ClockConfig+0x1c8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc fe44 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023c00 	.word	0x40023c00
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	0800c94c 	.word	0x0800c94c
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	20000004 	.word	0x20000004

08004d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d04:	b094      	sub	sp, #80	; 0x50
 8004d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	2300      	movs	r3, #0
 8004d12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d18:	4b79      	ldr	r3, [pc, #484]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d00d      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x40>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	f200 80e1 	bhi.w	8004eec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_RCC_GetSysClockFreq+0x34>
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d003      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d32:	e0db      	b.n	8004eec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4b73      	ldr	r3, [pc, #460]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d38:	e0db      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d3a:	4b73      	ldr	r3, [pc, #460]	; (8004f08 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d3e:	e0d8      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d40:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d4a:	4b6d      	ldr	r3, [pc, #436]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d063      	beq.n	8004e1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d56:	4b6a      	ldr	r3, [pc, #424]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	099b      	lsrs	r3, r3, #6
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d68:	633b      	str	r3, [r7, #48]	; 0x30
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d72:	4622      	mov	r2, r4
 8004d74:	462b      	mov	r3, r5
 8004d76:	f04f 0000 	mov.w	r0, #0
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	0159      	lsls	r1, r3, #5
 8004d80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d84:	0150      	lsls	r0, r2, #5
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	1a51      	subs	r1, r2, r1
 8004d8e:	6139      	str	r1, [r7, #16]
 8004d90:	4629      	mov	r1, r5
 8004d92:	eb63 0301 	sbc.w	r3, r3, r1
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004da4:	4659      	mov	r1, fp
 8004da6:	018b      	lsls	r3, r1, #6
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dae:	4651      	mov	r1, sl
 8004db0:	018a      	lsls	r2, r1, #6
 8004db2:	4651      	mov	r1, sl
 8004db4:	ebb2 0801 	subs.w	r8, r2, r1
 8004db8:	4659      	mov	r1, fp
 8004dba:	eb63 0901 	sbc.w	r9, r3, r1
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dd2:	4690      	mov	r8, r2
 8004dd4:	4699      	mov	r9, r3
 8004dd6:	4623      	mov	r3, r4
 8004dd8:	eb18 0303 	adds.w	r3, r8, r3
 8004ddc:	60bb      	str	r3, [r7, #8]
 8004dde:	462b      	mov	r3, r5
 8004de0:	eb49 0303 	adc.w	r3, r9, r3
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	f04f 0300 	mov.w	r3, #0
 8004dee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004df2:	4629      	mov	r1, r5
 8004df4:	024b      	lsls	r3, r1, #9
 8004df6:	4621      	mov	r1, r4
 8004df8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	024a      	lsls	r2, r1, #9
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e06:	2200      	movs	r2, #0
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e10:	f7fb ff1a 	bl	8000c48 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4613      	mov	r3, r2
 8004e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1c:	e058      	b.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1e:	4b38      	ldr	r3, [pc, #224]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	099b      	lsrs	r3, r3, #6
 8004e24:	2200      	movs	r2, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	4611      	mov	r1, r2
 8004e2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	; 0x24
 8004e34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	f04f 0000 	mov.w	r0, #0
 8004e40:	f04f 0100 	mov.w	r1, #0
 8004e44:	0159      	lsls	r1, r3, #5
 8004e46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e4a:	0150      	lsls	r0, r2, #5
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4641      	mov	r1, r8
 8004e52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e56:	4649      	mov	r1, r9
 8004e58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e70:	ebb2 040a 	subs.w	r4, r2, sl
 8004e74:	eb63 050b 	sbc.w	r5, r3, fp
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	00eb      	lsls	r3, r5, #3
 8004e82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e86:	00e2      	lsls	r2, r4, #3
 8004e88:	4614      	mov	r4, r2
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	4643      	mov	r3, r8
 8004e8e:	18e3      	adds	r3, r4, r3
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	464b      	mov	r3, r9
 8004e94:	eb45 0303 	adc.w	r3, r5, r3
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	028b      	lsls	r3, r1, #10
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	028a      	lsls	r2, r1, #10
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61bb      	str	r3, [r7, #24]
 8004ebe:	61fa      	str	r2, [r7, #28]
 8004ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec4:	f7fb fec0 	bl	8000c48 <__aeabi_uldivmod>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	4613      	mov	r3, r2
 8004ece:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	0c1b      	lsrs	r3, r3, #16
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	3301      	adds	r3, #1
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004eea:	e002      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eec:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3750      	adds	r7, #80	; 0x50
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800
 8004f04:	00f42400 	.word	0x00f42400
 8004f08:	007a1200 	.word	0x007a1200

08004f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f10:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f12:	681b      	ldr	r3, [r3, #0]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	20000000 	.word	0x20000000

08004f24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e041      	b.n	8004fba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc fb66 	bl	800161c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f000 fa96 	bl	8005494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d001      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e04e      	b.n	800507a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a23      	ldr	r2, [pc, #140]	; (8005088 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005006:	d01d      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_TIM_Base_Start_IT+0xc8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <HAL_TIM_Base_Start_IT+0xcc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_TIM_Base_Start_IT+0xd0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1b      	ldr	r2, [pc, #108]	; (8005098 <HAL_TIM_Base_Start_IT+0xd4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_TIM_Base_Start_IT+0xd8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <HAL_TIM_Base_Start_IT+0x80>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d111      	bne.n	8005068 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b06      	cmp	r3, #6
 8005054:	d010      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	e007      	b.n	8005078 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40010400 	.word	0x40010400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40001800 	.word	0x40001800

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0202 	mvn.w	r2, #2
 80050d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f9b5 	bl	8005456 <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9a7 	bl	8005442 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f9b8 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b04      	cmp	r3, #4
 800510c:	d122      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d11b      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0204 	mvn.w	r2, #4
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f98b 	bl	8005456 <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f97d 	bl	8005442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f98e 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b08      	cmp	r3, #8
 8005160:	d122      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d11b      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0208 	mvn.w	r2, #8
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2204      	movs	r2, #4
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f961 	bl	8005456 <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f953 	bl	8005442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 f964 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d122      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d11b      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0210 	mvn.w	r2, #16
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2208      	movs	r2, #8
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f937 	bl	8005456 <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f929 	bl	8005442 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f93a 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0201 	mvn.w	r2, #1
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fb fee0 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fae0 	bl	8005814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f8ff 	bl	800547e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b20      	cmp	r3, #32
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0220 	mvn.w	r2, #32
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 faaa 	bl	8005800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_ConfigClockSource+0x1c>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e0b4      	b.n	800543a <HAL_TIM_ConfigClockSource+0x186>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d03e      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0xd4>
 800530a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530e:	f200 8087 	bhi.w	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005316:	f000 8086 	beq.w	8005426 <HAL_TIM_ConfigClockSource+0x172>
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d87f      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b70      	cmp	r3, #112	; 0x70
 8005322:	d01a      	beq.n	800535a <HAL_TIM_ConfigClockSource+0xa6>
 8005324:	2b70      	cmp	r3, #112	; 0x70
 8005326:	d87b      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b60      	cmp	r3, #96	; 0x60
 800532a:	d050      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x11a>
 800532c:	2b60      	cmp	r3, #96	; 0x60
 800532e:	d877      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b50      	cmp	r3, #80	; 0x50
 8005332:	d03c      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0xfa>
 8005334:	2b50      	cmp	r3, #80	; 0x50
 8005336:	d873      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d058      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x13a>
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d86f      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d064      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 8005344:	2b30      	cmp	r3, #48	; 0x30
 8005346:	d86b      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d060      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 800534c:	2b20      	cmp	r3, #32
 800534e:	d867      	bhi.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d05c      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 8005354:	2b10      	cmp	r3, #16
 8005356:	d05a      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x15a>
 8005358:	e062      	b.n	8005420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	6899      	ldr	r1, [r3, #8]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f000 f9ad 	bl	80056c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800537c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	609a      	str	r2, [r3, #8]
      break;
 8005386:	e04f      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6899      	ldr	r1, [r3, #8]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f000 f996 	bl	80056c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053aa:	609a      	str	r2, [r3, #8]
      break;
 80053ac:	e03c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f000 f90a 	bl	80055d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2150      	movs	r1, #80	; 0x50
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f963 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 80053cc:	e02c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	461a      	mov	r2, r3
 80053dc:	f000 f929 	bl	8005632 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2160      	movs	r1, #96	; 0x60
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f953 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 80053ec:	e01c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6859      	ldr	r1, [r3, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f000 f8ea 	bl	80055d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2140      	movs	r1, #64	; 0x40
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f943 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 800540c:	e00c      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	4610      	mov	r0, r2
 800541a:	f000 f93a 	bl	8005692 <TIM_ITRx_SetConfig>
      break;
 800541e:	e003      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
      break;
 8005424:	e000      	b.n	8005428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
	...

08005494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a40      	ldr	r2, [pc, #256]	; (80055a8 <TIM_Base_SetConfig+0x114>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b2:	d00f      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a3d      	ldr	r2, [pc, #244]	; (80055ac <TIM_Base_SetConfig+0x118>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3c      	ldr	r2, [pc, #240]	; (80055b0 <TIM_Base_SetConfig+0x11c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3b      	ldr	r2, [pc, #236]	; (80055b4 <TIM_Base_SetConfig+0x120>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3a      	ldr	r2, [pc, #232]	; (80055b8 <TIM_Base_SetConfig+0x124>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d108      	bne.n	80054e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a2f      	ldr	r2, [pc, #188]	; (80055a8 <TIM_Base_SetConfig+0x114>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d02b      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f4:	d027      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <TIM_Base_SetConfig+0x118>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d023      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <TIM_Base_SetConfig+0x11c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01f      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <TIM_Base_SetConfig+0x120>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01b      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a29      	ldr	r2, [pc, #164]	; (80055b8 <TIM_Base_SetConfig+0x124>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d017      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a28      	ldr	r2, [pc, #160]	; (80055bc <TIM_Base_SetConfig+0x128>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <TIM_Base_SetConfig+0x12c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a26      	ldr	r2, [pc, #152]	; (80055c4 <TIM_Base_SetConfig+0x130>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a25      	ldr	r2, [pc, #148]	; (80055c8 <TIM_Base_SetConfig+0x134>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a24      	ldr	r2, [pc, #144]	; (80055cc <TIM_Base_SetConfig+0x138>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0xb2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a23      	ldr	r2, [pc, #140]	; (80055d0 <TIM_Base_SetConfig+0x13c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <TIM_Base_SetConfig+0x114>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a0c      	ldr	r2, [pc, #48]	; (80055b8 <TIM_Base_SetConfig+0x124>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d103      	bne.n	8005594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	615a      	str	r2, [r3, #20]
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40000400 	.word	0x40000400
 80055b0:	40000800 	.word	0x40000800
 80055b4:	40000c00 	.word	0x40000c00
 80055b8:	40010400 	.word	0x40010400
 80055bc:	40014000 	.word	0x40014000
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800
 80055c8:	40001800 	.word	0x40001800
 80055cc:	40001c00 	.word	0x40001c00
 80055d0:	40002000 	.word	0x40002000

080055d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0201 	bic.w	r2, r3, #1
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 030a 	bic.w	r3, r3, #10
 8005610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005632:	b480      	push	{r7}
 8005634:	b087      	sub	sp, #28
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0210 	bic.w	r2, r3, #16
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800565c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	031b      	lsls	r3, r3, #12
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800566e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005692:	b480      	push	{r7}
 8005694:	b085      	sub	sp, #20
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f043 0307 	orr.w	r3, r3, #7
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	609a      	str	r2, [r3, #8]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	609a      	str	r2, [r3, #8]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800571c:	2302      	movs	r3, #2
 800571e:	e05a      	b.n	80057d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d022      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d01d      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d018      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a1b      	ldr	r2, [pc, #108]	; (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d013      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00e      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d004      	beq.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a15      	ldr	r2, [pc, #84]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10c      	bne.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40010400 	.word	0x40010400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40001800 	.word	0x40001800

08005800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005828:	b084      	sub	sp, #16
 800582a:	b580      	push	{r7, lr}
 800582c:	b084      	sub	sp, #16
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	f107 001c 	add.w	r0, r7, #28
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	2b01      	cmp	r3, #1
 800583e:	d122      	bne.n	8005886 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d105      	bne.n	800587a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fbee 	bl	800705c <USB_CoreReset>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e01a      	b.n	80058bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 fbe2 	bl	800705c <USB_CoreReset>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800589c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
 80058ae:	e005      	b.n	80058bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10b      	bne.n	80058da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f043 0206 	orr.w	r2, r3, #6
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058e6:	b004      	add	sp, #16
 80058e8:	4770      	bx	lr
	...

080058ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	4613      	mov	r3, r2
 80058f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d165      	bne.n	80059cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4a41      	ldr	r2, [pc, #260]	; (8005a08 <USB_SetTurnaroundTime+0x11c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d906      	bls.n	8005916 <USB_SetTurnaroundTime+0x2a>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a40      	ldr	r2, [pc, #256]	; (8005a0c <USB_SetTurnaroundTime+0x120>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d202      	bcs.n	8005916 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005910:	230f      	movs	r3, #15
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e062      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4a3c      	ldr	r2, [pc, #240]	; (8005a0c <USB_SetTurnaroundTime+0x120>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d306      	bcc.n	800592c <USB_SetTurnaroundTime+0x40>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4a3b      	ldr	r2, [pc, #236]	; (8005a10 <USB_SetTurnaroundTime+0x124>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d202      	bcs.n	800592c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005926:	230e      	movs	r3, #14
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	e057      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4a38      	ldr	r2, [pc, #224]	; (8005a10 <USB_SetTurnaroundTime+0x124>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d306      	bcc.n	8005942 <USB_SetTurnaroundTime+0x56>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4a37      	ldr	r2, [pc, #220]	; (8005a14 <USB_SetTurnaroundTime+0x128>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d202      	bcs.n	8005942 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800593c:	230d      	movs	r3, #13
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	e04c      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	4a33      	ldr	r2, [pc, #204]	; (8005a14 <USB_SetTurnaroundTime+0x128>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d306      	bcc.n	8005958 <USB_SetTurnaroundTime+0x6c>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4a32      	ldr	r2, [pc, #200]	; (8005a18 <USB_SetTurnaroundTime+0x12c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d802      	bhi.n	8005958 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005952:	230c      	movs	r3, #12
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	e041      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	4a2f      	ldr	r2, [pc, #188]	; (8005a18 <USB_SetTurnaroundTime+0x12c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d906      	bls.n	800596e <USB_SetTurnaroundTime+0x82>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4a2e      	ldr	r2, [pc, #184]	; (8005a1c <USB_SetTurnaroundTime+0x130>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d802      	bhi.n	800596e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005968:	230b      	movs	r3, #11
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	e036      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <USB_SetTurnaroundTime+0x130>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d906      	bls.n	8005984 <USB_SetTurnaroundTime+0x98>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4a29      	ldr	r2, [pc, #164]	; (8005a20 <USB_SetTurnaroundTime+0x134>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d802      	bhi.n	8005984 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800597e:	230a      	movs	r3, #10
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	e02b      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4a26      	ldr	r2, [pc, #152]	; (8005a20 <USB_SetTurnaroundTime+0x134>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d906      	bls.n	800599a <USB_SetTurnaroundTime+0xae>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <USB_SetTurnaroundTime+0x138>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d202      	bcs.n	800599a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005994:	2309      	movs	r3, #9
 8005996:	617b      	str	r3, [r7, #20]
 8005998:	e020      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <USB_SetTurnaroundTime+0x138>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d306      	bcc.n	80059b0 <USB_SetTurnaroundTime+0xc4>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <USB_SetTurnaroundTime+0x13c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d802      	bhi.n	80059b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80059aa:	2308      	movs	r3, #8
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	e015      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <USB_SetTurnaroundTime+0x13c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d906      	bls.n	80059c6 <USB_SetTurnaroundTime+0xda>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4a1c      	ldr	r2, [pc, #112]	; (8005a2c <USB_SetTurnaroundTime+0x140>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d202      	bcs.n	80059c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80059c0:	2307      	movs	r3, #7
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	e00a      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80059c6:	2306      	movs	r3, #6
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e007      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80059d2:	2309      	movs	r3, #9
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	e001      	b.n	80059dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80059d8:	2309      	movs	r3, #9
 80059da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80059f4:	431a      	orrs	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	00d8acbf 	.word	0x00d8acbf
 8005a0c:	00e4e1c0 	.word	0x00e4e1c0
 8005a10:	00f42400 	.word	0x00f42400
 8005a14:	01067380 	.word	0x01067380
 8005a18:	011a499f 	.word	0x011a499f
 8005a1c:	01312cff 	.word	0x01312cff
 8005a20:	014ca43f 	.word	0x014ca43f
 8005a24:	016e3600 	.word	0x016e3600
 8005a28:	01a6ab1f 	.word	0x01a6ab1f
 8005a2c:	01e84800 	.word	0x01e84800

08005a30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f043 0201 	orr.w	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d115      	bne.n	8005ac2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	f7fb ffb0 	bl	8001a08 <HAL_Delay>
      ms++;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fa45 	bl	8006f3e <USB_GetMode>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d01e      	beq.n	8005af8 <USB_SetCurrentMode+0x84>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b31      	cmp	r3, #49	; 0x31
 8005abe:	d9f0      	bls.n	8005aa2 <USB_SetCurrentMode+0x2e>
 8005ac0:	e01a      	b.n	8005af8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ac2:	78fb      	ldrb	r3, [r7, #3]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d115      	bne.n	8005af4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ad4:	2001      	movs	r0, #1
 8005ad6:	f7fb ff97 	bl	8001a08 <HAL_Delay>
      ms++;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f001 fa2c 	bl	8006f3e <USB_GetMode>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <USB_SetCurrentMode+0x84>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b31      	cmp	r3, #49	; 0x31
 8005af0:	d9f0      	bls.n	8005ad4 <USB_SetCurrentMode+0x60>
 8005af2:	e001      	b.n	8005af8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e005      	b.n	8005b04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b32      	cmp	r3, #50	; 0x32
 8005afc:	d101      	bne.n	8005b02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e000      	b.n	8005b04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b086      	sub	sp, #24
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	e009      	b.n	8005b40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	3340      	adds	r3, #64	; 0x40
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	2b0e      	cmp	r3, #14
 8005b44:	d9f2      	bls.n	8005b2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d11c      	bne.n	8005b86 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
 8005b84:	e00b      	b.n	8005b9e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb8:	461a      	mov	r2, r3
 8005bba:	680b      	ldr	r3, [r1, #0]
 8005bbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10c      	bne.n	8005bde <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bca:	2100      	movs	r1, #0
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f965 	bl	8005e9c <USB_SetDevSpeed>
 8005bd2:	e008      	b.n	8005be6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f960 	bl	8005e9c <USB_SetDevSpeed>
 8005bdc:	e003      	b.n	8005be6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005bde:	2103      	movs	r1, #3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f95b 	bl	8005e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005be6:	2110      	movs	r1, #16
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f8f3 	bl	8005dd4 <USB_FlushTxFifo>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f91f 	bl	8005e3c <USB_FlushRxFifo>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c26:	461a      	mov	r2, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	e043      	b.n	8005cba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c48:	d118      	bne.n	8005c7c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10a      	bne.n	8005c66 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c62:	6013      	str	r3, [r2, #0]
 8005c64:	e013      	b.n	8005c8e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	461a      	mov	r2, r3
 8005c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e008      	b.n	8005c8e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	015a      	lsls	r2, r3, #5
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cac:	461a      	mov	r2, r3
 8005cae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d3b7      	bcc.n	8005c32 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	613b      	str	r3, [r7, #16]
 8005cc6:	e043      	b.n	8005d50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cde:	d118      	bne.n	8005d12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	e013      	b.n	8005d24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e008      	b.n	8005d24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d30:	461a      	mov	r2, r3
 8005d32:	2300      	movs	r3, #0
 8005d34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	461a      	mov	r2, r3
 8005d44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	613b      	str	r3, [r7, #16]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d3b7      	bcc.n	8005cc8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f043 0210 	orr.w	r2, r3, #16
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <USB_DevInit+0x2c4>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	f043 0208 	orr.w	r2, r3, #8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d107      	bne.n	8005dc0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db8:	f043 0304 	orr.w	r3, r3, #4
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dcc:	b004      	add	sp, #16
 8005dce:	4770      	bx	lr
 8005dd0:	803c3800 	.word	0x803c3800

08005dd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <USB_FlushTxFifo+0x64>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e01b      	b.n	8005e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	daf2      	bge.n	8005de2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	019b      	lsls	r3, r3, #6
 8005e04:	f043 0220 	orr.w	r2, r3, #32
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <USB_FlushTxFifo+0x64>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e006      	b.n	8005e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	d0f0      	beq.n	8005e0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	00030d40 	.word	0x00030d40

08005e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <USB_FlushRxFifo+0x5c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d901      	bls.n	8005e5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e018      	b.n	8005e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	daf2      	bge.n	8005e48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2210      	movs	r2, #16
 8005e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <USB_FlushRxFifo+0x5c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e006      	b.n	8005e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	2b10      	cmp	r3, #16
 8005e88:	d0f0      	beq.n	8005e6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	00030d40 	.word	0x00030d40

08005e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f003 0306 	and.w	r3, r3, #6
 8005ee6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d102      	bne.n	8005ef4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	75fb      	strb	r3, [r7, #23]
 8005ef2:	e00a      	b.n	8005f0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d002      	beq.n	8005f00 <USB_GetDevSpeed+0x32>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d102      	bne.n	8005f06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005f00:	2302      	movs	r3, #2
 8005f02:	75fb      	strb	r3, [r7, #23]
 8005f04:	e001      	b.n	8005f0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f06:	230f      	movs	r3, #15
 8005f08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	785b      	ldrb	r3, [r3, #1]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d13a      	bne.n	8005faa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	68f9      	ldr	r1, [r7, #12]
 8005f4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d155      	bne.n	8006018 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	791b      	ldrb	r3, [r3, #4]
 8005f86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	059b      	lsls	r3, r3, #22
 8005f8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f90:	4313      	orrs	r3, r2
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	e036      	b.n	8006018 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	69da      	ldr	r2, [r3, #28]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	2101      	movs	r1, #1
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11a      	bne.n	8006018 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	791b      	ldrb	r3, [r3, #4]
 8005ffc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ffe:	430b      	orrs	r3, r1
 8006000:	4313      	orrs	r3, r2
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006016:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
	...

08006028 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d161      	bne.n	8006108 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	015a      	lsls	r2, r3, #5
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800605a:	d11f      	bne.n	800609c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800607a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800609a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	2101      	movs	r1, #1
 80060ae:	fa01 f303 	lsl.w	r3, r1, r3
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	68f9      	ldr	r1, [r7, #12]
 80060b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060bc:	4013      	ands	r3, r2
 80060be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	2101      	movs	r1, #1
 80060d2:	fa01 f303 	lsl.w	r3, r1, r3
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	43db      	mvns	r3, r3
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060e0:	4013      	ands	r3, r2
 80060e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	0159      	lsls	r1, r3, #5
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	440b      	add	r3, r1
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	4619      	mov	r1, r3
 8006100:	4b35      	ldr	r3, [pc, #212]	; (80061d8 <USB_DeactivateEndpoint+0x1b0>)
 8006102:	4013      	ands	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
 8006106:	e060      	b.n	80061ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800611a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800611e:	d11f      	bne.n	8006160 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800615a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	2101      	movs	r1, #1
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	43db      	mvns	r3, r3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006180:	4013      	ands	r3, r2
 8006182:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	69da      	ldr	r2, [r3, #28]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	041b      	lsls	r3, r3, #16
 800619c:	43db      	mvns	r3, r3
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a4:	4013      	ands	r3, r2
 80061a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	0159      	lsls	r1, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	440b      	add	r3, r1
 80061be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c2:	4619      	mov	r1, r3
 80061c4:	4b05      	ldr	r3, [pc, #20]	; (80061dc <USB_DeactivateEndpoint+0x1b4>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3714      	adds	r7, #20
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	ec337800 	.word	0xec337800
 80061dc:	eff37800 	.word	0xeff37800

080061e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	785b      	ldrb	r3, [r3, #1]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	f040 815c 	bne.w	80064ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d132      	bne.n	8006270 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006228:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800622c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800624c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006268:	0cdb      	lsrs	r3, r3, #19
 800626a:	04db      	lsls	r3, r3, #19
 800626c:	6113      	str	r3, [r2, #16]
 800626e:	e074      	b.n	800635a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628a:	0cdb      	lsrs	r3, r3, #19
 800628c:	04db      	lsls	r3, r3, #19
 800628e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6999      	ldr	r1, [r3, #24]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	440b      	add	r3, r1
 80062cc:	1e59      	subs	r1, r3, #1
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80062d6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80062d8:	4b9d      	ldr	r3, [pc, #628]	; (8006550 <USB_EPStartXfer+0x370>)
 80062da:	400b      	ands	r3, r1
 80062dc:	69b9      	ldr	r1, [r7, #24]
 80062de:	0148      	lsls	r0, r1, #5
 80062e0:	69f9      	ldr	r1, [r7, #28]
 80062e2:	4401      	add	r1, r0
 80062e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062e8:	4313      	orrs	r3, r2
 80062ea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006302:	69b9      	ldr	r1, [r7, #24]
 8006304:	0148      	lsls	r0, r1, #5
 8006306:	69f9      	ldr	r1, [r7, #28]
 8006308:	4401      	add	r1, r0
 800630a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800630e:	4313      	orrs	r3, r2
 8006310:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	791b      	ldrb	r3, [r3, #4]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d11f      	bne.n	800635a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4413      	add	r3, r2
 8006322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	0151      	lsls	r1, r2, #5
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	440a      	add	r2, r1
 8006330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006334:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006338:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	0151      	lsls	r1, r2, #5
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	440a      	add	r2, r1
 8006350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006358:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800635a:	79fb      	ldrb	r3, [r7, #7]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d14b      	bne.n	80063f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	791b      	ldrb	r3, [r3, #4]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d128      	bne.n	80063d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d110      	bne.n	80063b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	e00f      	b.n	80063d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	e133      	b.n	8006660 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006412:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006416:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	791b      	ldrb	r3, [r3, #4]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d015      	beq.n	800644c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 811b 	beq.w	8006660 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	2101      	movs	r1, #1
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	69f9      	ldr	r1, [r7, #28]
 8006442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006446:	4313      	orrs	r3, r2
 8006448:	634b      	str	r3, [r1, #52]	; 0x34
 800644a:	e109      	b.n	8006660 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d110      	bne.n	800647e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69ba      	ldr	r2, [r7, #24]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	e00f      	b.n	800649e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6919      	ldr	r1, [r3, #16]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	b298      	uxth	r0, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4603      	mov	r3, r0
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 fade 	bl	8006a74 <USB_WritePacket>
 80064b8:	e0d2      	b.n	8006660 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d4:	0cdb      	lsrs	r3, r3, #19
 80064d6:	04db      	lsls	r3, r3, #19
 80064d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d126      	bne.n	8006554 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	015a      	lsls	r2, r3, #5
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	4413      	add	r3, r2
 800650e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006512:	691a      	ldr	r2, [r3, #16]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651c:	69b9      	ldr	r1, [r7, #24]
 800651e:	0148      	lsls	r0, r1, #5
 8006520:	69f9      	ldr	r1, [r7, #28]
 8006522:	4401      	add	r1, r0
 8006524:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006528:	4313      	orrs	r3, r2
 800652a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800654a:	6113      	str	r3, [r2, #16]
 800654c:	e03a      	b.n	80065c4 <USB_EPStartXfer+0x3e4>
 800654e:	bf00      	nop
 8006550:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	699a      	ldr	r2, [r3, #24]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	4413      	add	r3, r2
 800655e:	1e5a      	subs	r2, r3, #1
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	fbb2 f3f3 	udiv	r3, r2, r3
 8006568:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	8afa      	ldrh	r2, [r7, #22]
 8006570:	fb03 f202 	mul.w	r2, r3, r2
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	8afb      	ldrh	r3, [r7, #22]
 8006588:	04d9      	lsls	r1, r3, #19
 800658a:	4b38      	ldr	r3, [pc, #224]	; (800666c <USB_EPStartXfer+0x48c>)
 800658c:	400b      	ands	r3, r1
 800658e:	69b9      	ldr	r1, [r7, #24]
 8006590:	0148      	lsls	r0, r1, #5
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	4401      	add	r1, r0
 8006596:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800659a:	4313      	orrs	r3, r2
 800659c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	691a      	ldr	r2, [r3, #16]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	0148      	lsls	r0, r1, #5
 80065b8:	69f9      	ldr	r1, [r7, #28]
 80065ba:	4401      	add	r1, r0
 80065bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065c0:	4313      	orrs	r3, r2
 80065c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d10d      	bne.n	80065e6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d009      	beq.n	80065e6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	6919      	ldr	r1, [r3, #16]
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	460a      	mov	r2, r1
 80065e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	791b      	ldrb	r3, [r3, #4]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d128      	bne.n	8006640 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d110      	bne.n	8006620 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	440a      	add	r2, r1
 8006614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006618:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e00f      	b.n	8006640 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800665a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800665e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	1ff80000 	.word	0x1ff80000

08006670 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	f040 80ce 	bne.w	800682e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d132      	bne.n	8006700 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	0151      	lsls	r1, r2, #5
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	440a      	add	r2, r1
 80066f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f8:	0cdb      	lsrs	r3, r3, #19
 80066fa:	04db      	lsls	r3, r3, #19
 80066fc:	6113      	str	r3, [r2, #16]
 80066fe:	e04e      	b.n	800679e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671a:	0cdb      	lsrs	r3, r3, #19
 800671c:	04db      	lsls	r3, r3, #19
 800671e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	0151      	lsls	r1, r2, #5
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	440a      	add	r2, r1
 8006736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800673e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006742:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	429a      	cmp	r2, r3
 800674e:	d903      	bls.n	8006758 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006772:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800678e:	6939      	ldr	r1, [r7, #16]
 8006790:	0148      	lsls	r0, r1, #5
 8006792:	6979      	ldr	r1, [r7, #20]
 8006794:	4401      	add	r1, r0
 8006796:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800679a:	4313      	orrs	r3, r2
 800679c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d11e      	bne.n	80067e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d009      	beq.n	80067c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067b8:	461a      	mov	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e097      	b.n	8006912 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006800:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8083 	beq.w	8006912 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	2101      	movs	r1, #1
 800681e:	fa01 f303 	lsl.w	r3, r1, r3
 8006822:	6979      	ldr	r1, [r7, #20]
 8006824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006828:	4313      	orrs	r3, r2
 800682a:	634b      	str	r3, [r1, #52]	; 0x34
 800682c:	e071      	b.n	8006912 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006848:	0cdb      	lsrs	r3, r3, #19
 800684a:	04db      	lsls	r3, r3, #19
 800684c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006868:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800686c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006870:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c0:	6939      	ldr	r1, [r7, #16]
 80068c2:	0148      	lsls	r0, r1, #5
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	4401      	add	r1, r0
 80068c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068cc:	4313      	orrs	r3, r2
 80068ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d10d      	bne.n	80068f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6919      	ldr	r1, [r3, #16]
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ee:	460a      	mov	r2, r1
 80068f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800690c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006910:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d14a      	bne.n	80069d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006956:	f040 8086 	bne.w	8006a66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	7812      	ldrb	r2, [r2, #0]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006978:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800697c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d902      	bls.n	80069b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
          break;
 80069b6:	e056      	b.n	8006a66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069d0:	d0e7      	beq.n	80069a2 <USB_EPStopXfer+0x82>
 80069d2:	e048      	b.n	8006a66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069ec:	d13b      	bne.n	8006a66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	7812      	ldrb	r2, [r2, #0]
 8006a02:	0151      	lsls	r1, r2, #5
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	440a      	add	r2, r1
 8006a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	0151      	lsls	r1, r2, #5
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	440a      	add	r2, r1
 8006a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d902      	bls.n	8006a4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
          break;
 8006a4a:	e00c      	b.n	8006a66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a64:	d0e7      	beq.n	8006a36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	371c      	adds	r7, #28
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	; 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4611      	mov	r1, r2
 8006a80:	461a      	mov	r2, r3
 8006a82:	460b      	mov	r3, r1
 8006a84:	71fb      	strb	r3, [r7, #7]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d123      	bne.n	8006ae2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a9a:	88bb      	ldrh	r3, [r7, #4]
 8006a9c:	3303      	adds	r3, #3
 8006a9e:	089b      	lsrs	r3, r3, #2
 8006aa0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	e018      	b.n	8006ada <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	031a      	lsls	r2, r3, #12
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	3301      	adds	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d3e2      	bcc.n	8006aa8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3724      	adds	r7, #36	; 0x24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b08b      	sub	sp, #44	; 0x2c
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	4613      	mov	r3, r2
 8006afc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	089b      	lsrs	r3, r3, #2
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b16:	2300      	movs	r3, #0
 8006b18:	623b      	str	r3, [r7, #32]
 8006b1a:	e014      	b.n	8006b46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	3301      	adds	r3, #1
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	3301      	adds	r3, #1
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	3301      	adds	r3, #1
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	6a3a      	ldr	r2, [r7, #32]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d3e6      	bcc.n	8006b1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006b4e:	8bfb      	ldrh	r3, [r7, #30]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01e      	beq.n	8006b92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f107 0310 	add.w	r3, r7, #16
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	701a      	strb	r2, [r3, #0]
      i++;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	3301      	adds	r3, #1
 8006b84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b86:	8bfb      	ldrh	r3, [r7, #30]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b8c:	8bfb      	ldrh	r3, [r7, #30]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ea      	bne.n	8006b68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	372c      	adds	r7, #44	; 0x2c
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d12c      	bne.n	8006c16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	db12      	blt.n	8006bf4 <USB_EPSetStall+0x54>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bf2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	e02b      	b.n	8006c6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	db12      	blt.n	8006c4e <USB_EPSetStall+0xae>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00f      	beq.n	8006c4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d128      	bne.n	8006cea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	791b      	ldrb	r3, [r3, #4]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d003      	beq.n	8006cc8 <USB_EPClearStall+0x4c>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	791b      	ldrb	r3, [r3, #4]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d138      	bne.n	8006d3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	e027      	b.n	8006d3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	791b      	ldrb	r3, [r3, #4]
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d003      	beq.n	8006d1a <USB_EPClearStall+0x9e>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	791b      	ldrb	r3, [r3, #4]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d10f      	bne.n	8006d3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	78fb      	ldrb	r3, [r7, #3]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d82:	4313      	orrs	r3, r2
 8006d84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dc2:	f023 0302 	bic.w	r3, r3, #2
 8006dc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006df0:	f023 0303 	bic.w	r3, r3, #3
 8006df4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e04:	f043 0302 	orr.w	r3, r3, #2
 8006e08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e30:	68fb      	ldr	r3, [r7, #12]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	0c1b      	lsrs	r3, r3, #16
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	b29b      	uxth	r3, r3
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f003 030f 	and.w	r3, r3, #15
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f12:	01db      	lsls	r3, r3, #7
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f30:	68bb      	ldr	r3, [r7, #8]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006f5a:	b480      	push	{r7}
 8006f5c:	b085      	sub	sp, #20
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f78:	f023 0307 	bic.w	r3, r3, #7
 8006f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	333c      	adds	r3, #60	; 0x3c
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	4a26      	ldr	r2, [pc, #152]	; (8007058 <USB_EP0_OutStart+0xb8>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d90a      	bls.n	8006fda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd4:	d101      	bne.n	8006fda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	e037      	b.n	800704a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007008:	f043 0318 	orr.w	r3, r3, #24
 800700c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007020:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007022:	7afb      	ldrb	r3, [r7, #11]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d10f      	bne.n	8007048 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702e:	461a      	mov	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007042:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	371c      	adds	r7, #28
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	4f54300a 	.word	0x4f54300a

0800705c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a13      	ldr	r2, [pc, #76]	; (80070c0 <USB_CoreReset+0x64>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e01b      	b.n	80070b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	2b00      	cmp	r3, #0
 8007080:	daf2      	bge.n	8007068 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	f043 0201 	orr.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <USB_CoreReset+0x64>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d901      	bls.n	80070a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e006      	b.n	80070b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d0f0      	beq.n	8007092 <USB_CoreReset+0x36>

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	00030d40 	.word	0x00030d40

080070c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	460b      	mov	r3, r1
 80070ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070d0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070d4:	f002 fcaa 	bl	8009a2c <USBD_static_malloc>
 80070d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d109      	bne.n	80070f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	32b0      	adds	r2, #176	; 0xb0
 80070ea:	2100      	movs	r1, #0
 80070ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80070f0:	2302      	movs	r3, #2
 80070f2:	e0d4      	b.n	800729e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80070f4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80070f8:	2100      	movs	r1, #0
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f002 fd12 	bl	8009b24 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	32b0      	adds	r2, #176	; 0xb0
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	32b0      	adds	r2, #176	; 0xb0
 800711a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	7c1b      	ldrb	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d138      	bne.n	800719e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800712c:	4b5e      	ldr	r3, [pc, #376]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 800712e:	7819      	ldrb	r1, [r3, #0]
 8007130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007134:	2202      	movs	r2, #2
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f002 fb55 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800713c:	4b5a      	ldr	r3, [pc, #360]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	f003 020f 	and.w	r2, r3, #15
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	440b      	add	r3, r1
 8007150:	3324      	adds	r3, #36	; 0x24
 8007152:	2201      	movs	r2, #1
 8007154:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007156:	4b55      	ldr	r3, [pc, #340]	; (80072ac <USBD_CDC_Init+0x1e8>)
 8007158:	7819      	ldrb	r1, [r3, #0]
 800715a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800715e:	2202      	movs	r2, #2
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f002 fb40 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007166:	4b51      	ldr	r3, [pc, #324]	; (80072ac <USBD_CDC_Init+0x1e8>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f003 020f 	and.w	r2, r3, #15
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800717e:	2201      	movs	r2, #1
 8007180:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007182:	4b4b      	ldr	r3, [pc, #300]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f003 020f 	and.w	r2, r3, #15
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	3326      	adds	r3, #38	; 0x26
 8007198:	2210      	movs	r2, #16
 800719a:	801a      	strh	r2, [r3, #0]
 800719c:	e035      	b.n	800720a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800719e:	4b42      	ldr	r3, [pc, #264]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 80071a0:	7819      	ldrb	r1, [r3, #0]
 80071a2:	2340      	movs	r3, #64	; 0x40
 80071a4:	2202      	movs	r2, #2
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fb1d 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071ac:	4b3e      	ldr	r3, [pc, #248]	; (80072a8 <USBD_CDC_Init+0x1e4>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3324      	adds	r3, #36	; 0x24
 80071c2:	2201      	movs	r2, #1
 80071c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071c6:	4b39      	ldr	r3, [pc, #228]	; (80072ac <USBD_CDC_Init+0x1e8>)
 80071c8:	7819      	ldrb	r1, [r3, #0]
 80071ca:	2340      	movs	r3, #64	; 0x40
 80071cc:	2202      	movs	r2, #2
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f002 fb09 	bl	80097e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071d4:	4b35      	ldr	r3, [pc, #212]	; (80072ac <USBD_CDC_Init+0x1e8>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 020f 	and.w	r2, r3, #15
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80071ec:	2201      	movs	r2, #1
 80071ee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80071f0:	4b2f      	ldr	r3, [pc, #188]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	3326      	adds	r3, #38	; 0x26
 8007206:	2210      	movs	r2, #16
 8007208:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800720a:	4b29      	ldr	r3, [pc, #164]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 800720c:	7819      	ldrb	r1, [r3, #0]
 800720e:	2308      	movs	r3, #8
 8007210:	2203      	movs	r2, #3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 fae7 	bl	80097e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <USBD_CDC_Init+0x1ec>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	4613      	mov	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	440b      	add	r3, r1
 800722c:	3324      	adds	r3, #36	; 0x24
 800722e:	2201      	movs	r2, #1
 8007230:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	33b0      	adds	r3, #176	; 0xb0
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007268:	2302      	movs	r3, #2
 800726a:	e018      	b.n	800729e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7c1b      	ldrb	r3, [r3, #16]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007274:	4b0d      	ldr	r3, [pc, #52]	; (80072ac <USBD_CDC_Init+0x1e8>)
 8007276:	7819      	ldrb	r1, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800727e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f002 fb9e 	bl	80099c4 <USBD_LL_PrepareReceive>
 8007288:	e008      	b.n	800729c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800728a:	4b08      	ldr	r3, [pc, #32]	; (80072ac <USBD_CDC_Init+0x1e8>)
 800728c:	7819      	ldrb	r1, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007294:	2340      	movs	r3, #64	; 0x40
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f002 fb94 	bl	80099c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000093 	.word	0x20000093
 80072ac:	20000094 	.word	0x20000094
 80072b0:	20000095 	.word	0x20000095

080072b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80072c0:	4b3a      	ldr	r3, [pc, #232]	; (80073ac <USBD_CDC_DeInit+0xf8>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f002 fab3 	bl	8009832 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80072cc:	4b37      	ldr	r3, [pc, #220]	; (80073ac <USBD_CDC_DeInit+0xf8>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	f003 020f 	and.w	r2, r3, #15
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	440b      	add	r3, r1
 80072e0:	3324      	adds	r3, #36	; 0x24
 80072e2:	2200      	movs	r2, #0
 80072e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80072e6:	4b32      	ldr	r3, [pc, #200]	; (80073b0 <USBD_CDC_DeInit+0xfc>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f002 faa0 	bl	8009832 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80072f2:	4b2f      	ldr	r3, [pc, #188]	; (80073b0 <USBD_CDC_DeInit+0xfc>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	440b      	add	r3, r1
 8007306:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800730a:	2200      	movs	r2, #0
 800730c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800730e:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <USBD_CDC_DeInit+0x100>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f002 fa8c 	bl	8009832 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800731a:	4b26      	ldr	r3, [pc, #152]	; (80073b4 <USBD_CDC_DeInit+0x100>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	f003 020f 	and.w	r2, r3, #15
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	2200      	movs	r2, #0
 8007332:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007334:	4b1f      	ldr	r3, [pc, #124]	; (80073b4 <USBD_CDC_DeInit+0x100>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	f003 020f 	and.w	r2, r3, #15
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	440b      	add	r3, r1
 8007348:	3326      	adds	r3, #38	; 0x26
 800734a:	2200      	movs	r2, #0
 800734c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	32b0      	adds	r2, #176	; 0xb0
 8007358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01f      	beq.n	80073a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	33b0      	adds	r3, #176	; 0xb0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32b0      	adds	r2, #176	; 0xb0
 800737e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007382:	4618      	mov	r0, r3
 8007384:	f002 fb60 	bl	8009a48 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	32b0      	adds	r2, #176	; 0xb0
 8007392:	2100      	movs	r1, #0
 8007394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000093 	.word	0x20000093
 80073b0:	20000094 	.word	0x20000094
 80073b4:	20000095 	.word	0x20000095

080073b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	32b0      	adds	r2, #176	; 0xb0
 80073cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e0bf      	b.n	8007568 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d050      	beq.n	8007496 <USBD_CDC_Setup+0xde>
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	f040 80af 	bne.w	8007558 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	88db      	ldrh	r3, [r3, #6]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d03a      	beq.n	8007478 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	b25b      	sxtb	r3, r3
 8007408:	2b00      	cmp	r3, #0
 800740a:	da1b      	bge.n	8007444 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	33b0      	adds	r3, #176	; 0xb0
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007422:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	88d2      	ldrh	r2, [r2, #6]
 8007428:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	88db      	ldrh	r3, [r3, #6]
 800742e:	2b07      	cmp	r3, #7
 8007430:	bf28      	it	cs
 8007432:	2307      	movcs	r3, #7
 8007434:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	89fa      	ldrh	r2, [r7, #14]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fd89 	bl	8008f54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007442:	e090      	b.n	8007566 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785a      	ldrb	r2, [r3, #1]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	88db      	ldrh	r3, [r3, #6]
 8007452:	2b3f      	cmp	r3, #63	; 0x3f
 8007454:	d803      	bhi.n	800745e <USBD_CDC_Setup+0xa6>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	88db      	ldrh	r3, [r3, #6]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	e000      	b.n	8007460 <USBD_CDC_Setup+0xa8>
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007466:	6939      	ldr	r1, [r7, #16]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800746e:	461a      	mov	r2, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fd9b 	bl	8008fac <USBD_CtlPrepareRx>
      break;
 8007476:	e076      	b.n	8007566 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	33b0      	adds	r3, #176	; 0xb0
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	7850      	ldrb	r0, [r2, #1]
 800748e:	2200      	movs	r2, #0
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	4798      	blx	r3
      break;
 8007494:	e067      	b.n	8007566 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	2b0b      	cmp	r3, #11
 800749c:	d851      	bhi.n	8007542 <USBD_CDC_Setup+0x18a>
 800749e:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <USBD_CDC_Setup+0xec>)
 80074a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a4:	080074d5 	.word	0x080074d5
 80074a8:	08007551 	.word	0x08007551
 80074ac:	08007543 	.word	0x08007543
 80074b0:	08007543 	.word	0x08007543
 80074b4:	08007543 	.word	0x08007543
 80074b8:	08007543 	.word	0x08007543
 80074bc:	08007543 	.word	0x08007543
 80074c0:	08007543 	.word	0x08007543
 80074c4:	08007543 	.word	0x08007543
 80074c8:	08007543 	.word	0x08007543
 80074cc:	080074ff 	.word	0x080074ff
 80074d0:	08007529 	.word	0x08007529
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d107      	bne.n	80074f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074e0:	f107 030a 	add.w	r3, r7, #10
 80074e4:	2202      	movs	r2, #2
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f001 fd33 	bl	8008f54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ee:	e032      	b.n	8007556 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 fcbd 	bl	8008e72 <USBD_CtlError>
            ret = USBD_FAIL;
 80074f8:	2303      	movs	r3, #3
 80074fa:	75fb      	strb	r3, [r7, #23]
          break;
 80074fc:	e02b      	b.n	8007556 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b03      	cmp	r3, #3
 8007508:	d107      	bne.n	800751a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800750a:	f107 030d 	add.w	r3, r7, #13
 800750e:	2201      	movs	r2, #1
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f001 fd1e 	bl	8008f54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007518:	e01d      	b.n	8007556 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800751a:	6839      	ldr	r1, [r7, #0]
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fca8 	bl	8008e72 <USBD_CtlError>
            ret = USBD_FAIL;
 8007522:	2303      	movs	r3, #3
 8007524:	75fb      	strb	r3, [r7, #23]
          break;
 8007526:	e016      	b.n	8007556 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b03      	cmp	r3, #3
 8007532:	d00f      	beq.n	8007554 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc9b 	bl	8008e72 <USBD_CtlError>
            ret = USBD_FAIL;
 800753c:	2303      	movs	r3, #3
 800753e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007540:	e008      	b.n	8007554 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fc94 	bl	8008e72 <USBD_CtlError>
          ret = USBD_FAIL;
 800754a:	2303      	movs	r3, #3
 800754c:	75fb      	strb	r3, [r7, #23]
          break;
 800754e:	e002      	b.n	8007556 <USBD_CDC_Setup+0x19e>
          break;
 8007550:	bf00      	nop
 8007552:	e008      	b.n	8007566 <USBD_CDC_Setup+0x1ae>
          break;
 8007554:	bf00      	nop
      }
      break;
 8007556:	e006      	b.n	8007566 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fc89 	bl	8008e72 <USBD_CtlError>
      ret = USBD_FAIL;
 8007560:	2303      	movs	r3, #3
 8007562:	75fb      	strb	r3, [r7, #23]
      break;
 8007564:	bf00      	nop
  }

  return (uint8_t)ret;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007582:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32b0      	adds	r2, #176	; 0xb0
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007596:	2303      	movs	r3, #3
 8007598:	e065      	b.n	8007666 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	32b0      	adds	r2, #176	; 0xb0
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	f003 020f 	and.w	r2, r3, #15
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	440b      	add	r3, r1
 80075bc:	3318      	adds	r3, #24
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d02f      	beq.n	8007624 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80075c4:	78fb      	ldrb	r3, [r7, #3]
 80075c6:	f003 020f 	and.w	r2, r3, #15
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	440b      	add	r3, r1
 80075d6:	3318      	adds	r3, #24
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	78fb      	ldrb	r3, [r7, #3]
 80075dc:	f003 010f 	and.w	r1, r3, #15
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	460b      	mov	r3, r1
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	440b      	add	r3, r1
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4403      	add	r3, r0
 80075ec:	3348      	adds	r3, #72	; 0x48
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d112      	bne.n	8007624 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	f003 020f 	and.w	r2, r3, #15
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	3318      	adds	r3, #24
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007616:	78f9      	ldrb	r1, [r7, #3]
 8007618:	2300      	movs	r3, #0
 800761a:	2200      	movs	r2, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f002 f9b0 	bl	8009982 <USBD_LL_Transmit>
 8007622:	e01f      	b.n	8007664 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	33b0      	adds	r3, #176	; 0xb0
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	4413      	add	r3, r2
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d010      	beq.n	8007664 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	33b0      	adds	r3, #176	; 0xb0
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32b0      	adds	r2, #176	; 0xb0
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	32b0      	adds	r2, #176	; 0xb0
 8007694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800769c:	2303      	movs	r3, #3
 800769e:	e01a      	b.n	80076d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f002 f9ae 	bl	8009a06 <USBD_LL_GetRxDataSize>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	33b0      	adds	r3, #176	; 0xb0
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80076d0:	4611      	mov	r1, r2
 80076d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32b0      	adds	r2, #176	; 0xb0
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e025      	b.n	800774c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	33b0      	adds	r3, #176	; 0xb0
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d01a      	beq.n	800774a <USBD_CDC_EP0_RxReady+0x6c>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800771a:	2bff      	cmp	r3, #255	; 0xff
 800771c:	d015      	beq.n	800774a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	33b0      	adds	r3, #176	; 0xb0
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4413      	add	r3, r2
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007736:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800773e:	b292      	uxth	r2, r2
 8007740:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	22ff      	movs	r2, #255	; 0xff
 8007746:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800775c:	2182      	movs	r1, #130	; 0x82
 800775e:	4818      	ldr	r0, [pc, #96]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007760:	f000 fd4f 	bl	8008202 <USBD_GetEpDesc>
 8007764:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007766:	2101      	movs	r1, #1
 8007768:	4815      	ldr	r0, [pc, #84]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800776a:	f000 fd4a 	bl	8008202 <USBD_GetEpDesc>
 800776e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007770:	2181      	movs	r1, #129	; 0x81
 8007772:	4813      	ldr	r0, [pc, #76]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007774:	f000 fd45 	bl	8008202 <USBD_GetEpDesc>
 8007778:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2210      	movs	r2, #16
 8007784:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d006      	beq.n	800779a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2200      	movs	r2, #0
 8007790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007794:	711a      	strb	r2, [r3, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a8:	711a      	strb	r2, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2243      	movs	r2, #67	; 0x43
 80077b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000050 	.word	0x20000050

080077c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077cc:	2182      	movs	r1, #130	; 0x82
 80077ce:	4818      	ldr	r0, [pc, #96]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077d0:	f000 fd17 	bl	8008202 <USBD_GetEpDesc>
 80077d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077d6:	2101      	movs	r1, #1
 80077d8:	4815      	ldr	r0, [pc, #84]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077da:	f000 fd12 	bl	8008202 <USBD_GetEpDesc>
 80077de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077e0:	2181      	movs	r1, #129	; 0x81
 80077e2:	4813      	ldr	r0, [pc, #76]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80077e4:	f000 fd0d 	bl	8008202 <USBD_GetEpDesc>
 80077e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d002      	beq.n	80077f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2210      	movs	r2, #16
 80077f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	2200      	movs	r2, #0
 8007800:	711a      	strb	r2, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f042 0202 	orr.w	r2, r2, #2
 8007808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d006      	beq.n	800781e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	711a      	strb	r2, [r3, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f042 0202 	orr.w	r2, r2, #2
 800781c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2243      	movs	r2, #67	; 0x43
 8007822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007824:	4b02      	ldr	r3, [pc, #8]	; (8007830 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000050 	.word	0x20000050

08007834 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800783c:	2182      	movs	r1, #130	; 0x82
 800783e:	4818      	ldr	r0, [pc, #96]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007840:	f000 fcdf 	bl	8008202 <USBD_GetEpDesc>
 8007844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007846:	2101      	movs	r1, #1
 8007848:	4815      	ldr	r0, [pc, #84]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800784a:	f000 fcda 	bl	8008202 <USBD_GetEpDesc>
 800784e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007850:	2181      	movs	r1, #129	; 0x81
 8007852:	4813      	ldr	r0, [pc, #76]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007854:	f000 fcd5 	bl	8008202 <USBD_GetEpDesc>
 8007858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2210      	movs	r2, #16
 8007864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2200      	movs	r2, #0
 8007870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007874:	711a      	strb	r2, [r3, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d006      	beq.n	800788e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007888:	711a      	strb	r2, [r3, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2243      	movs	r2, #67	; 0x43
 8007892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20000050 	.word	0x20000050

080078a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	220a      	movs	r2, #10
 80078b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	2000000c 	.word	0x2000000c

080078c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e009      	b.n	80078ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	33b0      	adds	r3, #176	; 0xb0
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	32b0      	adds	r2, #176	; 0xb0
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800791a:	2303      	movs	r3, #3
 800791c:	e008      	b.n	8007930 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	68ba      	ldr	r2, [r7, #8]
 8007922:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	32b0      	adds	r2, #176	; 0xb0
 8007950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007954:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800795c:	2303      	movs	r3, #3
 800795e:	e004      	b.n	800796a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32b0      	adds	r2, #176	; 0xb0
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	32b0      	adds	r2, #176	; 0xb0
 800799e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e025      	b.n	80079f6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11f      	bne.n	80079f4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80079bc:	4b10      	ldr	r3, [pc, #64]	; (8007a00 <USBD_CDC_TransmitPacket+0x88>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 020f 	and.w	r2, r3, #15
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4403      	add	r3, r0
 80079d6:	3318      	adds	r3, #24
 80079d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <USBD_CDC_TransmitPacket+0x88>)
 80079dc:	7819      	ldrb	r1, [r3, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 ffc9 	bl	8009982 <USBD_LL_Transmit>

    ret = USBD_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000093 	.word	0x20000093

08007a04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32b0      	adds	r2, #176	; 0xb0
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32b0      	adds	r2, #176	; 0xb0
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e018      	b.n	8007a64 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	7c1b      	ldrb	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10a      	bne.n	8007a50 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a3a:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <USBD_CDC_ReceivePacket+0x68>)
 8007a3c:	7819      	ldrb	r1, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 ffbb 	bl	80099c4 <USBD_LL_PrepareReceive>
 8007a4e:	e008      	b.n	8007a62 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a50:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <USBD_CDC_ReceivePacket+0x68>)
 8007a52:	7819      	ldrb	r1, [r3, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 ffb1 	bl	80099c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20000094 	.word	0x20000094

08007a70 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e01f      	b.n	8007ac8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	79fa      	ldrb	r2, [r7, #7]
 8007aba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f001 fe2b 	bl	8009718 <USBD_LL_Init>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e025      	b.n	8007b34 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32ae      	adds	r2, #174	; 0xae
 8007afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00f      	beq.n	8007b24 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	32ae      	adds	r2, #174	; 0xae
 8007b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	f107 020e 	add.w	r2, r7, #14
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4798      	blx	r3
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fe33 	bl	80097b0 <USBD_LL_Start>
 8007b4a:	4603      	mov	r3, r0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b5c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	4611      	mov	r1, r2
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	4798      	blx	r3
 8007b94:	4603      	mov	r3, r0
 8007b96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b084      	sub	sp, #16
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	78fa      	ldrb	r2, [r7, #3]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f001 f908 	bl	8008dfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d01a      	beq.n	8007c48 <USBD_LL_SetupStage+0x72>
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d822      	bhi.n	8007c5c <USBD_LL_SetupStage+0x86>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <USBD_LL_SetupStage+0x4a>
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d00a      	beq.n	8007c34 <USBD_LL_SetupStage+0x5e>
 8007c1e:	e01d      	b.n	8007c5c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb5f 	bl	80082ec <USBD_StdDevReq>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]
      break;
 8007c32:	e020      	b.n	8007c76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fbc7 	bl	80083d0 <USBD_StdItfReq>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
      break;
 8007c46:	e016      	b.n	8007c76 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fc29 	bl	80084a8 <USBD_StdEPReq>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
      break;
 8007c5a:	e00c      	b.n	8007c76 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fe00 	bl	8009870 <USBD_LL_StallEP>
 8007c70:	4603      	mov	r3, r0
 8007c72:	73fb      	strb	r3, [r7, #15]
      break;
 8007c74:	bf00      	nop
  }

  return ret;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c92:	7afb      	ldrb	r3, [r7, #11]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d16e      	bne.n	8007d76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	f040 8098 	bne.w	8007ddc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d913      	bls.n	8007ce0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	1ad2      	subs	r2, r2, r3
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	bf28      	it	cs
 8007cd2:	4613      	movcs	r3, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f001 f984 	bl	8008fe6 <USBD_CtlContinueRx>
 8007cde:	e07d      	b.n	8007ddc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ce6:	f003 031f 	and.w	r3, r3, #31
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d014      	beq.n	8007d18 <USBD_LL_DataOutStage+0x98>
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d81d      	bhi.n	8007d2e <USBD_LL_DataOutStage+0xae>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <USBD_LL_DataOutStage+0x7c>
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d003      	beq.n	8007d02 <USBD_LL_DataOutStage+0x82>
 8007cfa:	e018      	b.n	8007d2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	75bb      	strb	r3, [r7, #22]
            break;
 8007d00:	e018      	b.n	8007d34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fa5e 	bl	80081ce <USBD_CoreFindIF>
 8007d12:	4603      	mov	r3, r0
 8007d14:	75bb      	strb	r3, [r7, #22]
            break;
 8007d16:	e00d      	b.n	8007d34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	4619      	mov	r1, r3
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fa60 	bl	80081e8 <USBD_CoreFindEP>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d2c:	e002      	b.n	8007d34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75bb      	strb	r3, [r7, #22]
            break;
 8007d32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d119      	bne.n	8007d6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d113      	bne.n	8007d6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d46:	7dba      	ldrb	r2, [r7, #22]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	32ae      	adds	r2, #174	; 0xae
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007d56:	7dba      	ldrb	r2, [r7, #22]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d5e:	7dba      	ldrb	r2, [r7, #22]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	32ae      	adds	r2, #174	; 0xae
 8007d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f001 f94a 	bl	8009008 <USBD_CtlSendStatus>
 8007d74:	e032      	b.n	8007ddc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d76:	7afb      	ldrb	r3, [r7, #11]
 8007d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	4619      	mov	r1, r3
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 fa31 	bl	80081e8 <USBD_CoreFindEP>
 8007d86:	4603      	mov	r3, r0
 8007d88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d8a:	7dbb      	ldrb	r3, [r7, #22]
 8007d8c:	2bff      	cmp	r3, #255	; 0xff
 8007d8e:	d025      	beq.n	8007ddc <USBD_LL_DataOutStage+0x15c>
 8007d90:	7dbb      	ldrb	r3, [r7, #22]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d122      	bne.n	8007ddc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d117      	bne.n	8007dd2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007da2:	7dba      	ldrb	r2, [r7, #22]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	32ae      	adds	r2, #174	; 0xae
 8007da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00f      	beq.n	8007dd2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007db2:	7dba      	ldrb	r2, [r7, #22]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007dba:	7dba      	ldrb	r2, [r7, #22]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	32ae      	adds	r2, #174	; 0xae
 8007dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	7afa      	ldrb	r2, [r7, #11]
 8007dc8:	4611      	mov	r1, r2
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	4798      	blx	r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	e000      	b.n	8007dde <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b086      	sub	sp, #24
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	60f8      	str	r0, [r7, #12]
 8007dee:	460b      	mov	r3, r1
 8007df0:	607a      	str	r2, [r7, #4]
 8007df2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d16f      	bne.n	8007eda <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d15a      	bne.n	8007ec0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d914      	bls.n	8007e40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	1ad2      	subs	r2, r2, r3
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f001 f8ac 	bl	8008f8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e32:	2300      	movs	r3, #0
 8007e34:	2200      	movs	r2, #0
 8007e36:	2100      	movs	r1, #0
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f001 fdc3 	bl	80099c4 <USBD_LL_PrepareReceive>
 8007e3e:	e03f      	b.n	8007ec0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d11c      	bne.n	8007e86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d316      	bcc.n	8007e86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d20f      	bcs.n	8007e86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e66:	2200      	movs	r2, #0
 8007e68:	2100      	movs	r1, #0
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f001 f88d 	bl	8008f8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f001 fda0 	bl	80099c4 <USBD_LL_PrepareReceive>
 8007e84:	e01c      	b.n	8007ec0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d10f      	bne.n	8007eb2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eb2:	2180      	movs	r1, #128	; 0x80
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 fcdb 	bl	8009870 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f001 f8b7 	bl	800902e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d03a      	beq.n	8007f40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff fe42 	bl	8007b54 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ed8:	e032      	b.n	8007f40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f000 f97f 	bl	80081e8 <USBD_CoreFindEP>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	2bff      	cmp	r3, #255	; 0xff
 8007ef2:	d025      	beq.n	8007f40 <USBD_LL_DataInStage+0x15a>
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d122      	bne.n	8007f40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b03      	cmp	r3, #3
 8007f04:	d11c      	bne.n	8007f40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f06:	7dfa      	ldrb	r2, [r7, #23]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	32ae      	adds	r2, #174	; 0xae
 8007f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d014      	beq.n	8007f40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f16:	7dfa      	ldrb	r2, [r7, #23]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f1e:	7dfa      	ldrb	r2, [r7, #23]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	32ae      	adds	r2, #174	; 0xae
 8007f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	7afa      	ldrb	r2, [r7, #11]
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	4798      	blx	r3
 8007f32:	4603      	mov	r3, r0
 8007f34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f36:	7dbb      	ldrb	r3, [r7, #22]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007f3c:	7dbb      	ldrb	r3, [r7, #22]
 8007f3e:	e000      	b.n	8007f42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3718      	adds	r7, #24
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d014      	beq.n	8007fb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00e      	beq.n	8007fb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6852      	ldr	r2, [r2, #4]
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	4798      	blx	r3
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d001      	beq.n	8007fb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007fac:	2303      	movs	r3, #3
 8007fae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fb0:	2340      	movs	r3, #64	; 0x40
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fc15 	bl	80097e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2240      	movs	r2, #64	; 0x40
 8007fc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fcc:	2340      	movs	r3, #64	; 0x40
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2180      	movs	r1, #128	; 0x80
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 fc07 	bl	80097e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2240      	movs	r2, #64	; 0x40
 8007fe2:	621a      	str	r2, [r3, #32]

  return ret;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2da      	uxtb	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2204      	movs	r2, #4
 8008028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b04      	cmp	r3, #4
 800804c:	d106      	bne.n	800805c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008054:	b2da      	uxtb	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr

0800806a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b082      	sub	sp, #8
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b03      	cmp	r3, #3
 800807c:	d110      	bne.n	80080a0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00b      	beq.n	80080a0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	32ae      	adds	r2, #174	; 0xae
 80080c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e01c      	b.n	8008106 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d115      	bne.n	8008104 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32ae      	adds	r2, #174	; 0xae
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00b      	beq.n	8008104 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32ae      	adds	r2, #174	; 0xae
 80080f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	4611      	mov	r1, r2
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	32ae      	adds	r2, #174	; 0xae
 8008124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	e01c      	b.n	800816a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b03      	cmp	r3, #3
 800813a:	d115      	bne.n	8008168 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	32ae      	adds	r2, #174	; 0xae
 8008146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00b      	beq.n	8008168 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	32ae      	adds	r2, #174	; 0xae
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	78fa      	ldrb	r2, [r7, #3]
 8008162:	4611      	mov	r1, r2
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00e      	beq.n	80081c4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6852      	ldr	r2, [r2, #4]
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	4611      	mov	r1, r2
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081dc:	4618      	mov	r0, r3
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081f4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	460b      	mov	r3, r1
 800820c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	885b      	ldrh	r3, [r3, #2]
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	b29b      	uxth	r3, r3
 8008226:	429a      	cmp	r2, r3
 8008228:	d920      	bls.n	800826c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008232:	e013      	b.n	800825c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008234:	f107 030a 	add.w	r3, r7, #10
 8008238:	4619      	mov	r1, r3
 800823a:	6978      	ldr	r0, [r7, #20]
 800823c:	f000 f81b 	bl	8008276 <USBD_GetNextDesc>
 8008240:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b05      	cmp	r3, #5
 8008248:	d108      	bne.n	800825c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	789b      	ldrb	r3, [r3, #2]
 8008252:	78fa      	ldrb	r2, [r7, #3]
 8008254:	429a      	cmp	r2, r3
 8008256:	d008      	beq.n	800826a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	b29a      	uxth	r2, r3
 8008262:	897b      	ldrh	r3, [r7, #10]
 8008264:	429a      	cmp	r2, r3
 8008266:	d8e5      	bhi.n	8008234 <USBD_GetEpDesc+0x32>
 8008268:	e000      	b.n	800826c <USBD_GetEpDesc+0x6a>
          break;
 800826a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800826c:	693b      	ldr	r3, [r7, #16]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008276:	b480      	push	{r7}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	881a      	ldrh	r2, [r3, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	4413      	add	r3, r2
 8008290:	b29a      	uxth	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4413      	add	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082a2:	68fb      	ldr	r3, [r7, #12]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	3301      	adds	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082ce:	8a3b      	ldrh	r3, [r7, #16]
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	b21a      	sxth	r2, r3
 80082d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082d8:	4313      	orrs	r3, r2
 80082da:	b21b      	sxth	r3, r3
 80082dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082de:	89fb      	ldrh	r3, [r7, #14]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d005      	beq.n	8008312 <USBD_StdDevReq+0x26>
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d857      	bhi.n	80083ba <USBD_StdDevReq+0xce>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00f      	beq.n	800832e <USBD_StdDevReq+0x42>
 800830e:	2b20      	cmp	r3, #32
 8008310:	d153      	bne.n	80083ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	32ae      	adds	r2, #174	; 0xae
 800831c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]
      break;
 800832c:	e04a      	b.n	80083c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b09      	cmp	r3, #9
 8008334:	d83b      	bhi.n	80083ae <USBD_StdDevReq+0xc2>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <USBD_StdDevReq+0x50>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008391 	.word	0x08008391
 8008340:	080083a5 	.word	0x080083a5
 8008344:	080083af 	.word	0x080083af
 8008348:	0800839b 	.word	0x0800839b
 800834c:	080083af 	.word	0x080083af
 8008350:	0800836f 	.word	0x0800836f
 8008354:	08008365 	.word	0x08008365
 8008358:	080083af 	.word	0x080083af
 800835c:	08008387 	.word	0x08008387
 8008360:	08008379 	.word	0x08008379
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa3c 	bl	80087e4 <USBD_GetDescriptor>
          break;
 800836c:	e024      	b.n	80083b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fba1 	bl	8008ab8 <USBD_SetAddress>
          break;
 8008376:	e01f      	b.n	80083b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fbe0 	bl	8008b40 <USBD_SetConfig>
 8008380:	4603      	mov	r3, r0
 8008382:	73fb      	strb	r3, [r7, #15]
          break;
 8008384:	e018      	b.n	80083b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fc83 	bl	8008c94 <USBD_GetConfig>
          break;
 800838e:	e013      	b.n	80083b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fcb4 	bl	8008d00 <USBD_GetStatus>
          break;
 8008398:	e00e      	b.n	80083b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fce3 	bl	8008d68 <USBD_SetFeature>
          break;
 80083a2:	e009      	b.n	80083b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fd07 	bl	8008dba <USBD_ClrFeature>
          break;
 80083ac:	e004      	b.n	80083b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 fd5e 	bl	8008e72 <USBD_CtlError>
          break;
 80083b6:	bf00      	nop
      }
      break;
 80083b8:	e004      	b.n	80083c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083ba:	6839      	ldr	r1, [r7, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fd58 	bl	8008e72 <USBD_CtlError>
      break;
 80083c2:	bf00      	nop
  }

  return ret;
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop

080083d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d005      	beq.n	80083f6 <USBD_StdItfReq+0x26>
 80083ea:	2b40      	cmp	r3, #64	; 0x40
 80083ec:	d852      	bhi.n	8008494 <USBD_StdItfReq+0xc4>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <USBD_StdItfReq+0x26>
 80083f2:	2b20      	cmp	r3, #32
 80083f4:	d14e      	bne.n	8008494 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	2b02      	cmp	r3, #2
 8008402:	d840      	bhi.n	8008486 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	889b      	ldrh	r3, [r3, #4]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b01      	cmp	r3, #1
 800840c:	d836      	bhi.n	800847c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	889b      	ldrh	r3, [r3, #4]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	4619      	mov	r1, r3
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff fed9 	bl	80081ce <USBD_CoreFindIF>
 800841c:	4603      	mov	r3, r0
 800841e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2bff      	cmp	r3, #255	; 0xff
 8008424:	d01d      	beq.n	8008462 <USBD_StdItfReq+0x92>
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d11a      	bne.n	8008462 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800842c:	7bba      	ldrb	r2, [r7, #14]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	32ae      	adds	r2, #174	; 0xae
 8008432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00f      	beq.n	800845c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800843c:	7bba      	ldrb	r2, [r7, #14]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008444:	7bba      	ldrb	r2, [r7, #14]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	32ae      	adds	r2, #174	; 0xae
 800844a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4798      	blx	r3
 8008456:	4603      	mov	r3, r0
 8008458:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800845a:	e004      	b.n	8008466 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008460:	e001      	b.n	8008466 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008462:	2303      	movs	r3, #3
 8008464:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	88db      	ldrh	r3, [r3, #6]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d110      	bne.n	8008490 <USBD_StdItfReq+0xc0>
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10d      	bne.n	8008490 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fdc7 	bl	8009008 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800847a:	e009      	b.n	8008490 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800847c:	6839      	ldr	r1, [r7, #0]
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fcf7 	bl	8008e72 <USBD_CtlError>
          break;
 8008484:	e004      	b.n	8008490 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fcf2 	bl	8008e72 <USBD_CtlError>
          break;
 800848e:	e000      	b.n	8008492 <USBD_StdItfReq+0xc2>
          break;
 8008490:	bf00      	nop
      }
      break;
 8008492:	e004      	b.n	800849e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fceb 	bl	8008e72 <USBD_CtlError>
      break;
 800849c:	bf00      	nop
  }

  return ret;
 800849e:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	889b      	ldrh	r3, [r3, #4]
 80084ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d007      	beq.n	80084d8 <USBD_StdEPReq+0x30>
 80084c8:	2b40      	cmp	r3, #64	; 0x40
 80084ca:	f200 817f 	bhi.w	80087cc <USBD_StdEPReq+0x324>
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d02a      	beq.n	8008528 <USBD_StdEPReq+0x80>
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	f040 817a 	bne.w	80087cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff fe83 	bl	80081e8 <USBD_CoreFindEP>
 80084e2:	4603      	mov	r3, r0
 80084e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084e6:	7b7b      	ldrb	r3, [r7, #13]
 80084e8:	2bff      	cmp	r3, #255	; 0xff
 80084ea:	f000 8174 	beq.w	80087d6 <USBD_StdEPReq+0x32e>
 80084ee:	7b7b      	ldrb	r3, [r7, #13]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 8170 	bne.w	80087d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80084f6:	7b7a      	ldrb	r2, [r7, #13]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80084fe:	7b7a      	ldrb	r2, [r7, #13]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	32ae      	adds	r2, #174	; 0xae
 8008504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8163 	beq.w	80087d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008510:	7b7a      	ldrb	r2, [r7, #13]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	32ae      	adds	r2, #174	; 0xae
 8008516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
 8008522:	4603      	mov	r3, r0
 8008524:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008526:	e156      	b.n	80087d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2b03      	cmp	r3, #3
 800852e:	d008      	beq.n	8008542 <USBD_StdEPReq+0x9a>
 8008530:	2b03      	cmp	r3, #3
 8008532:	f300 8145 	bgt.w	80087c0 <USBD_StdEPReq+0x318>
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 809b 	beq.w	8008672 <USBD_StdEPReq+0x1ca>
 800853c:	2b01      	cmp	r3, #1
 800853e:	d03c      	beq.n	80085ba <USBD_StdEPReq+0x112>
 8008540:	e13e      	b.n	80087c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b02      	cmp	r3, #2
 800854c:	d002      	beq.n	8008554 <USBD_StdEPReq+0xac>
 800854e:	2b03      	cmp	r3, #3
 8008550:	d016      	beq.n	8008580 <USBD_StdEPReq+0xd8>
 8008552:	e02c      	b.n	80085ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008554:	7bbb      	ldrb	r3, [r7, #14]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <USBD_StdEPReq+0xce>
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d00a      	beq.n	8008576 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f983 	bl	8009870 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800856a:	2180      	movs	r1, #128	; 0x80
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 f97f 	bl	8009870 <USBD_LL_StallEP>
 8008572:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008574:	e020      	b.n	80085b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fc7a 	bl	8008e72 <USBD_CtlError>
              break;
 800857e:	e01b      	b.n	80085b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	885b      	ldrh	r3, [r3, #2]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10e      	bne.n	80085a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <USBD_StdEPReq+0xfe>
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	2b80      	cmp	r3, #128	; 0x80
 8008592:	d008      	beq.n	80085a6 <USBD_StdEPReq+0xfe>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	88db      	ldrh	r3, [r3, #6]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d104      	bne.n	80085a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800859c:	7bbb      	ldrb	r3, [r7, #14]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 f965 	bl	8009870 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fd2e 	bl	8009008 <USBD_CtlSendStatus>

              break;
 80085ac:	e004      	b.n	80085b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fc5e 	bl	8008e72 <USBD_CtlError>
              break;
 80085b6:	bf00      	nop
          }
          break;
 80085b8:	e107      	b.n	80087ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d002      	beq.n	80085cc <USBD_StdEPReq+0x124>
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d016      	beq.n	80085f8 <USBD_StdEPReq+0x150>
 80085ca:	e04b      	b.n	8008664 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <USBD_StdEPReq+0x146>
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b80      	cmp	r3, #128	; 0x80
 80085d6:	d00a      	beq.n	80085ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f947 	bl	8009870 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f943 	bl	8009870 <USBD_LL_StallEP>
 80085ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085ec:	e040      	b.n	8008670 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fc3e 	bl	8008e72 <USBD_CtlError>
              break;
 80085f6:	e03b      	b.n	8008670 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d136      	bne.n	800866e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008606:	2b00      	cmp	r3, #0
 8008608:	d004      	beq.n	8008614 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 f94d 	bl	80098ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fcf7 	bl	8009008 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800861a:	7bbb      	ldrb	r3, [r7, #14]
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fde2 	bl	80081e8 <USBD_CoreFindEP>
 8008624:	4603      	mov	r3, r0
 8008626:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008628:	7b7b      	ldrb	r3, [r7, #13]
 800862a:	2bff      	cmp	r3, #255	; 0xff
 800862c:	d01f      	beq.n	800866e <USBD_StdEPReq+0x1c6>
 800862e:	7b7b      	ldrb	r3, [r7, #13]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d11c      	bne.n	800866e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008634:	7b7a      	ldrb	r2, [r7, #13]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800863c:	7b7a      	ldrb	r2, [r7, #13]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	32ae      	adds	r2, #174	; 0xae
 8008642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d010      	beq.n	800866e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800864c:	7b7a      	ldrb	r2, [r7, #13]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	32ae      	adds	r2, #174	; 0xae
 8008652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008662:	e004      	b.n	800866e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fc03 	bl	8008e72 <USBD_CtlError>
              break;
 800866c:	e000      	b.n	8008670 <USBD_StdEPReq+0x1c8>
              break;
 800866e:	bf00      	nop
          }
          break;
 8008670:	e0ab      	b.n	80087ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b02      	cmp	r3, #2
 800867c:	d002      	beq.n	8008684 <USBD_StdEPReq+0x1dc>
 800867e:	2b03      	cmp	r3, #3
 8008680:	d032      	beq.n	80086e8 <USBD_StdEPReq+0x240>
 8008682:	e097      	b.n	80087b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <USBD_StdEPReq+0x1f2>
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	2b80      	cmp	r3, #128	; 0x80
 800868e:	d004      	beq.n	800869a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fbed 	bl	8008e72 <USBD_CtlError>
                break;
 8008698:	e091      	b.n	80087be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800869a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	da0b      	bge.n	80086ba <USBD_StdEPReq+0x212>
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	3310      	adds	r3, #16
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	4413      	add	r3, r2
 80086b6:	3304      	adds	r3, #4
 80086b8:	e00b      	b.n	80086d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	4413      	add	r3, r2
 80086d0:	3304      	adds	r3, #4
 80086d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2202      	movs	r2, #2
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc37 	bl	8008f54 <USBD_CtlSendData>
              break;
 80086e6:	e06a      	b.n	80087be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	da11      	bge.n	8008714 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086f0:	7bbb      	ldrb	r3, [r7, #14]
 80086f2:	f003 020f 	and.w	r2, r3, #15
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	3324      	adds	r3, #36	; 0x24
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d117      	bne.n	800873a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fbb0 	bl	8008e72 <USBD_CtlError>
                  break;
 8008712:	e054      	b.n	80087be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	f003 020f 	and.w	r2, r3, #15
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800872a:	881b      	ldrh	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d104      	bne.n	800873a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fb9d 	bl	8008e72 <USBD_CtlError>
                  break;
 8008738:	e041      	b.n	80087be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	da0b      	bge.n	800875a <USBD_StdEPReq+0x2b2>
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	3310      	adds	r3, #16
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	4413      	add	r3, r2
 8008756:	3304      	adds	r3, #4
 8008758:	e00b      	b.n	8008772 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <USBD_StdEPReq+0x2d8>
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	2b80      	cmp	r3, #128	; 0x80
 800877e:	d103      	bne.n	8008788 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e00e      	b.n	80087a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 f8ad 	bl	80098ec <USBD_LL_IsStallEP>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e002      	b.n	80087a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2202      	movs	r2, #2
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fbd1 	bl	8008f54 <USBD_CtlSendData>
              break;
 80087b2:	e004      	b.n	80087be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb5b 	bl	8008e72 <USBD_CtlError>
              break;
 80087bc:	bf00      	nop
          }
          break;
 80087be:	e004      	b.n	80087ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fb55 	bl	8008e72 <USBD_CtlError>
          break;
 80087c8:	bf00      	nop
      }
      break;
 80087ca:	e005      	b.n	80087d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fb4f 	bl	8008e72 <USBD_CtlError>
      break;
 80087d4:	e000      	b.n	80087d8 <USBD_StdEPReq+0x330>
      break;
 80087d6:	bf00      	nop
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	885b      	ldrh	r3, [r3, #2]
 80087fe:	0a1b      	lsrs	r3, r3, #8
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	2b06      	cmp	r3, #6
 8008806:	f200 8128 	bhi.w	8008a5a <USBD_GetDescriptor+0x276>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <USBD_GetDescriptor+0x2c>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	0800882d 	.word	0x0800882d
 8008814:	08008845 	.word	0x08008845
 8008818:	08008885 	.word	0x08008885
 800881c:	08008a5b 	.word	0x08008a5b
 8008820:	08008a5b 	.word	0x08008a5b
 8008824:	080089fb 	.word	0x080089fb
 8008828:	08008a27 	.word	0x08008a27
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
      break;
 8008842:	e112      	b.n	8008a6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7c1b      	ldrb	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10d      	bne.n	8008868 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	f107 0208 	add.w	r2, r7, #8
 8008858:	4610      	mov	r0, r2
 800885a:	4798      	blx	r3
 800885c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3301      	adds	r3, #1
 8008862:	2202      	movs	r2, #2
 8008864:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008866:	e100      	b.n	8008a6a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	f107 0208 	add.w	r2, r7, #8
 8008874:	4610      	mov	r0, r2
 8008876:	4798      	blx	r3
 8008878:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3301      	adds	r3, #1
 800887e:	2202      	movs	r2, #2
 8008880:	701a      	strb	r2, [r3, #0]
      break;
 8008882:	e0f2      	b.n	8008a6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	885b      	ldrh	r3, [r3, #2]
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b05      	cmp	r3, #5
 800888c:	f200 80ac 	bhi.w	80089e8 <USBD_GetDescriptor+0x204>
 8008890:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <USBD_GetDescriptor+0xb4>)
 8008892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008896:	bf00      	nop
 8008898:	080088b1 	.word	0x080088b1
 800889c:	080088e5 	.word	0x080088e5
 80088a0:	08008919 	.word	0x08008919
 80088a4:	0800894d 	.word	0x0800894d
 80088a8:	08008981 	.word	0x08008981
 80088ac:	080089b5 	.word	0x080089b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00b      	beq.n	80088d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	7c12      	ldrb	r2, [r2, #16]
 80088c8:	f107 0108 	add.w	r1, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088d2:	e091      	b.n	80089f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 facb 	bl	8008e72 <USBD_CtlError>
            err++;
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	3301      	adds	r3, #1
 80088e0:	72fb      	strb	r3, [r7, #11]
          break;
 80088e2:	e089      	b.n	80089f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00b      	beq.n	8008908 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 0108 	add.w	r1, r7, #8
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008906:	e077      	b.n	80089f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fab1 	bl	8008e72 <USBD_CtlError>
            err++;
 8008910:	7afb      	ldrb	r3, [r7, #11]
 8008912:	3301      	adds	r3, #1
 8008914:	72fb      	strb	r3, [r7, #11]
          break;
 8008916:	e06f      	b.n	80089f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	7c12      	ldrb	r2, [r2, #16]
 8008930:	f107 0108 	add.w	r1, r7, #8
 8008934:	4610      	mov	r0, r2
 8008936:	4798      	blx	r3
 8008938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800893a:	e05d      	b.n	80089f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa97 	bl	8008e72 <USBD_CtlError>
            err++;
 8008944:	7afb      	ldrb	r3, [r7, #11]
 8008946:	3301      	adds	r3, #1
 8008948:	72fb      	strb	r3, [r7, #11]
          break;
 800894a:	e055      	b.n	80089f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896e:	e043      	b.n	80089f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fa7d 	bl	8008e72 <USBD_CtlError>
            err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
          break;
 800897e:	e03b      	b.n	80089f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a2:	e029      	b.n	80089f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa63 	bl	8008e72 <USBD_CtlError>
            err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
          break;
 80089b2:	e021      	b.n	80089f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d6:	e00f      	b.n	80089f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa49 	bl	8008e72 <USBD_CtlError>
            err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
          break;
 80089e6:	e007      	b.n	80089f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa41 	bl	8008e72 <USBD_CtlError>
          err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80089f6:	bf00      	nop
      }
      break;
 80089f8:	e037      	b.n	8008a6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	7c1b      	ldrb	r3, [r3, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0a:	f107 0208 	add.w	r2, r7, #8
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4798      	blx	r3
 8008a12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a14:	e029      	b.n	8008a6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa2a 	bl	8008e72 <USBD_CtlError>
        err++;
 8008a1e:	7afb      	ldrb	r3, [r7, #11]
 8008a20:	3301      	adds	r3, #1
 8008a22:	72fb      	strb	r3, [r7, #11]
      break;
 8008a24:	e021      	b.n	8008a6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7c1b      	ldrb	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10d      	bne.n	8008a4a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f107 0208 	add.w	r2, r7, #8
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	4798      	blx	r3
 8008a3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3301      	adds	r3, #1
 8008a44:	2207      	movs	r2, #7
 8008a46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a48:	e00f      	b.n	8008a6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa10 	bl	8008e72 <USBD_CtlError>
        err++;
 8008a52:	7afb      	ldrb	r3, [r7, #11]
 8008a54:	3301      	adds	r3, #1
 8008a56:	72fb      	strb	r3, [r7, #11]
      break;
 8008a58:	e007      	b.n	8008a6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa08 	bl	8008e72 <USBD_CtlError>
      err++;
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	3301      	adds	r3, #1
 8008a66:	72fb      	strb	r3, [r7, #11]
      break;
 8008a68:	bf00      	nop
  }

  if (err != 0U)
 8008a6a:	7afb      	ldrb	r3, [r7, #11]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d11e      	bne.n	8008aae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	88db      	ldrh	r3, [r3, #6]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d016      	beq.n	8008aa6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a78:	893b      	ldrh	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00e      	beq.n	8008a9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	88da      	ldrh	r2, [r3, #6]
 8008a82:	893b      	ldrh	r3, [r7, #8]
 8008a84:	4293      	cmp	r3, r2
 8008a86:	bf28      	it	cs
 8008a88:	4613      	movcs	r3, r2
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a8e:	893b      	ldrh	r3, [r7, #8]
 8008a90:	461a      	mov	r2, r3
 8008a92:	68f9      	ldr	r1, [r7, #12]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fa5d 	bl	8008f54 <USBD_CtlSendData>
 8008a9a:	e009      	b.n	8008ab0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f9e7 	bl	8008e72 <USBD_CtlError>
 8008aa4:	e004      	b.n	8008ab0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 faae 	bl	8009008 <USBD_CtlSendStatus>
 8008aac:	e000      	b.n	8008ab0 <USBD_GetDescriptor+0x2cc>
    return;
 8008aae:	bf00      	nop
  }
}
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop

08008ab8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d131      	bne.n	8008b2e <USBD_SetAddress+0x76>
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	88db      	ldrh	r3, [r3, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d12d      	bne.n	8008b2e <USBD_SetAddress+0x76>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ad8:	d829      	bhi.n	8008b2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	885b      	ldrh	r3, [r3, #2]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ae4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d104      	bne.n	8008afc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f9bc 	bl	8008e72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008afa:	e01d      	b.n	8008b38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7bfa      	ldrb	r2, [r7, #15]
 8008b00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 ff1b 	bl	8009944 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fa7a 	bl	8009008 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	e009      	b.n	8008b38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2c:	e004      	b.n	8008b38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f99e 	bl	8008e72 <USBD_CtlError>
  }
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	4b4e      	ldr	r3, [pc, #312]	; (8008c90 <USBD_SetConfig+0x150>)
 8008b56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b58:	4b4d      	ldr	r3, [pc, #308]	; (8008c90 <USBD_SetConfig+0x150>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d905      	bls.n	8008b6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f985 	bl	8008e72 <USBD_CtlError>
    return USBD_FAIL;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e08c      	b.n	8008c86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d002      	beq.n	8008b7e <USBD_SetConfig+0x3e>
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d029      	beq.n	8008bd0 <USBD_SetConfig+0x90>
 8008b7c:	e075      	b.n	8008c6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b7e:	4b44      	ldr	r3, [pc, #272]	; (8008c90 <USBD_SetConfig+0x150>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d020      	beq.n	8008bc8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b86:	4b42      	ldr	r3, [pc, #264]	; (8008c90 <USBD_SetConfig+0x150>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b90:	4b3f      	ldr	r3, [pc, #252]	; (8008c90 <USBD_SetConfig+0x150>)
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fe ffe7 	bl	8007b6a <USBD_SetClassConfig>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d008      	beq.n	8008bb8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f962 	bl	8008e72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bb6:	e065      	b.n	8008c84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fa25 	bl	8009008 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bc6:	e05d      	b.n	8008c84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fa1d 	bl	8009008 <USBD_CtlSendStatus>
      break;
 8008bce:	e059      	b.n	8008c84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bd0:	4b2f      	ldr	r3, [pc, #188]	; (8008c90 <USBD_SetConfig+0x150>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d112      	bne.n	8008bfe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008be0:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <USBD_SetConfig+0x150>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bea:	4b29      	ldr	r3, [pc, #164]	; (8008c90 <USBD_SetConfig+0x150>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7fe ffd6 	bl	8007ba2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa06 	bl	8009008 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bfc:	e042      	b.n	8008c84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008bfe:	4b24      	ldr	r3, [pc, #144]	; (8008c90 <USBD_SetConfig+0x150>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d02a      	beq.n	8008c62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7fe ffc4 	bl	8007ba2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c1a:	4b1d      	ldr	r3, [pc, #116]	; (8008c90 <USBD_SetConfig+0x150>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c24:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <USBD_SetConfig+0x150>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f7fe ff9d 	bl	8007b6a <USBD_SetClassConfig>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00f      	beq.n	8008c5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f918 	bl	8008e72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fe ffa9 	bl	8007ba2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c58:	e014      	b.n	8008c84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f9d4 	bl	8009008 <USBD_CtlSendStatus>
      break;
 8008c60:	e010      	b.n	8008c84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f9d0 	bl	8009008 <USBD_CtlSendStatus>
      break;
 8008c68:	e00c      	b.n	8008c84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f900 	bl	8008e72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c72:	4b07      	ldr	r3, [pc, #28]	; (8008c90 <USBD_SetConfig+0x150>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7fe ff92 	bl	8007ba2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	bf00      	nop
  }

  return ret;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000484 	.word	0x20000484

08008c94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	88db      	ldrh	r3, [r3, #6]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d004      	beq.n	8008cb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f8e2 	bl	8008e72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cae:	e023      	b.n	8008cf8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	dc02      	bgt.n	8008cc2 <USBD_GetConfig+0x2e>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dc03      	bgt.n	8008cc8 <USBD_GetConfig+0x34>
 8008cc0:	e015      	b.n	8008cee <USBD_GetConfig+0x5a>
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	d00b      	beq.n	8008cde <USBD_GetConfig+0x4a>
 8008cc6:	e012      	b.n	8008cee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f93c 	bl	8008f54 <USBD_CtlSendData>
        break;
 8008cdc:	e00c      	b.n	8008cf8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f934 	bl	8008f54 <USBD_CtlSendData>
        break;
 8008cec:	e004      	b.n	8008cf8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f8be 	bl	8008e72 <USBD_CtlError>
        break;
 8008cf6:	bf00      	nop
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d81e      	bhi.n	8008d56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	88db      	ldrh	r3, [r3, #6]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d004      	beq.n	8008d2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f8a5 	bl	8008e72 <USBD_CtlError>
        break;
 8008d28:	e01a      	b.n	8008d60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f043 0202 	orr.w	r2, r3, #2
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f900 	bl	8008f54 <USBD_CtlSendData>
      break;
 8008d54:	e004      	b.n	8008d60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f88a 	bl	8008e72 <USBD_CtlError>
      break;
 8008d5e:	bf00      	nop
  }
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	885b      	ldrh	r3, [r3, #2]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d107      	bne.n	8008d8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 f940 	bl	8009008 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d88:	e013      	b.n	8008db2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d10b      	bne.n	8008daa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	889b      	ldrh	r3, [r3, #4]
 8008d96:	0a1b      	lsrs	r3, r3, #8
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f930 	bl	8009008 <USBD_CtlSendStatus>
}
 8008da8:	e003      	b.n	8008db2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f860 	bl	8008e72 <USBD_CtlError>
}
 8008db2:	bf00      	nop
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d80b      	bhi.n	8008dea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	885b      	ldrh	r3, [r3, #2]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d10c      	bne.n	8008df4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f910 	bl	8009008 <USBD_CtlSendStatus>
      }
      break;
 8008de8:	e004      	b.n	8008df4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 f840 	bl	8008e72 <USBD_CtlError>
      break;
 8008df2:	e000      	b.n	8008df6 <USBD_ClrFeature+0x3c>
      break;
 8008df4:	bf00      	nop
  }
}
 8008df6:	bf00      	nop
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	781a      	ldrb	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	3301      	adds	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	781a      	ldrb	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3301      	adds	r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7ff fa41 	bl	80082b0 <SWAPBYTE>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	461a      	mov	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff fa34 	bl	80082b0 <SWAPBYTE>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f7ff fa27 	bl	80082b0 <SWAPBYTE>
 8008e62:	4603      	mov	r3, r0
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	80da      	strh	r2, [r3, #6]
}
 8008e6a:	bf00      	nop
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e7c:	2180      	movs	r1, #128	; 0x80
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fcf6 	bl	8009870 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e84:	2100      	movs	r1, #0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fcf2 	bl	8009870 <USBD_LL_StallEP>
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d036      	beq.n	8008f18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008eae:	6938      	ldr	r0, [r7, #16]
 8008eb0:	f000 f836 	bl	8008f20 <USBD_GetLen>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	7812      	ldrb	r2, [r2, #0]
 8008ecc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ed4:	7dfb      	ldrb	r3, [r7, #23]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	4413      	add	r3, r2
 8008eda:	2203      	movs	r2, #3
 8008edc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008ee4:	e013      	b.n	8008f0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4413      	add	r3, r2
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	7812      	ldrb	r2, [r2, #0]
 8008ef0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	613b      	str	r3, [r7, #16]
    idx++;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	3301      	adds	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	4413      	add	r3, r2
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f08:	7dfb      	ldrb	r3, [r7, #23]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d1e7      	bne.n	8008ee6 <USBD_GetString+0x52>
 8008f16:	e000      	b.n	8008f1a <USBD_GetString+0x86>
    return;
 8008f18:	bf00      	nop
  }
}
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f30:	e005      	b.n	8008f3e <USBD_GetLen+0x1e>
  {
    len++;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	3301      	adds	r3, #1
 8008f36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f5      	bne.n	8008f32 <USBD_GetLen+0x12>
  }

  return len;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3714      	adds	r7, #20
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2202      	movs	r2, #2
 8008f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fd01 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fcf0 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2203      	movs	r2, #3
 8008fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 fcf4 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fce3 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2204      	movs	r2, #4
 8009014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009018:	2300      	movs	r3, #0
 800901a:	2200      	movs	r2, #0
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fcaf 	bl	8009982 <USBD_LL_Transmit>

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2205      	movs	r2, #5
 800903a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800903e:	2300      	movs	r3, #0
 8009040:	2200      	movs	r2, #0
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fcbd 	bl	80099c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009058:	2200      	movs	r2, #0
 800905a:	4912      	ldr	r1, [pc, #72]	; (80090a4 <MX_USB_DEVICE_Init+0x50>)
 800905c:	4812      	ldr	r0, [pc, #72]	; (80090a8 <MX_USB_DEVICE_Init+0x54>)
 800905e:	f7fe fd07 	bl	8007a70 <USBD_Init>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009068:	f7f8 fa2a 	bl	80014c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800906c:	490f      	ldr	r1, [pc, #60]	; (80090ac <MX_USB_DEVICE_Init+0x58>)
 800906e:	480e      	ldr	r0, [pc, #56]	; (80090a8 <MX_USB_DEVICE_Init+0x54>)
 8009070:	f7fe fd2e 	bl	8007ad0 <USBD_RegisterClass>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800907a:	f7f8 fa21 	bl	80014c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800907e:	490c      	ldr	r1, [pc, #48]	; (80090b0 <MX_USB_DEVICE_Init+0x5c>)
 8009080:	4809      	ldr	r0, [pc, #36]	; (80090a8 <MX_USB_DEVICE_Init+0x54>)
 8009082:	f7fe fc1f 	bl	80078c4 <USBD_CDC_RegisterInterface>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d001      	beq.n	8009090 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800908c:	f7f8 fa18 	bl	80014c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009090:	4805      	ldr	r0, [pc, #20]	; (80090a8 <MX_USB_DEVICE_Init+0x54>)
 8009092:	f7fe fd53 	bl	8007b3c <USBD_Start>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800909c:	f7f8 fa10 	bl	80014c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090a0:	bf00      	nop
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	200000ac 	.word	0x200000ac
 80090a8:	20000488 	.word	0x20000488
 80090ac:	20000018 	.word	0x20000018
 80090b0:	20000098 	.word	0x20000098

080090b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090b8:	2200      	movs	r2, #0
 80090ba:	4905      	ldr	r1, [pc, #20]	; (80090d0 <CDC_Init_FS+0x1c>)
 80090bc:	4805      	ldr	r0, [pc, #20]	; (80090d4 <CDC_Init_FS+0x20>)
 80090be:	f7fe fc1b 	bl	80078f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090c2:	4905      	ldr	r1, [pc, #20]	; (80090d8 <CDC_Init_FS+0x24>)
 80090c4:	4803      	ldr	r0, [pc, #12]	; (80090d4 <CDC_Init_FS+0x20>)
 80090c6:	f7fe fc39 	bl	800793c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80090ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20000f64 	.word	0x20000f64
 80090d4:	20000488 	.word	0x20000488
 80090d8:	20000764 	.word	0x20000764

080090dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
 80090f8:	4613      	mov	r3, r2
 80090fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b23      	cmp	r3, #35	; 0x23
 8009100:	d84a      	bhi.n	8009198 <CDC_Control_FS+0xac>
 8009102:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <CDC_Control_FS+0x1c>)
 8009104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009108:	08009199 	.word	0x08009199
 800910c:	08009199 	.word	0x08009199
 8009110:	08009199 	.word	0x08009199
 8009114:	08009199 	.word	0x08009199
 8009118:	08009199 	.word	0x08009199
 800911c:	08009199 	.word	0x08009199
 8009120:	08009199 	.word	0x08009199
 8009124:	08009199 	.word	0x08009199
 8009128:	08009199 	.word	0x08009199
 800912c:	08009199 	.word	0x08009199
 8009130:	08009199 	.word	0x08009199
 8009134:	08009199 	.word	0x08009199
 8009138:	08009199 	.word	0x08009199
 800913c:	08009199 	.word	0x08009199
 8009140:	08009199 	.word	0x08009199
 8009144:	08009199 	.word	0x08009199
 8009148:	08009199 	.word	0x08009199
 800914c:	08009199 	.word	0x08009199
 8009150:	08009199 	.word	0x08009199
 8009154:	08009199 	.word	0x08009199
 8009158:	08009199 	.word	0x08009199
 800915c:	08009199 	.word	0x08009199
 8009160:	08009199 	.word	0x08009199
 8009164:	08009199 	.word	0x08009199
 8009168:	08009199 	.word	0x08009199
 800916c:	08009199 	.word	0x08009199
 8009170:	08009199 	.word	0x08009199
 8009174:	08009199 	.word	0x08009199
 8009178:	08009199 	.word	0x08009199
 800917c:	08009199 	.word	0x08009199
 8009180:	08009199 	.word	0x08009199
 8009184:	08009199 	.word	0x08009199
 8009188:	08009199 	.word	0x08009199
 800918c:	08009199 	.word	0x08009199
 8009190:	08009199 	.word	0x08009199
 8009194:	08009199 	.word	0x08009199
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009198:	bf00      	nop
  }

  return (USBD_OK);
 800919a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	480f      	ldr	r0, [pc, #60]	; (80091f4 <CDC_Receive_FS+0x4c>)
 80091b6:	f7fe fbc1 	bl	800793c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091ba:	480e      	ldr	r0, [pc, #56]	; (80091f4 <CDC_Receive_FS+0x4c>)
 80091bc:	f7fe fc22 	bl	8007a04 <USBD_CDC_ReceivePacket>
  memset(usb_buffer,'\0',64);
 80091c0:	2240      	movs	r2, #64	; 0x40
 80091c2:	2100      	movs	r1, #0
 80091c4:	480c      	ldr	r0, [pc, #48]	; (80091f8 <CDC_Receive_FS+0x50>)
 80091c6:	f000 fcad 	bl	8009b24 <memset>
  uint8_t len =(uint8_t) *Len;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	73fb      	strb	r3, [r7, #15]
  memcpy(usb_buffer,Buf,len);
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	461a      	mov	r2, r3
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4808      	ldr	r0, [pc, #32]	; (80091f8 <CDC_Receive_FS+0x50>)
 80091d8:	f000 fc96 	bl	8009b08 <memcpy>
  memset(Buf,'\0',len);
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	461a      	mov	r2, r3
 80091e0:	2100      	movs	r1, #0
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fc9e 	bl	8009b24 <memset>
  return (USBD_OK);
 80091e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	20000488 	.word	0x20000488
 80091f8:	20000418 	.word	0x20000418

080091fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800920c:	4b0d      	ldr	r3, [pc, #52]	; (8009244 <CDC_Transmit_FS+0x48>)
 800920e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009212:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800921e:	2301      	movs	r3, #1
 8009220:	e00b      	b.n	800923a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009222:	887b      	ldrh	r3, [r7, #2]
 8009224:	461a      	mov	r2, r3
 8009226:	6879      	ldr	r1, [r7, #4]
 8009228:	4806      	ldr	r0, [pc, #24]	; (8009244 <CDC_Transmit_FS+0x48>)
 800922a:	f7fe fb65 	bl	80078f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800922e:	4805      	ldr	r0, [pc, #20]	; (8009244 <CDC_Transmit_FS+0x48>)
 8009230:	f7fe fba2 	bl	8007978 <USBD_CDC_TransmitPacket>
 8009234:	4603      	mov	r3, r0
 8009236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009238:	7bfb      	ldrb	r3, [r7, #15]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20000488 	.word	0x20000488

08009248 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800925a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
	...

0800926c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2212      	movs	r2, #18
 800927c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800927e:	4b03      	ldr	r3, [pc, #12]	; (800928c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	200000c8 	.word	0x200000c8

08009290 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2204      	movs	r2, #4
 80092a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092a2:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	200000dc 	.word	0x200000dc

080092b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	6039      	str	r1, [r7, #0]
 80092be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	4907      	ldr	r1, [pc, #28]	; (80092e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80092ca:	4808      	ldr	r0, [pc, #32]	; (80092ec <USBD_FS_ProductStrDescriptor+0x38>)
 80092cc:	f7ff fde2 	bl	8008e94 <USBD_GetString>
 80092d0:	e004      	b.n	80092dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	4904      	ldr	r1, [pc, #16]	; (80092e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80092d6:	4805      	ldr	r0, [pc, #20]	; (80092ec <USBD_FS_ProductStrDescriptor+0x38>)
 80092d8:	f7ff fddc 	bl	8008e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092dc:	4b02      	ldr	r3, [pc, #8]	; (80092e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20001764 	.word	0x20001764
 80092ec:	0800c904 	.word	0x0800c904

080092f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	4904      	ldr	r1, [pc, #16]	; (8009310 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009300:	4804      	ldr	r0, [pc, #16]	; (8009314 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009302:	f7ff fdc7 	bl	8008e94 <USBD_GetString>
  return USBD_StrDesc;
 8009306:	4b02      	ldr	r3, [pc, #8]	; (8009310 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20001764 	.word	0x20001764
 8009314:	0800c91c 	.word	0x0800c91c

08009318 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	221a      	movs	r2, #26
 8009328:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800932a:	f000 f843 	bl	80093b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800932e:	4b02      	ldr	r3, [pc, #8]	; (8009338 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	200000e0 	.word	0x200000e0

0800933c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d105      	bne.n	800935a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4907      	ldr	r1, [pc, #28]	; (8009370 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009352:	4808      	ldr	r0, [pc, #32]	; (8009374 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009354:	f7ff fd9e 	bl	8008e94 <USBD_GetString>
 8009358:	e004      	b.n	8009364 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4904      	ldr	r1, [pc, #16]	; (8009370 <USBD_FS_ConfigStrDescriptor+0x34>)
 800935e:	4805      	ldr	r0, [pc, #20]	; (8009374 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009360:	f7ff fd98 	bl	8008e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009364:	4b02      	ldr	r3, [pc, #8]	; (8009370 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20001764 	.word	0x20001764
 8009374:	0800c930 	.word	0x0800c930

08009378 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	4907      	ldr	r1, [pc, #28]	; (80093ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800938e:	4808      	ldr	r0, [pc, #32]	; (80093b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009390:	f7ff fd80 	bl	8008e94 <USBD_GetString>
 8009394:	e004      	b.n	80093a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	4904      	ldr	r1, [pc, #16]	; (80093ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800939a:	4805      	ldr	r0, [pc, #20]	; (80093b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800939c:	f7ff fd7a 	bl	8008e94 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a0:	4b02      	ldr	r3, [pc, #8]	; (80093ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20001764 	.word	0x20001764
 80093b0:	0800c93c 	.word	0x0800c93c

080093b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093ba:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <Get_SerialNum+0x44>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c0:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <Get_SerialNum+0x48>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093c6:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <Get_SerialNum+0x4c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4413      	add	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d009      	beq.n	80093ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093da:	2208      	movs	r2, #8
 80093dc:	4909      	ldr	r1, [pc, #36]	; (8009404 <Get_SerialNum+0x50>)
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 f814 	bl	800940c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093e4:	2204      	movs	r2, #4
 80093e6:	4908      	ldr	r1, [pc, #32]	; (8009408 <Get_SerialNum+0x54>)
 80093e8:	68b8      	ldr	r0, [r7, #8]
 80093ea:	f000 f80f 	bl	800940c <IntToUnicode>
  }
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	1fff7a10 	.word	0x1fff7a10
 80093fc:	1fff7a14 	.word	0x1fff7a14
 8009400:	1fff7a18 	.word	0x1fff7a18
 8009404:	200000e2 	.word	0x200000e2
 8009408:	200000f2 	.word	0x200000f2

0800940c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	4613      	mov	r3, r2
 8009418:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]
 8009422:	e027      	b.n	8009474 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	0f1b      	lsrs	r3, r3, #28
 8009428:	2b09      	cmp	r3, #9
 800942a:	d80b      	bhi.n	8009444 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0f1b      	lsrs	r3, r3, #28
 8009430:	b2da      	uxtb	r2, r3
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	4619      	mov	r1, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	440b      	add	r3, r1
 800943c:	3230      	adds	r2, #48	; 0x30
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	e00a      	b.n	800945a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	0f1b      	lsrs	r3, r3, #28
 8009448:	b2da      	uxtb	r2, r3
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	4619      	mov	r1, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	440b      	add	r3, r1
 8009454:	3237      	adds	r2, #55	; 0x37
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	3301      	adds	r3, #1
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	4413      	add	r3, r2
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	3301      	adds	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]
 8009474:	7dfa      	ldrb	r2, [r7, #23]
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	429a      	cmp	r2, r3
 800947a:	d3d3      	bcc.n	8009424 <IntToUnicode+0x18>
  }
}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	609a      	str	r2, [r3, #8]
 80094a0:	60da      	str	r2, [r3, #12]
 80094a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094ac:	d13a      	bne.n	8009524 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	4b1e      	ldr	r3, [pc, #120]	; (800952c <HAL_PCD_MspInit+0xa0>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	4a1d      	ldr	r2, [pc, #116]	; (800952c <HAL_PCD_MspInit+0xa0>)
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	6313      	str	r3, [r2, #48]	; 0x30
 80094be:	4b1b      	ldr	r3, [pc, #108]	; (800952c <HAL_PCD_MspInit+0xa0>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d0:	2302      	movs	r3, #2
 80094d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d8:	2303      	movs	r3, #3
 80094da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094dc:	230a      	movs	r3, #10
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	4619      	mov	r1, r3
 80094e6:	4812      	ldr	r0, [pc, #72]	; (8009530 <HAL_PCD_MspInit+0xa4>)
 80094e8:	f7f9 fc60 	bl	8002dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094ec:	4b0f      	ldr	r3, [pc, #60]	; (800952c <HAL_PCD_MspInit+0xa0>)
 80094ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f0:	4a0e      	ldr	r2, [pc, #56]	; (800952c <HAL_PCD_MspInit+0xa0>)
 80094f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f6:	6353      	str	r3, [r2, #52]	; 0x34
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	4b0b      	ldr	r3, [pc, #44]	; (800952c <HAL_PCD_MspInit+0xa0>)
 80094fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <HAL_PCD_MspInit+0xa0>)
 8009502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009506:	6453      	str	r3, [r2, #68]	; 0x44
 8009508:	4b08      	ldr	r3, [pc, #32]	; (800952c <HAL_PCD_MspInit+0xa0>)
 800950a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009514:	2200      	movs	r2, #0
 8009516:	2100      	movs	r1, #0
 8009518:	2043      	movs	r0, #67	; 0x43
 800951a:	f7f9 f8a0 	bl	800265e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800951e:	2043      	movs	r0, #67	; 0x43
 8009520:	f7f9 f8b9 	bl	8002696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009524:	bf00      	nop
 8009526:	3728      	adds	r7, #40	; 0x28
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40023800 	.word	0x40023800
 8009530:	40020000 	.word	0x40020000

08009534 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009548:	4619      	mov	r1, r3
 800954a:	4610      	mov	r0, r2
 800954c:	f7fe fb43 	bl	8007bd6 <USBD_LL_SetupStage>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	4619      	mov	r1, r3
 8009582:	f7fe fb7d 	bl	8007c80 <USBD_LL_DataOutStage>
}
 8009586:	bf00      	nop
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b082      	sub	sp, #8
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	460b      	mov	r3, r1
 8009598:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	334c      	adds	r3, #76	; 0x4c
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	78fb      	ldrb	r3, [r7, #3]
 80095b4:	4619      	mov	r1, r3
 80095b6:	f7fe fc16 	bl	8007de6 <USBD_LL_DataInStage>
}
 80095ba:	bf00      	nop
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fd4a 	bl	800806a <USBD_LL_SOF>
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095e6:	2301      	movs	r3, #1
 80095e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d102      	bne.n	80095f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
 80095f6:	e008      	b.n	800960a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d102      	bne.n	8009606 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009600:	2301      	movs	r3, #1
 8009602:	73fb      	strb	r3, [r7, #15]
 8009604:	e001      	b.n	800960a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009606:	f7f7 ff5b 	bl	80014c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009610:	7bfa      	ldrb	r2, [r7, #15]
 8009612:	4611      	mov	r1, r2
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fcea 	bl	8007fee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009620:	4618      	mov	r0, r3
 8009622:	f7fe fc92 	bl	8007f4a <USBD_LL_Reset>
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
	...

08009630 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800963e:	4618      	mov	r0, r3
 8009640:	f7fe fce5 	bl	800800e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	6812      	ldr	r2, [r2, #0]
 8009652:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009656:	f043 0301 	orr.w	r3, r3, #1
 800965a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009664:	4b04      	ldr	r3, [pc, #16]	; (8009678 <HAL_PCD_SuspendCallback+0x48>)
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	4a03      	ldr	r2, [pc, #12]	; (8009678 <HAL_PCD_SuspendCallback+0x48>)
 800966a:	f043 0306 	orr.w	r3, r3, #6
 800966e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	e000ed00 	.word	0xe000ed00

0800967c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968a:	4618      	mov	r0, r3
 800968c:	f7fe fcd5 	bl	800803a <USBD_LL_Resume>
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fd2d 	bl	800810e <USBD_LL_IsoOUTIncomplete>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	460b      	mov	r3, r1
 80096c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ce:	78fa      	ldrb	r2, [r7, #3]
 80096d0:	4611      	mov	r1, r2
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fce9 	bl	80080aa <USBD_LL_IsoINIncomplete>
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fd3f 	bl	8008172 <USBD_LL_DevConnected>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe fd3c 	bl	8008188 <USBD_LL_DevDisconnected>
}
 8009710:	bf00      	nop
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d13c      	bne.n	80097a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009728:	4a20      	ldr	r2, [pc, #128]	; (80097ac <USBD_LL_Init+0x94>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a1e      	ldr	r2, [pc, #120]	; (80097ac <USBD_LL_Init+0x94>)
 8009734:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009738:	4b1c      	ldr	r3, [pc, #112]	; (80097ac <USBD_LL_Init+0x94>)
 800973a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800973e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009740:	4b1a      	ldr	r3, [pc, #104]	; (80097ac <USBD_LL_Init+0x94>)
 8009742:	2204      	movs	r2, #4
 8009744:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009746:	4b19      	ldr	r3, [pc, #100]	; (80097ac <USBD_LL_Init+0x94>)
 8009748:	2202      	movs	r2, #2
 800974a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800974c:	4b17      	ldr	r3, [pc, #92]	; (80097ac <USBD_LL_Init+0x94>)
 800974e:	2200      	movs	r2, #0
 8009750:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009752:	4b16      	ldr	r3, [pc, #88]	; (80097ac <USBD_LL_Init+0x94>)
 8009754:	2202      	movs	r2, #2
 8009756:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009758:	4b14      	ldr	r3, [pc, #80]	; (80097ac <USBD_LL_Init+0x94>)
 800975a:	2200      	movs	r2, #0
 800975c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <USBD_LL_Init+0x94>)
 8009760:	2200      	movs	r2, #0
 8009762:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009764:	4b11      	ldr	r3, [pc, #68]	; (80097ac <USBD_LL_Init+0x94>)
 8009766:	2200      	movs	r2, #0
 8009768:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <USBD_LL_Init+0x94>)
 800976c:	2200      	movs	r2, #0
 800976e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <USBD_LL_Init+0x94>)
 8009772:	2200      	movs	r2, #0
 8009774:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009776:	480d      	ldr	r0, [pc, #52]	; (80097ac <USBD_LL_Init+0x94>)
 8009778:	f7f9 fce6 	bl	8003148 <HAL_PCD_Init>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009782:	f7f7 fe9d 	bl	80014c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009786:	2180      	movs	r1, #128	; 0x80
 8009788:	4808      	ldr	r0, [pc, #32]	; (80097ac <USBD_LL_Init+0x94>)
 800978a:	f7fa ff3e 	bl	800460a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800978e:	2240      	movs	r2, #64	; 0x40
 8009790:	2100      	movs	r1, #0
 8009792:	4806      	ldr	r0, [pc, #24]	; (80097ac <USBD_LL_Init+0x94>)
 8009794:	f7fa fef2 	bl	800457c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009798:	2280      	movs	r2, #128	; 0x80
 800979a:	2101      	movs	r1, #1
 800979c:	4803      	ldr	r0, [pc, #12]	; (80097ac <USBD_LL_Init+0x94>)
 800979e:	f7fa feed 	bl	800457c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20001964 	.word	0x20001964

080097b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7f9 fddb 	bl	8003382 <HAL_PCD_Start>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f942 	bl	8009a5c <USBD_Get_USB_Status>
 80097d8:	4603      	mov	r3, r0
 80097da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	4608      	mov	r0, r1
 80097f0:	4611      	mov	r1, r2
 80097f2:	461a      	mov	r2, r3
 80097f4:	4603      	mov	r3, r0
 80097f6:	70fb      	strb	r3, [r7, #3]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70bb      	strb	r3, [r7, #2]
 80097fc:	4613      	mov	r3, r2
 80097fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800980e:	78bb      	ldrb	r3, [r7, #2]
 8009810:	883a      	ldrh	r2, [r7, #0]
 8009812:	78f9      	ldrb	r1, [r7, #3]
 8009814:	f7fa faac 	bl	8003d70 <HAL_PCD_EP_Open>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f91c 	bl	8009a5c <USBD_Get_USB_Status>
 8009824:	4603      	mov	r3, r0
 8009826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009828:	7bbb      	ldrb	r3, [r7, #14]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800984c:	78fa      	ldrb	r2, [r7, #3]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f7fa faf5 	bl	8003e40 <HAL_PCD_EP_Close>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f8fd 	bl	8009a5c <USBD_Get_USB_Status>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009866:	7bbb      	ldrb	r3, [r7, #14]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7fa fbcd 	bl	800402e <HAL_PCD_EP_SetStall>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f8de 	bl	8009a5c <USBD_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fa fc12 	bl	80040f6 <HAL_PCD_EP_ClrStall>
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	4618      	mov	r0, r3
 80098da:	f000 f8bf 	bl	8009a5c <USBD_Get_USB_Status>
 80098de:	4603      	mov	r3, r0
 80098e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009904:	2b00      	cmp	r3, #0
 8009906:	da0b      	bge.n	8009920 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800990e:	68f9      	ldr	r1, [r7, #12]
 8009910:	4613      	mov	r3, r2
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	4413      	add	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	440b      	add	r3, r1
 800991a:	333e      	adds	r3, #62	; 0x3e
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	e00b      	b.n	8009938 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009926:	68f9      	ldr	r1, [r7, #12]
 8009928:	4613      	mov	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	4413      	add	r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	440b      	add	r3, r1
 8009932:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009936:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f7fa f9df 	bl	8003d26 <HAL_PCD_SetAddress>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f874 	bl	8009a5c <USBD_Get_USB_Status>
 8009974:	4603      	mov	r3, r0
 8009976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009978:	7bbb      	ldrb	r3, [r7, #14]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	460b      	mov	r3, r1
 8009990:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099a0:	7af9      	ldrb	r1, [r7, #11]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	f7fa faf8 	bl	8003f9a <HAL_PCD_EP_Transmit>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f853 	bl	8009a5c <USBD_Get_USB_Status>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	607a      	str	r2, [r7, #4]
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	460b      	mov	r3, r1
 80099d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099e2:	7af9      	ldrb	r1, [r7, #11]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	f7fa fa74 	bl	8003ed4 <HAL_PCD_EP_Receive>
 80099ec:	4603      	mov	r3, r0
 80099ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f000 f832 	bl	8009a5c <USBD_Get_USB_Status>
 80099f8:	4603      	mov	r3, r0
 80099fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3718      	adds	r7, #24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fa faa4 	bl	8003f6a <HAL_PCD_EP_GetRxCount>
 8009a22:	4603      	mov	r3, r0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a34:	4b03      	ldr	r3, [pc, #12]	; (8009a44 <USBD_static_malloc+0x18>)
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	20001e70 	.word	0x20001e70

08009a48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b085      	sub	sp, #20
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d817      	bhi.n	8009aa0 <USBD_Get_USB_Status+0x44>
 8009a70:	a201      	add	r2, pc, #4	; (adr r2, 8009a78 <USBD_Get_USB_Status+0x1c>)
 8009a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a76:	bf00      	nop
 8009a78:	08009a89 	.word	0x08009a89
 8009a7c:	08009a8f 	.word	0x08009a8f
 8009a80:	08009a95 	.word	0x08009a95
 8009a84:	08009a9b 	.word	0x08009a9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8c:	e00b      	b.n	8009aa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	73fb      	strb	r3, [r7, #15]
    break;
 8009a92:	e008      	b.n	8009aa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a94:	2301      	movs	r3, #1
 8009a96:	73fb      	strb	r3, [r7, #15]
    break;
 8009a98:	e005      	b.n	8009aa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9e:	e002      	b.n	8009aa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa4:	bf00      	nop
  }
  return usb_status;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3714      	adds	r7, #20
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <__errno>:
 8009ab4:	4b01      	ldr	r3, [pc, #4]	; (8009abc <__errno+0x8>)
 8009ab6:	6818      	ldr	r0, [r3, #0]
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	200000fc 	.word	0x200000fc

08009ac0 <__libc_init_array>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	4d0d      	ldr	r5, [pc, #52]	; (8009af8 <__libc_init_array+0x38>)
 8009ac4:	4c0d      	ldr	r4, [pc, #52]	; (8009afc <__libc_init_array+0x3c>)
 8009ac6:	1b64      	subs	r4, r4, r5
 8009ac8:	10a4      	asrs	r4, r4, #2
 8009aca:	2600      	movs	r6, #0
 8009acc:	42a6      	cmp	r6, r4
 8009ace:	d109      	bne.n	8009ae4 <__libc_init_array+0x24>
 8009ad0:	4d0b      	ldr	r5, [pc, #44]	; (8009b00 <__libc_init_array+0x40>)
 8009ad2:	4c0c      	ldr	r4, [pc, #48]	; (8009b04 <__libc_init_array+0x44>)
 8009ad4:	f002 ff02 	bl	800c8dc <_init>
 8009ad8:	1b64      	subs	r4, r4, r5
 8009ada:	10a4      	asrs	r4, r4, #2
 8009adc:	2600      	movs	r6, #0
 8009ade:	42a6      	cmp	r6, r4
 8009ae0:	d105      	bne.n	8009aee <__libc_init_array+0x2e>
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ae8:	4798      	blx	r3
 8009aea:	3601      	adds	r6, #1
 8009aec:	e7ee      	b.n	8009acc <__libc_init_array+0xc>
 8009aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af2:	4798      	blx	r3
 8009af4:	3601      	adds	r6, #1
 8009af6:	e7f2      	b.n	8009ade <__libc_init_array+0x1e>
 8009af8:	0800cd44 	.word	0x0800cd44
 8009afc:	0800cd44 	.word	0x0800cd44
 8009b00:	0800cd44 	.word	0x0800cd44
 8009b04:	0800cd48 	.word	0x0800cd48

08009b08 <memcpy>:
 8009b08:	440a      	add	r2, r1
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b10:	d100      	bne.n	8009b14 <memcpy+0xc>
 8009b12:	4770      	bx	lr
 8009b14:	b510      	push	{r4, lr}
 8009b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b1e:	4291      	cmp	r1, r2
 8009b20:	d1f9      	bne.n	8009b16 <memcpy+0xe>
 8009b22:	bd10      	pop	{r4, pc}

08009b24 <memset>:
 8009b24:	4402      	add	r2, r0
 8009b26:	4603      	mov	r3, r0
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d100      	bne.n	8009b2e <memset+0xa>
 8009b2c:	4770      	bx	lr
 8009b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b32:	e7f9      	b.n	8009b28 <memset+0x4>

08009b34 <__cvt>:
 8009b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	ec55 4b10 	vmov	r4, r5, d0
 8009b3c:	2d00      	cmp	r5, #0
 8009b3e:	460e      	mov	r6, r1
 8009b40:	4619      	mov	r1, r3
 8009b42:	462b      	mov	r3, r5
 8009b44:	bfbb      	ittet	lt
 8009b46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b4a:	461d      	movlt	r5, r3
 8009b4c:	2300      	movge	r3, #0
 8009b4e:	232d      	movlt	r3, #45	; 0x2d
 8009b50:	700b      	strb	r3, [r1, #0]
 8009b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b58:	4691      	mov	r9, r2
 8009b5a:	f023 0820 	bic.w	r8, r3, #32
 8009b5e:	bfbc      	itt	lt
 8009b60:	4622      	movlt	r2, r4
 8009b62:	4614      	movlt	r4, r2
 8009b64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b68:	d005      	beq.n	8009b76 <__cvt+0x42>
 8009b6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b6e:	d100      	bne.n	8009b72 <__cvt+0x3e>
 8009b70:	3601      	adds	r6, #1
 8009b72:	2102      	movs	r1, #2
 8009b74:	e000      	b.n	8009b78 <__cvt+0x44>
 8009b76:	2103      	movs	r1, #3
 8009b78:	ab03      	add	r3, sp, #12
 8009b7a:	9301      	str	r3, [sp, #4]
 8009b7c:	ab02      	add	r3, sp, #8
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	ec45 4b10 	vmov	d0, r4, r5
 8009b84:	4653      	mov	r3, sl
 8009b86:	4632      	mov	r2, r6
 8009b88:	f000 fcea 	bl	800a560 <_dtoa_r>
 8009b8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b90:	4607      	mov	r7, r0
 8009b92:	d102      	bne.n	8009b9a <__cvt+0x66>
 8009b94:	f019 0f01 	tst.w	r9, #1
 8009b98:	d022      	beq.n	8009be0 <__cvt+0xac>
 8009b9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b9e:	eb07 0906 	add.w	r9, r7, r6
 8009ba2:	d110      	bne.n	8009bc6 <__cvt+0x92>
 8009ba4:	783b      	ldrb	r3, [r7, #0]
 8009ba6:	2b30      	cmp	r3, #48	; 0x30
 8009ba8:	d10a      	bne.n	8009bc0 <__cvt+0x8c>
 8009baa:	2200      	movs	r2, #0
 8009bac:	2300      	movs	r3, #0
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	f7f6 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bb6:	b918      	cbnz	r0, 8009bc0 <__cvt+0x8c>
 8009bb8:	f1c6 0601 	rsb	r6, r6, #1
 8009bbc:	f8ca 6000 	str.w	r6, [sl]
 8009bc0:	f8da 3000 	ldr.w	r3, [sl]
 8009bc4:	4499      	add	r9, r3
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4620      	mov	r0, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7f6 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bd2:	b108      	cbz	r0, 8009bd8 <__cvt+0xa4>
 8009bd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bd8:	2230      	movs	r2, #48	; 0x30
 8009bda:	9b03      	ldr	r3, [sp, #12]
 8009bdc:	454b      	cmp	r3, r9
 8009bde:	d307      	bcc.n	8009bf0 <__cvt+0xbc>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009be4:	1bdb      	subs	r3, r3, r7
 8009be6:	4638      	mov	r0, r7
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	b004      	add	sp, #16
 8009bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf0:	1c59      	adds	r1, r3, #1
 8009bf2:	9103      	str	r1, [sp, #12]
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	e7f0      	b.n	8009bda <__cvt+0xa6>

08009bf8 <__exponent>:
 8009bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	bfb8      	it	lt
 8009c00:	4249      	neglt	r1, r1
 8009c02:	f803 2b02 	strb.w	r2, [r3], #2
 8009c06:	bfb4      	ite	lt
 8009c08:	222d      	movlt	r2, #45	; 0x2d
 8009c0a:	222b      	movge	r2, #43	; 0x2b
 8009c0c:	2909      	cmp	r1, #9
 8009c0e:	7042      	strb	r2, [r0, #1]
 8009c10:	dd2a      	ble.n	8009c68 <__exponent+0x70>
 8009c12:	f10d 0407 	add.w	r4, sp, #7
 8009c16:	46a4      	mov	ip, r4
 8009c18:	270a      	movs	r7, #10
 8009c1a:	46a6      	mov	lr, r4
 8009c1c:	460a      	mov	r2, r1
 8009c1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c22:	fb07 1516 	mls	r5, r7, r6, r1
 8009c26:	3530      	adds	r5, #48	; 0x30
 8009c28:	2a63      	cmp	r2, #99	; 0x63
 8009c2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c32:	4631      	mov	r1, r6
 8009c34:	dcf1      	bgt.n	8009c1a <__exponent+0x22>
 8009c36:	3130      	adds	r1, #48	; 0x30
 8009c38:	f1ae 0502 	sub.w	r5, lr, #2
 8009c3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c40:	1c44      	adds	r4, r0, #1
 8009c42:	4629      	mov	r1, r5
 8009c44:	4561      	cmp	r1, ip
 8009c46:	d30a      	bcc.n	8009c5e <__exponent+0x66>
 8009c48:	f10d 0209 	add.w	r2, sp, #9
 8009c4c:	eba2 020e 	sub.w	r2, r2, lr
 8009c50:	4565      	cmp	r5, ip
 8009c52:	bf88      	it	hi
 8009c54:	2200      	movhi	r2, #0
 8009c56:	4413      	add	r3, r2
 8009c58:	1a18      	subs	r0, r3, r0
 8009c5a:	b003      	add	sp, #12
 8009c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c66:	e7ed      	b.n	8009c44 <__exponent+0x4c>
 8009c68:	2330      	movs	r3, #48	; 0x30
 8009c6a:	3130      	adds	r1, #48	; 0x30
 8009c6c:	7083      	strb	r3, [r0, #2]
 8009c6e:	70c1      	strb	r1, [r0, #3]
 8009c70:	1d03      	adds	r3, r0, #4
 8009c72:	e7f1      	b.n	8009c58 <__exponent+0x60>

08009c74 <_printf_float>:
 8009c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c78:	ed2d 8b02 	vpush	{d8}
 8009c7c:	b08d      	sub	sp, #52	; 0x34
 8009c7e:	460c      	mov	r4, r1
 8009c80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c84:	4616      	mov	r6, r2
 8009c86:	461f      	mov	r7, r3
 8009c88:	4605      	mov	r5, r0
 8009c8a:	f001 fa57 	bl	800b13c <_localeconv_r>
 8009c8e:	f8d0 a000 	ldr.w	sl, [r0]
 8009c92:	4650      	mov	r0, sl
 8009c94:	f7f6 fa9c 	bl	80001d0 <strlen>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ca4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ca8:	3307      	adds	r3, #7
 8009caa:	f023 0307 	bic.w	r3, r3, #7
 8009cae:	f103 0208 	add.w	r2, r3, #8
 8009cb2:	f8c8 2000 	str.w	r2, [r8]
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cc6:	9307      	str	r3, [sp, #28]
 8009cc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ccc:	ee08 0a10 	vmov	s16, r0
 8009cd0:	4b9f      	ldr	r3, [pc, #636]	; (8009f50 <_printf_float+0x2dc>)
 8009cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cda:	f7f6 ff27 	bl	8000b2c <__aeabi_dcmpun>
 8009cde:	bb88      	cbnz	r0, 8009d44 <_printf_float+0xd0>
 8009ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ce4:	4b9a      	ldr	r3, [pc, #616]	; (8009f50 <_printf_float+0x2dc>)
 8009ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cea:	f7f6 ff01 	bl	8000af0 <__aeabi_dcmple>
 8009cee:	bb48      	cbnz	r0, 8009d44 <_printf_float+0xd0>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	f7f6 fef0 	bl	8000adc <__aeabi_dcmplt>
 8009cfc:	b110      	cbz	r0, 8009d04 <_printf_float+0x90>
 8009cfe:	232d      	movs	r3, #45	; 0x2d
 8009d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d04:	4b93      	ldr	r3, [pc, #588]	; (8009f54 <_printf_float+0x2e0>)
 8009d06:	4894      	ldr	r0, [pc, #592]	; (8009f58 <_printf_float+0x2e4>)
 8009d08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d0c:	bf94      	ite	ls
 8009d0e:	4698      	movls	r8, r3
 8009d10:	4680      	movhi	r8, r0
 8009d12:	2303      	movs	r3, #3
 8009d14:	6123      	str	r3, [r4, #16]
 8009d16:	9b05      	ldr	r3, [sp, #20]
 8009d18:	f023 0204 	bic.w	r2, r3, #4
 8009d1c:	6022      	str	r2, [r4, #0]
 8009d1e:	f04f 0900 	mov.w	r9, #0
 8009d22:	9700      	str	r7, [sp, #0]
 8009d24:	4633      	mov	r3, r6
 8009d26:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d28:	4621      	mov	r1, r4
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 f9d8 	bl	800a0e0 <_printf_common>
 8009d30:	3001      	adds	r0, #1
 8009d32:	f040 8090 	bne.w	8009e56 <_printf_float+0x1e2>
 8009d36:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3a:	b00d      	add	sp, #52	; 0x34
 8009d3c:	ecbd 8b02 	vpop	{d8}
 8009d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d44:	4642      	mov	r2, r8
 8009d46:	464b      	mov	r3, r9
 8009d48:	4640      	mov	r0, r8
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	f7f6 feee 	bl	8000b2c <__aeabi_dcmpun>
 8009d50:	b140      	cbz	r0, 8009d64 <_printf_float+0xf0>
 8009d52:	464b      	mov	r3, r9
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bfbc      	itt	lt
 8009d58:	232d      	movlt	r3, #45	; 0x2d
 8009d5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d5e:	487f      	ldr	r0, [pc, #508]	; (8009f5c <_printf_float+0x2e8>)
 8009d60:	4b7f      	ldr	r3, [pc, #508]	; (8009f60 <_printf_float+0x2ec>)
 8009d62:	e7d1      	b.n	8009d08 <_printf_float+0x94>
 8009d64:	6863      	ldr	r3, [r4, #4]
 8009d66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d6a:	9206      	str	r2, [sp, #24]
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	d13f      	bne.n	8009df0 <_printf_float+0x17c>
 8009d70:	2306      	movs	r3, #6
 8009d72:	6063      	str	r3, [r4, #4]
 8009d74:	9b05      	ldr	r3, [sp, #20]
 8009d76:	6861      	ldr	r1, [r4, #4]
 8009d78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	ab0a      	add	r3, sp, #40	; 0x28
 8009d82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d86:	ab09      	add	r3, sp, #36	; 0x24
 8009d88:	ec49 8b10 	vmov	d0, r8, r9
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	6022      	str	r2, [r4, #0]
 8009d90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d94:	4628      	mov	r0, r5
 8009d96:	f7ff fecd 	bl	8009b34 <__cvt>
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d9e:	2b47      	cmp	r3, #71	; 0x47
 8009da0:	4680      	mov	r8, r0
 8009da2:	d108      	bne.n	8009db6 <_printf_float+0x142>
 8009da4:	1cc8      	adds	r0, r1, #3
 8009da6:	db02      	blt.n	8009dae <_printf_float+0x13a>
 8009da8:	6863      	ldr	r3, [r4, #4]
 8009daa:	4299      	cmp	r1, r3
 8009dac:	dd41      	ble.n	8009e32 <_printf_float+0x1be>
 8009dae:	f1ab 0b02 	sub.w	fp, fp, #2
 8009db2:	fa5f fb8b 	uxtb.w	fp, fp
 8009db6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dba:	d820      	bhi.n	8009dfe <_printf_float+0x18a>
 8009dbc:	3901      	subs	r1, #1
 8009dbe:	465a      	mov	r2, fp
 8009dc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dc4:	9109      	str	r1, [sp, #36]	; 0x24
 8009dc6:	f7ff ff17 	bl	8009bf8 <__exponent>
 8009dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dcc:	1813      	adds	r3, r2, r0
 8009dce:	2a01      	cmp	r2, #1
 8009dd0:	4681      	mov	r9, r0
 8009dd2:	6123      	str	r3, [r4, #16]
 8009dd4:	dc02      	bgt.n	8009ddc <_printf_float+0x168>
 8009dd6:	6822      	ldr	r2, [r4, #0]
 8009dd8:	07d2      	lsls	r2, r2, #31
 8009dda:	d501      	bpl.n	8009de0 <_printf_float+0x16c>
 8009ddc:	3301      	adds	r3, #1
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d09c      	beq.n	8009d22 <_printf_float+0xae>
 8009de8:	232d      	movs	r3, #45	; 0x2d
 8009dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dee:	e798      	b.n	8009d22 <_printf_float+0xae>
 8009df0:	9a06      	ldr	r2, [sp, #24]
 8009df2:	2a47      	cmp	r2, #71	; 0x47
 8009df4:	d1be      	bne.n	8009d74 <_printf_float+0x100>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1bc      	bne.n	8009d74 <_printf_float+0x100>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e7b9      	b.n	8009d72 <_printf_float+0xfe>
 8009dfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e02:	d118      	bne.n	8009e36 <_printf_float+0x1c2>
 8009e04:	2900      	cmp	r1, #0
 8009e06:	6863      	ldr	r3, [r4, #4]
 8009e08:	dd0b      	ble.n	8009e22 <_printf_float+0x1ae>
 8009e0a:	6121      	str	r1, [r4, #16]
 8009e0c:	b913      	cbnz	r3, 8009e14 <_printf_float+0x1a0>
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	07d0      	lsls	r0, r2, #31
 8009e12:	d502      	bpl.n	8009e1a <_printf_float+0x1a6>
 8009e14:	3301      	adds	r3, #1
 8009e16:	440b      	add	r3, r1
 8009e18:	6123      	str	r3, [r4, #16]
 8009e1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e1c:	f04f 0900 	mov.w	r9, #0
 8009e20:	e7de      	b.n	8009de0 <_printf_float+0x16c>
 8009e22:	b913      	cbnz	r3, 8009e2a <_printf_float+0x1b6>
 8009e24:	6822      	ldr	r2, [r4, #0]
 8009e26:	07d2      	lsls	r2, r2, #31
 8009e28:	d501      	bpl.n	8009e2e <_printf_float+0x1ba>
 8009e2a:	3302      	adds	r3, #2
 8009e2c:	e7f4      	b.n	8009e18 <_printf_float+0x1a4>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e7f2      	b.n	8009e18 <_printf_float+0x1a4>
 8009e32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e38:	4299      	cmp	r1, r3
 8009e3a:	db05      	blt.n	8009e48 <_printf_float+0x1d4>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	6121      	str	r1, [r4, #16]
 8009e40:	07d8      	lsls	r0, r3, #31
 8009e42:	d5ea      	bpl.n	8009e1a <_printf_float+0x1a6>
 8009e44:	1c4b      	adds	r3, r1, #1
 8009e46:	e7e7      	b.n	8009e18 <_printf_float+0x1a4>
 8009e48:	2900      	cmp	r1, #0
 8009e4a:	bfd4      	ite	le
 8009e4c:	f1c1 0202 	rsble	r2, r1, #2
 8009e50:	2201      	movgt	r2, #1
 8009e52:	4413      	add	r3, r2
 8009e54:	e7e0      	b.n	8009e18 <_printf_float+0x1a4>
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	055a      	lsls	r2, r3, #21
 8009e5a:	d407      	bmi.n	8009e6c <_printf_float+0x1f8>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	4642      	mov	r2, r8
 8009e60:	4631      	mov	r1, r6
 8009e62:	4628      	mov	r0, r5
 8009e64:	47b8      	blx	r7
 8009e66:	3001      	adds	r0, #1
 8009e68:	d12c      	bne.n	8009ec4 <_printf_float+0x250>
 8009e6a:	e764      	b.n	8009d36 <_printf_float+0xc2>
 8009e6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e70:	f240 80e0 	bls.w	800a034 <_printf_float+0x3c0>
 8009e74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f7f6 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d034      	beq.n	8009eee <_printf_float+0x27a>
 8009e84:	4a37      	ldr	r2, [pc, #220]	; (8009f64 <_printf_float+0x2f0>)
 8009e86:	2301      	movs	r3, #1
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	f43f af51 	beq.w	8009d36 <_printf_float+0xc2>
 8009e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	db02      	blt.n	8009ea2 <_printf_float+0x22e>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	07d8      	lsls	r0, r3, #31
 8009ea0:	d510      	bpl.n	8009ec4 <_printf_float+0x250>
 8009ea2:	ee18 3a10 	vmov	r3, s16
 8009ea6:	4652      	mov	r2, sl
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4628      	mov	r0, r5
 8009eac:	47b8      	blx	r7
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f43f af41 	beq.w	8009d36 <_printf_float+0xc2>
 8009eb4:	f04f 0800 	mov.w	r8, #0
 8009eb8:	f104 091a 	add.w	r9, r4, #26
 8009ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ebe:	3b01      	subs	r3, #1
 8009ec0:	4543      	cmp	r3, r8
 8009ec2:	dc09      	bgt.n	8009ed8 <_printf_float+0x264>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	079b      	lsls	r3, r3, #30
 8009ec8:	f100 8105 	bmi.w	800a0d6 <_printf_float+0x462>
 8009ecc:	68e0      	ldr	r0, [r4, #12]
 8009ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ed0:	4298      	cmp	r0, r3
 8009ed2:	bfb8      	it	lt
 8009ed4:	4618      	movlt	r0, r3
 8009ed6:	e730      	b.n	8009d3a <_printf_float+0xc6>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	464a      	mov	r2, r9
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	f43f af27 	beq.w	8009d36 <_printf_float+0xc2>
 8009ee8:	f108 0801 	add.w	r8, r8, #1
 8009eec:	e7e6      	b.n	8009ebc <_printf_float+0x248>
 8009eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	dc39      	bgt.n	8009f68 <_printf_float+0x2f4>
 8009ef4:	4a1b      	ldr	r2, [pc, #108]	; (8009f64 <_printf_float+0x2f0>)
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4628      	mov	r0, r5
 8009efc:	47b8      	blx	r7
 8009efe:	3001      	adds	r0, #1
 8009f00:	f43f af19 	beq.w	8009d36 <_printf_float+0xc2>
 8009f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	d102      	bne.n	8009f12 <_printf_float+0x29e>
 8009f0c:	6823      	ldr	r3, [r4, #0]
 8009f0e:	07d9      	lsls	r1, r3, #31
 8009f10:	d5d8      	bpl.n	8009ec4 <_printf_float+0x250>
 8009f12:	ee18 3a10 	vmov	r3, s16
 8009f16:	4652      	mov	r2, sl
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b8      	blx	r7
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f43f af09 	beq.w	8009d36 <_printf_float+0xc2>
 8009f24:	f04f 0900 	mov.w	r9, #0
 8009f28:	f104 0a1a 	add.w	sl, r4, #26
 8009f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2e:	425b      	negs	r3, r3
 8009f30:	454b      	cmp	r3, r9
 8009f32:	dc01      	bgt.n	8009f38 <_printf_float+0x2c4>
 8009f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f36:	e792      	b.n	8009e5e <_printf_float+0x1ea>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	4652      	mov	r2, sl
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b8      	blx	r7
 8009f42:	3001      	adds	r0, #1
 8009f44:	f43f aef7 	beq.w	8009d36 <_printf_float+0xc2>
 8009f48:	f109 0901 	add.w	r9, r9, #1
 8009f4c:	e7ee      	b.n	8009f2c <_printf_float+0x2b8>
 8009f4e:	bf00      	nop
 8009f50:	7fefffff 	.word	0x7fefffff
 8009f54:	0800c968 	.word	0x0800c968
 8009f58:	0800c96c 	.word	0x0800c96c
 8009f5c:	0800c974 	.word	0x0800c974
 8009f60:	0800c970 	.word	0x0800c970
 8009f64:	0800c978 	.word	0x0800c978
 8009f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	bfa8      	it	ge
 8009f70:	461a      	movge	r2, r3
 8009f72:	2a00      	cmp	r2, #0
 8009f74:	4691      	mov	r9, r2
 8009f76:	dc37      	bgt.n	8009fe8 <_printf_float+0x374>
 8009f78:	f04f 0b00 	mov.w	fp, #0
 8009f7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f80:	f104 021a 	add.w	r2, r4, #26
 8009f84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f86:	9305      	str	r3, [sp, #20]
 8009f88:	eba3 0309 	sub.w	r3, r3, r9
 8009f8c:	455b      	cmp	r3, fp
 8009f8e:	dc33      	bgt.n	8009ff8 <_printf_float+0x384>
 8009f90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f94:	429a      	cmp	r2, r3
 8009f96:	db3b      	blt.n	800a010 <_printf_float+0x39c>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	07da      	lsls	r2, r3, #31
 8009f9c:	d438      	bmi.n	800a010 <_printf_float+0x39c>
 8009f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa0:	9a05      	ldr	r2, [sp, #20]
 8009fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fa4:	1a9a      	subs	r2, r3, r2
 8009fa6:	eba3 0901 	sub.w	r9, r3, r1
 8009faa:	4591      	cmp	r9, r2
 8009fac:	bfa8      	it	ge
 8009fae:	4691      	movge	r9, r2
 8009fb0:	f1b9 0f00 	cmp.w	r9, #0
 8009fb4:	dc35      	bgt.n	800a022 <_printf_float+0x3ae>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fbe:	f104 0a1a 	add.w	sl, r4, #26
 8009fc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	eba3 0309 	sub.w	r3, r3, r9
 8009fcc:	4543      	cmp	r3, r8
 8009fce:	f77f af79 	ble.w	8009ec4 <_printf_float+0x250>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f43f aeaa 	beq.w	8009d36 <_printf_float+0xc2>
 8009fe2:	f108 0801 	add.w	r8, r8, #1
 8009fe6:	e7ec      	b.n	8009fc2 <_printf_float+0x34e>
 8009fe8:	4613      	mov	r3, r2
 8009fea:	4631      	mov	r1, r6
 8009fec:	4642      	mov	r2, r8
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d1c0      	bne.n	8009f78 <_printf_float+0x304>
 8009ff6:	e69e      	b.n	8009d36 <_printf_float+0xc2>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	9205      	str	r2, [sp, #20]
 800a000:	47b8      	blx	r7
 800a002:	3001      	adds	r0, #1
 800a004:	f43f ae97 	beq.w	8009d36 <_printf_float+0xc2>
 800a008:	9a05      	ldr	r2, [sp, #20]
 800a00a:	f10b 0b01 	add.w	fp, fp, #1
 800a00e:	e7b9      	b.n	8009f84 <_printf_float+0x310>
 800a010:	ee18 3a10 	vmov	r3, s16
 800a014:	4652      	mov	r2, sl
 800a016:	4631      	mov	r1, r6
 800a018:	4628      	mov	r0, r5
 800a01a:	47b8      	blx	r7
 800a01c:	3001      	adds	r0, #1
 800a01e:	d1be      	bne.n	8009f9e <_printf_float+0x32a>
 800a020:	e689      	b.n	8009d36 <_printf_float+0xc2>
 800a022:	9a05      	ldr	r2, [sp, #20]
 800a024:	464b      	mov	r3, r9
 800a026:	4442      	add	r2, r8
 800a028:	4631      	mov	r1, r6
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b8      	blx	r7
 800a02e:	3001      	adds	r0, #1
 800a030:	d1c1      	bne.n	8009fb6 <_printf_float+0x342>
 800a032:	e680      	b.n	8009d36 <_printf_float+0xc2>
 800a034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a036:	2a01      	cmp	r2, #1
 800a038:	dc01      	bgt.n	800a03e <_printf_float+0x3ca>
 800a03a:	07db      	lsls	r3, r3, #31
 800a03c:	d538      	bpl.n	800a0b0 <_printf_float+0x43c>
 800a03e:	2301      	movs	r3, #1
 800a040:	4642      	mov	r2, r8
 800a042:	4631      	mov	r1, r6
 800a044:	4628      	mov	r0, r5
 800a046:	47b8      	blx	r7
 800a048:	3001      	adds	r0, #1
 800a04a:	f43f ae74 	beq.w	8009d36 <_printf_float+0xc2>
 800a04e:	ee18 3a10 	vmov	r3, s16
 800a052:	4652      	mov	r2, sl
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	47b8      	blx	r7
 800a05a:	3001      	adds	r0, #1
 800a05c:	f43f ae6b 	beq.w	8009d36 <_printf_float+0xc2>
 800a060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a064:	2200      	movs	r2, #0
 800a066:	2300      	movs	r3, #0
 800a068:	f7f6 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a06c:	b9d8      	cbnz	r0, 800a0a6 <_printf_float+0x432>
 800a06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a070:	f108 0201 	add.w	r2, r8, #1
 800a074:	3b01      	subs	r3, #1
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	47b8      	blx	r7
 800a07c:	3001      	adds	r0, #1
 800a07e:	d10e      	bne.n	800a09e <_printf_float+0x42a>
 800a080:	e659      	b.n	8009d36 <_printf_float+0xc2>
 800a082:	2301      	movs	r3, #1
 800a084:	4652      	mov	r2, sl
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	f43f ae52 	beq.w	8009d36 <_printf_float+0xc2>
 800a092:	f108 0801 	add.w	r8, r8, #1
 800a096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a098:	3b01      	subs	r3, #1
 800a09a:	4543      	cmp	r3, r8
 800a09c:	dcf1      	bgt.n	800a082 <_printf_float+0x40e>
 800a09e:	464b      	mov	r3, r9
 800a0a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0a4:	e6dc      	b.n	8009e60 <_printf_float+0x1ec>
 800a0a6:	f04f 0800 	mov.w	r8, #0
 800a0aa:	f104 0a1a 	add.w	sl, r4, #26
 800a0ae:	e7f2      	b.n	800a096 <_printf_float+0x422>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	4642      	mov	r2, r8
 800a0b4:	e7df      	b.n	800a076 <_printf_float+0x402>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	464a      	mov	r2, r9
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	4628      	mov	r0, r5
 800a0be:	47b8      	blx	r7
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	f43f ae38 	beq.w	8009d36 <_printf_float+0xc2>
 800a0c6:	f108 0801 	add.w	r8, r8, #1
 800a0ca:	68e3      	ldr	r3, [r4, #12]
 800a0cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0ce:	1a5b      	subs	r3, r3, r1
 800a0d0:	4543      	cmp	r3, r8
 800a0d2:	dcf0      	bgt.n	800a0b6 <_printf_float+0x442>
 800a0d4:	e6fa      	b.n	8009ecc <_printf_float+0x258>
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	f104 0919 	add.w	r9, r4, #25
 800a0de:	e7f4      	b.n	800a0ca <_printf_float+0x456>

0800a0e0 <_printf_common>:
 800a0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0e4:	4616      	mov	r6, r2
 800a0e6:	4699      	mov	r9, r3
 800a0e8:	688a      	ldr	r2, [r1, #8]
 800a0ea:	690b      	ldr	r3, [r1, #16]
 800a0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	bfb8      	it	lt
 800a0f4:	4613      	movlt	r3, r2
 800a0f6:	6033      	str	r3, [r6, #0]
 800a0f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	b10a      	cbz	r2, 800a106 <_printf_common+0x26>
 800a102:	3301      	adds	r3, #1
 800a104:	6033      	str	r3, [r6, #0]
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	0699      	lsls	r1, r3, #26
 800a10a:	bf42      	ittt	mi
 800a10c:	6833      	ldrmi	r3, [r6, #0]
 800a10e:	3302      	addmi	r3, #2
 800a110:	6033      	strmi	r3, [r6, #0]
 800a112:	6825      	ldr	r5, [r4, #0]
 800a114:	f015 0506 	ands.w	r5, r5, #6
 800a118:	d106      	bne.n	800a128 <_printf_common+0x48>
 800a11a:	f104 0a19 	add.w	sl, r4, #25
 800a11e:	68e3      	ldr	r3, [r4, #12]
 800a120:	6832      	ldr	r2, [r6, #0]
 800a122:	1a9b      	subs	r3, r3, r2
 800a124:	42ab      	cmp	r3, r5
 800a126:	dc26      	bgt.n	800a176 <_printf_common+0x96>
 800a128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a12c:	1e13      	subs	r3, r2, #0
 800a12e:	6822      	ldr	r2, [r4, #0]
 800a130:	bf18      	it	ne
 800a132:	2301      	movne	r3, #1
 800a134:	0692      	lsls	r2, r2, #26
 800a136:	d42b      	bmi.n	800a190 <_printf_common+0xb0>
 800a138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a13c:	4649      	mov	r1, r9
 800a13e:	4638      	mov	r0, r7
 800a140:	47c0      	blx	r8
 800a142:	3001      	adds	r0, #1
 800a144:	d01e      	beq.n	800a184 <_printf_common+0xa4>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	68e5      	ldr	r5, [r4, #12]
 800a14a:	6832      	ldr	r2, [r6, #0]
 800a14c:	f003 0306 	and.w	r3, r3, #6
 800a150:	2b04      	cmp	r3, #4
 800a152:	bf08      	it	eq
 800a154:	1aad      	subeq	r5, r5, r2
 800a156:	68a3      	ldr	r3, [r4, #8]
 800a158:	6922      	ldr	r2, [r4, #16]
 800a15a:	bf0c      	ite	eq
 800a15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a160:	2500      	movne	r5, #0
 800a162:	4293      	cmp	r3, r2
 800a164:	bfc4      	itt	gt
 800a166:	1a9b      	subgt	r3, r3, r2
 800a168:	18ed      	addgt	r5, r5, r3
 800a16a:	2600      	movs	r6, #0
 800a16c:	341a      	adds	r4, #26
 800a16e:	42b5      	cmp	r5, r6
 800a170:	d11a      	bne.n	800a1a8 <_printf_common+0xc8>
 800a172:	2000      	movs	r0, #0
 800a174:	e008      	b.n	800a188 <_printf_common+0xa8>
 800a176:	2301      	movs	r3, #1
 800a178:	4652      	mov	r2, sl
 800a17a:	4649      	mov	r1, r9
 800a17c:	4638      	mov	r0, r7
 800a17e:	47c0      	blx	r8
 800a180:	3001      	adds	r0, #1
 800a182:	d103      	bne.n	800a18c <_printf_common+0xac>
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a18c:	3501      	adds	r5, #1
 800a18e:	e7c6      	b.n	800a11e <_printf_common+0x3e>
 800a190:	18e1      	adds	r1, r4, r3
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	2030      	movs	r0, #48	; 0x30
 800a196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a19a:	4422      	add	r2, r4
 800a19c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1a4:	3302      	adds	r3, #2
 800a1a6:	e7c7      	b.n	800a138 <_printf_common+0x58>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4622      	mov	r2, r4
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	47c0      	blx	r8
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	d0e6      	beq.n	800a184 <_printf_common+0xa4>
 800a1b6:	3601      	adds	r6, #1
 800a1b8:	e7d9      	b.n	800a16e <_printf_common+0x8e>
	...

0800a1bc <_printf_i>:
 800a1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c0:	7e0f      	ldrb	r7, [r1, #24]
 800a1c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1c4:	2f78      	cmp	r7, #120	; 0x78
 800a1c6:	4691      	mov	r9, r2
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	469a      	mov	sl, r3
 800a1ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1d2:	d807      	bhi.n	800a1e4 <_printf_i+0x28>
 800a1d4:	2f62      	cmp	r7, #98	; 0x62
 800a1d6:	d80a      	bhi.n	800a1ee <_printf_i+0x32>
 800a1d8:	2f00      	cmp	r7, #0
 800a1da:	f000 80d8 	beq.w	800a38e <_printf_i+0x1d2>
 800a1de:	2f58      	cmp	r7, #88	; 0x58
 800a1e0:	f000 80a3 	beq.w	800a32a <_printf_i+0x16e>
 800a1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1ec:	e03a      	b.n	800a264 <_printf_i+0xa8>
 800a1ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1f2:	2b15      	cmp	r3, #21
 800a1f4:	d8f6      	bhi.n	800a1e4 <_printf_i+0x28>
 800a1f6:	a101      	add	r1, pc, #4	; (adr r1, 800a1fc <_printf_i+0x40>)
 800a1f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1fc:	0800a255 	.word	0x0800a255
 800a200:	0800a269 	.word	0x0800a269
 800a204:	0800a1e5 	.word	0x0800a1e5
 800a208:	0800a1e5 	.word	0x0800a1e5
 800a20c:	0800a1e5 	.word	0x0800a1e5
 800a210:	0800a1e5 	.word	0x0800a1e5
 800a214:	0800a269 	.word	0x0800a269
 800a218:	0800a1e5 	.word	0x0800a1e5
 800a21c:	0800a1e5 	.word	0x0800a1e5
 800a220:	0800a1e5 	.word	0x0800a1e5
 800a224:	0800a1e5 	.word	0x0800a1e5
 800a228:	0800a375 	.word	0x0800a375
 800a22c:	0800a299 	.word	0x0800a299
 800a230:	0800a357 	.word	0x0800a357
 800a234:	0800a1e5 	.word	0x0800a1e5
 800a238:	0800a1e5 	.word	0x0800a1e5
 800a23c:	0800a397 	.word	0x0800a397
 800a240:	0800a1e5 	.word	0x0800a1e5
 800a244:	0800a299 	.word	0x0800a299
 800a248:	0800a1e5 	.word	0x0800a1e5
 800a24c:	0800a1e5 	.word	0x0800a1e5
 800a250:	0800a35f 	.word	0x0800a35f
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	1d1a      	adds	r2, r3, #4
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	602a      	str	r2, [r5, #0]
 800a25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a264:	2301      	movs	r3, #1
 800a266:	e0a3      	b.n	800a3b0 <_printf_i+0x1f4>
 800a268:	6820      	ldr	r0, [r4, #0]
 800a26a:	6829      	ldr	r1, [r5, #0]
 800a26c:	0606      	lsls	r6, r0, #24
 800a26e:	f101 0304 	add.w	r3, r1, #4
 800a272:	d50a      	bpl.n	800a28a <_printf_i+0xce>
 800a274:	680e      	ldr	r6, [r1, #0]
 800a276:	602b      	str	r3, [r5, #0]
 800a278:	2e00      	cmp	r6, #0
 800a27a:	da03      	bge.n	800a284 <_printf_i+0xc8>
 800a27c:	232d      	movs	r3, #45	; 0x2d
 800a27e:	4276      	negs	r6, r6
 800a280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a284:	485e      	ldr	r0, [pc, #376]	; (800a400 <_printf_i+0x244>)
 800a286:	230a      	movs	r3, #10
 800a288:	e019      	b.n	800a2be <_printf_i+0x102>
 800a28a:	680e      	ldr	r6, [r1, #0]
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a292:	bf18      	it	ne
 800a294:	b236      	sxthne	r6, r6
 800a296:	e7ef      	b.n	800a278 <_printf_i+0xbc>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	6820      	ldr	r0, [r4, #0]
 800a29c:	1d19      	adds	r1, r3, #4
 800a29e:	6029      	str	r1, [r5, #0]
 800a2a0:	0601      	lsls	r1, r0, #24
 800a2a2:	d501      	bpl.n	800a2a8 <_printf_i+0xec>
 800a2a4:	681e      	ldr	r6, [r3, #0]
 800a2a6:	e002      	b.n	800a2ae <_printf_i+0xf2>
 800a2a8:	0646      	lsls	r6, r0, #25
 800a2aa:	d5fb      	bpl.n	800a2a4 <_printf_i+0xe8>
 800a2ac:	881e      	ldrh	r6, [r3, #0]
 800a2ae:	4854      	ldr	r0, [pc, #336]	; (800a400 <_printf_i+0x244>)
 800a2b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a2b2:	bf0c      	ite	eq
 800a2b4:	2308      	moveq	r3, #8
 800a2b6:	230a      	movne	r3, #10
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2be:	6865      	ldr	r5, [r4, #4]
 800a2c0:	60a5      	str	r5, [r4, #8]
 800a2c2:	2d00      	cmp	r5, #0
 800a2c4:	bfa2      	ittt	ge
 800a2c6:	6821      	ldrge	r1, [r4, #0]
 800a2c8:	f021 0104 	bicge.w	r1, r1, #4
 800a2cc:	6021      	strge	r1, [r4, #0]
 800a2ce:	b90e      	cbnz	r6, 800a2d4 <_printf_i+0x118>
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	d04d      	beq.n	800a370 <_printf_i+0x1b4>
 800a2d4:	4615      	mov	r5, r2
 800a2d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2da:	fb03 6711 	mls	r7, r3, r1, r6
 800a2de:	5dc7      	ldrb	r7, [r0, r7]
 800a2e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2e4:	4637      	mov	r7, r6
 800a2e6:	42bb      	cmp	r3, r7
 800a2e8:	460e      	mov	r6, r1
 800a2ea:	d9f4      	bls.n	800a2d6 <_printf_i+0x11a>
 800a2ec:	2b08      	cmp	r3, #8
 800a2ee:	d10b      	bne.n	800a308 <_printf_i+0x14c>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	07de      	lsls	r6, r3, #31
 800a2f4:	d508      	bpl.n	800a308 <_printf_i+0x14c>
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	6861      	ldr	r1, [r4, #4]
 800a2fa:	4299      	cmp	r1, r3
 800a2fc:	bfde      	ittt	le
 800a2fe:	2330      	movle	r3, #48	; 0x30
 800a300:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a304:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a308:	1b52      	subs	r2, r2, r5
 800a30a:	6122      	str	r2, [r4, #16]
 800a30c:	f8cd a000 	str.w	sl, [sp]
 800a310:	464b      	mov	r3, r9
 800a312:	aa03      	add	r2, sp, #12
 800a314:	4621      	mov	r1, r4
 800a316:	4640      	mov	r0, r8
 800a318:	f7ff fee2 	bl	800a0e0 <_printf_common>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d14c      	bne.n	800a3ba <_printf_i+0x1fe>
 800a320:	f04f 30ff 	mov.w	r0, #4294967295
 800a324:	b004      	add	sp, #16
 800a326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32a:	4835      	ldr	r0, [pc, #212]	; (800a400 <_printf_i+0x244>)
 800a32c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a330:	6829      	ldr	r1, [r5, #0]
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	f851 6b04 	ldr.w	r6, [r1], #4
 800a338:	6029      	str	r1, [r5, #0]
 800a33a:	061d      	lsls	r5, r3, #24
 800a33c:	d514      	bpl.n	800a368 <_printf_i+0x1ac>
 800a33e:	07df      	lsls	r7, r3, #31
 800a340:	bf44      	itt	mi
 800a342:	f043 0320 	orrmi.w	r3, r3, #32
 800a346:	6023      	strmi	r3, [r4, #0]
 800a348:	b91e      	cbnz	r6, 800a352 <_printf_i+0x196>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	f023 0320 	bic.w	r3, r3, #32
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	2310      	movs	r3, #16
 800a354:	e7b0      	b.n	800a2b8 <_printf_i+0xfc>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	f043 0320 	orr.w	r3, r3, #32
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	2378      	movs	r3, #120	; 0x78
 800a360:	4828      	ldr	r0, [pc, #160]	; (800a404 <_printf_i+0x248>)
 800a362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a366:	e7e3      	b.n	800a330 <_printf_i+0x174>
 800a368:	0659      	lsls	r1, r3, #25
 800a36a:	bf48      	it	mi
 800a36c:	b2b6      	uxthmi	r6, r6
 800a36e:	e7e6      	b.n	800a33e <_printf_i+0x182>
 800a370:	4615      	mov	r5, r2
 800a372:	e7bb      	b.n	800a2ec <_printf_i+0x130>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	6826      	ldr	r6, [r4, #0]
 800a378:	6961      	ldr	r1, [r4, #20]
 800a37a:	1d18      	adds	r0, r3, #4
 800a37c:	6028      	str	r0, [r5, #0]
 800a37e:	0635      	lsls	r5, r6, #24
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	d501      	bpl.n	800a388 <_printf_i+0x1cc>
 800a384:	6019      	str	r1, [r3, #0]
 800a386:	e002      	b.n	800a38e <_printf_i+0x1d2>
 800a388:	0670      	lsls	r0, r6, #25
 800a38a:	d5fb      	bpl.n	800a384 <_printf_i+0x1c8>
 800a38c:	8019      	strh	r1, [r3, #0]
 800a38e:	2300      	movs	r3, #0
 800a390:	6123      	str	r3, [r4, #16]
 800a392:	4615      	mov	r5, r2
 800a394:	e7ba      	b.n	800a30c <_printf_i+0x150>
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	1d1a      	adds	r2, r3, #4
 800a39a:	602a      	str	r2, [r5, #0]
 800a39c:	681d      	ldr	r5, [r3, #0]
 800a39e:	6862      	ldr	r2, [r4, #4]
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f7f5 ff1c 	bl	80001e0 <memchr>
 800a3a8:	b108      	cbz	r0, 800a3ae <_printf_i+0x1f2>
 800a3aa:	1b40      	subs	r0, r0, r5
 800a3ac:	6060      	str	r0, [r4, #4]
 800a3ae:	6863      	ldr	r3, [r4, #4]
 800a3b0:	6123      	str	r3, [r4, #16]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b8:	e7a8      	b.n	800a30c <_printf_i+0x150>
 800a3ba:	6923      	ldr	r3, [r4, #16]
 800a3bc:	462a      	mov	r2, r5
 800a3be:	4649      	mov	r1, r9
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	47d0      	blx	sl
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d0ab      	beq.n	800a320 <_printf_i+0x164>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	079b      	lsls	r3, r3, #30
 800a3cc:	d413      	bmi.n	800a3f6 <_printf_i+0x23a>
 800a3ce:	68e0      	ldr	r0, [r4, #12]
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	4298      	cmp	r0, r3
 800a3d4:	bfb8      	it	lt
 800a3d6:	4618      	movlt	r0, r3
 800a3d8:	e7a4      	b.n	800a324 <_printf_i+0x168>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4632      	mov	r2, r6
 800a3de:	4649      	mov	r1, r9
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	47d0      	blx	sl
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d09b      	beq.n	800a320 <_printf_i+0x164>
 800a3e8:	3501      	adds	r5, #1
 800a3ea:	68e3      	ldr	r3, [r4, #12]
 800a3ec:	9903      	ldr	r1, [sp, #12]
 800a3ee:	1a5b      	subs	r3, r3, r1
 800a3f0:	42ab      	cmp	r3, r5
 800a3f2:	dcf2      	bgt.n	800a3da <_printf_i+0x21e>
 800a3f4:	e7eb      	b.n	800a3ce <_printf_i+0x212>
 800a3f6:	2500      	movs	r5, #0
 800a3f8:	f104 0619 	add.w	r6, r4, #25
 800a3fc:	e7f5      	b.n	800a3ea <_printf_i+0x22e>
 800a3fe:	bf00      	nop
 800a400:	0800c97a 	.word	0x0800c97a
 800a404:	0800c98b 	.word	0x0800c98b

0800a408 <siprintf>:
 800a408:	b40e      	push	{r1, r2, r3}
 800a40a:	b500      	push	{lr}
 800a40c:	b09c      	sub	sp, #112	; 0x70
 800a40e:	ab1d      	add	r3, sp, #116	; 0x74
 800a410:	9002      	str	r0, [sp, #8]
 800a412:	9006      	str	r0, [sp, #24]
 800a414:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a418:	4809      	ldr	r0, [pc, #36]	; (800a440 <siprintf+0x38>)
 800a41a:	9107      	str	r1, [sp, #28]
 800a41c:	9104      	str	r1, [sp, #16]
 800a41e:	4909      	ldr	r1, [pc, #36]	; (800a444 <siprintf+0x3c>)
 800a420:	f853 2b04 	ldr.w	r2, [r3], #4
 800a424:	9105      	str	r1, [sp, #20]
 800a426:	6800      	ldr	r0, [r0, #0]
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	a902      	add	r1, sp, #8
 800a42c:	f001 fb68 	bl	800bb00 <_svfiprintf_r>
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
 800a436:	b01c      	add	sp, #112	; 0x70
 800a438:	f85d eb04 	ldr.w	lr, [sp], #4
 800a43c:	b003      	add	sp, #12
 800a43e:	4770      	bx	lr
 800a440:	200000fc 	.word	0x200000fc
 800a444:	ffff0208 	.word	0xffff0208

0800a448 <quorem>:
 800a448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	6903      	ldr	r3, [r0, #16]
 800a44e:	690c      	ldr	r4, [r1, #16]
 800a450:	42a3      	cmp	r3, r4
 800a452:	4607      	mov	r7, r0
 800a454:	f2c0 8081 	blt.w	800a55a <quorem+0x112>
 800a458:	3c01      	subs	r4, #1
 800a45a:	f101 0814 	add.w	r8, r1, #20
 800a45e:	f100 0514 	add.w	r5, r0, #20
 800a462:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a46c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a470:	3301      	adds	r3, #1
 800a472:	429a      	cmp	r2, r3
 800a474:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a478:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a47c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a480:	d331      	bcc.n	800a4e6 <quorem+0x9e>
 800a482:	f04f 0e00 	mov.w	lr, #0
 800a486:	4640      	mov	r0, r8
 800a488:	46ac      	mov	ip, r5
 800a48a:	46f2      	mov	sl, lr
 800a48c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a490:	b293      	uxth	r3, r2
 800a492:	fb06 e303 	mla	r3, r6, r3, lr
 800a496:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	ebaa 0303 	sub.w	r3, sl, r3
 800a4a0:	f8dc a000 	ldr.w	sl, [ip]
 800a4a4:	0c12      	lsrs	r2, r2, #16
 800a4a6:	fa13 f38a 	uxtah	r3, r3, sl
 800a4aa:	fb06 e202 	mla	r2, r6, r2, lr
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	9b00      	ldr	r3, [sp, #0]
 800a4b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4c4:	4581      	cmp	r9, r0
 800a4c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ca:	f84c 3b04 	str.w	r3, [ip], #4
 800a4ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4d2:	d2db      	bcs.n	800a48c <quorem+0x44>
 800a4d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4d8:	b92b      	cbnz	r3, 800a4e6 <quorem+0x9e>
 800a4da:	9b01      	ldr	r3, [sp, #4]
 800a4dc:	3b04      	subs	r3, #4
 800a4de:	429d      	cmp	r5, r3
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	d32e      	bcc.n	800a542 <quorem+0xfa>
 800a4e4:	613c      	str	r4, [r7, #16]
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f001 f8b6 	bl	800b658 <__mcmp>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	db24      	blt.n	800a53a <quorem+0xf2>
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f04f 0c00 	mov.w	ip, #0
 800a4f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4fc:	f8d0 e000 	ldr.w	lr, [r0]
 800a500:	b293      	uxth	r3, r2
 800a502:	ebac 0303 	sub.w	r3, ip, r3
 800a506:	0c12      	lsrs	r2, r2, #16
 800a508:	fa13 f38e 	uxtah	r3, r3, lr
 800a50c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a514:	b29b      	uxth	r3, r3
 800a516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a51a:	45c1      	cmp	r9, r8
 800a51c:	f840 3b04 	str.w	r3, [r0], #4
 800a520:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a524:	d2e8      	bcs.n	800a4f8 <quorem+0xb0>
 800a526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a52a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a52e:	b922      	cbnz	r2, 800a53a <quorem+0xf2>
 800a530:	3b04      	subs	r3, #4
 800a532:	429d      	cmp	r5, r3
 800a534:	461a      	mov	r2, r3
 800a536:	d30a      	bcc.n	800a54e <quorem+0x106>
 800a538:	613c      	str	r4, [r7, #16]
 800a53a:	4630      	mov	r0, r6
 800a53c:	b003      	add	sp, #12
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	6812      	ldr	r2, [r2, #0]
 800a544:	3b04      	subs	r3, #4
 800a546:	2a00      	cmp	r2, #0
 800a548:	d1cc      	bne.n	800a4e4 <quorem+0x9c>
 800a54a:	3c01      	subs	r4, #1
 800a54c:	e7c7      	b.n	800a4de <quorem+0x96>
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	3b04      	subs	r3, #4
 800a552:	2a00      	cmp	r2, #0
 800a554:	d1f0      	bne.n	800a538 <quorem+0xf0>
 800a556:	3c01      	subs	r4, #1
 800a558:	e7eb      	b.n	800a532 <quorem+0xea>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e7ee      	b.n	800a53c <quorem+0xf4>
	...

0800a560 <_dtoa_r>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	ed2d 8b04 	vpush	{d8-d9}
 800a568:	ec57 6b10 	vmov	r6, r7, d0
 800a56c:	b093      	sub	sp, #76	; 0x4c
 800a56e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a570:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a574:	9106      	str	r1, [sp, #24]
 800a576:	ee10 aa10 	vmov	sl, s0
 800a57a:	4604      	mov	r4, r0
 800a57c:	9209      	str	r2, [sp, #36]	; 0x24
 800a57e:	930c      	str	r3, [sp, #48]	; 0x30
 800a580:	46bb      	mov	fp, r7
 800a582:	b975      	cbnz	r5, 800a5a2 <_dtoa_r+0x42>
 800a584:	2010      	movs	r0, #16
 800a586:	f000 fddd 	bl	800b144 <malloc>
 800a58a:	4602      	mov	r2, r0
 800a58c:	6260      	str	r0, [r4, #36]	; 0x24
 800a58e:	b920      	cbnz	r0, 800a59a <_dtoa_r+0x3a>
 800a590:	4ba7      	ldr	r3, [pc, #668]	; (800a830 <_dtoa_r+0x2d0>)
 800a592:	21ea      	movs	r1, #234	; 0xea
 800a594:	48a7      	ldr	r0, [pc, #668]	; (800a834 <_dtoa_r+0x2d4>)
 800a596:	f001 fbc3 	bl	800bd20 <__assert_func>
 800a59a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a59e:	6005      	str	r5, [r0, #0]
 800a5a0:	60c5      	str	r5, [r0, #12]
 800a5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a4:	6819      	ldr	r1, [r3, #0]
 800a5a6:	b151      	cbz	r1, 800a5be <_dtoa_r+0x5e>
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	604a      	str	r2, [r1, #4]
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4093      	lsls	r3, r2
 800a5b0:	608b      	str	r3, [r1, #8]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 fe0e 	bl	800b1d4 <_Bfree>
 800a5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	1e3b      	subs	r3, r7, #0
 800a5c0:	bfaa      	itet	ge
 800a5c2:	2300      	movge	r3, #0
 800a5c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a5c8:	f8c8 3000 	strge.w	r3, [r8]
 800a5cc:	4b9a      	ldr	r3, [pc, #616]	; (800a838 <_dtoa_r+0x2d8>)
 800a5ce:	bfbc      	itt	lt
 800a5d0:	2201      	movlt	r2, #1
 800a5d2:	f8c8 2000 	strlt.w	r2, [r8]
 800a5d6:	ea33 030b 	bics.w	r3, r3, fp
 800a5da:	d11b      	bne.n	800a614 <_dtoa_r+0xb4>
 800a5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5e8:	4333      	orrs	r3, r6
 800a5ea:	f000 8592 	beq.w	800b112 <_dtoa_r+0xbb2>
 800a5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5f0:	b963      	cbnz	r3, 800a60c <_dtoa_r+0xac>
 800a5f2:	4b92      	ldr	r3, [pc, #584]	; (800a83c <_dtoa_r+0x2dc>)
 800a5f4:	e022      	b.n	800a63c <_dtoa_r+0xdc>
 800a5f6:	4b92      	ldr	r3, [pc, #584]	; (800a840 <_dtoa_r+0x2e0>)
 800a5f8:	9301      	str	r3, [sp, #4]
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	9801      	ldr	r0, [sp, #4]
 800a602:	b013      	add	sp, #76	; 0x4c
 800a604:	ecbd 8b04 	vpop	{d8-d9}
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	4b8b      	ldr	r3, [pc, #556]	; (800a83c <_dtoa_r+0x2dc>)
 800a60e:	9301      	str	r3, [sp, #4]
 800a610:	3303      	adds	r3, #3
 800a612:	e7f3      	b.n	800a5fc <_dtoa_r+0x9c>
 800a614:	2200      	movs	r2, #0
 800a616:	2300      	movs	r3, #0
 800a618:	4650      	mov	r0, sl
 800a61a:	4659      	mov	r1, fp
 800a61c:	f7f6 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 800a620:	ec4b ab19 	vmov	d9, sl, fp
 800a624:	4680      	mov	r8, r0
 800a626:	b158      	cbz	r0, 800a640 <_dtoa_r+0xe0>
 800a628:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a62a:	2301      	movs	r3, #1
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 856b 	beq.w	800b10c <_dtoa_r+0xbac>
 800a636:	4883      	ldr	r0, [pc, #524]	; (800a844 <_dtoa_r+0x2e4>)
 800a638:	6018      	str	r0, [r3, #0]
 800a63a:	1e43      	subs	r3, r0, #1
 800a63c:	9301      	str	r3, [sp, #4]
 800a63e:	e7df      	b.n	800a600 <_dtoa_r+0xa0>
 800a640:	ec4b ab10 	vmov	d0, sl, fp
 800a644:	aa10      	add	r2, sp, #64	; 0x40
 800a646:	a911      	add	r1, sp, #68	; 0x44
 800a648:	4620      	mov	r0, r4
 800a64a:	f001 f8ab 	bl	800b7a4 <__d2b>
 800a64e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a652:	ee08 0a10 	vmov	s16, r0
 800a656:	2d00      	cmp	r5, #0
 800a658:	f000 8084 	beq.w	800a764 <_dtoa_r+0x204>
 800a65c:	ee19 3a90 	vmov	r3, s19
 800a660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a664:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a668:	4656      	mov	r6, sl
 800a66a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a66e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a672:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a676:	4b74      	ldr	r3, [pc, #464]	; (800a848 <_dtoa_r+0x2e8>)
 800a678:	2200      	movs	r2, #0
 800a67a:	4630      	mov	r0, r6
 800a67c:	4639      	mov	r1, r7
 800a67e:	f7f5 fe03 	bl	8000288 <__aeabi_dsub>
 800a682:	a365      	add	r3, pc, #404	; (adr r3, 800a818 <_dtoa_r+0x2b8>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 ffb6 	bl	80005f8 <__aeabi_dmul>
 800a68c:	a364      	add	r3, pc, #400	; (adr r3, 800a820 <_dtoa_r+0x2c0>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	f7f5 fdfb 	bl	800028c <__adddf3>
 800a696:	4606      	mov	r6, r0
 800a698:	4628      	mov	r0, r5
 800a69a:	460f      	mov	r7, r1
 800a69c:	f7f5 ff42 	bl	8000524 <__aeabi_i2d>
 800a6a0:	a361      	add	r3, pc, #388	; (adr r3, 800a828 <_dtoa_r+0x2c8>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f7f5 ffa7 	bl	80005f8 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4639      	mov	r1, r7
 800a6b2:	f7f5 fdeb 	bl	800028c <__adddf3>
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	f7f6 fa4d 	bl	8000b58 <__aeabi_d2iz>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	9000      	str	r0, [sp, #0]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	4639      	mov	r1, r7
 800a6c8:	f7f6 fa08 	bl	8000adc <__aeabi_dcmplt>
 800a6cc:	b150      	cbz	r0, 800a6e4 <_dtoa_r+0x184>
 800a6ce:	9800      	ldr	r0, [sp, #0]
 800a6d0:	f7f5 ff28 	bl	8000524 <__aeabi_i2d>
 800a6d4:	4632      	mov	r2, r6
 800a6d6:	463b      	mov	r3, r7
 800a6d8:	f7f6 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6dc:	b910      	cbnz	r0, 800a6e4 <_dtoa_r+0x184>
 800a6de:	9b00      	ldr	r3, [sp, #0]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	9b00      	ldr	r3, [sp, #0]
 800a6e6:	2b16      	cmp	r3, #22
 800a6e8:	d85a      	bhi.n	800a7a0 <_dtoa_r+0x240>
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	4b57      	ldr	r3, [pc, #348]	; (800a84c <_dtoa_r+0x2ec>)
 800a6ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	ec51 0b19 	vmov	r0, r1, d9
 800a6fa:	f7f6 f9ef 	bl	8000adc <__aeabi_dcmplt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d050      	beq.n	800a7a4 <_dtoa_r+0x244>
 800a702:	9b00      	ldr	r3, [sp, #0]
 800a704:	3b01      	subs	r3, #1
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	2300      	movs	r3, #0
 800a70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a70e:	1b5d      	subs	r5, r3, r5
 800a710:	1e6b      	subs	r3, r5, #1
 800a712:	9305      	str	r3, [sp, #20]
 800a714:	bf45      	ittet	mi
 800a716:	f1c5 0301 	rsbmi	r3, r5, #1
 800a71a:	9304      	strmi	r3, [sp, #16]
 800a71c:	2300      	movpl	r3, #0
 800a71e:	2300      	movmi	r3, #0
 800a720:	bf4c      	ite	mi
 800a722:	9305      	strmi	r3, [sp, #20]
 800a724:	9304      	strpl	r3, [sp, #16]
 800a726:	9b00      	ldr	r3, [sp, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	db3d      	blt.n	800a7a8 <_dtoa_r+0x248>
 800a72c:	9b05      	ldr	r3, [sp, #20]
 800a72e:	9a00      	ldr	r2, [sp, #0]
 800a730:	920a      	str	r2, [sp, #40]	; 0x28
 800a732:	4413      	add	r3, r2
 800a734:	9305      	str	r3, [sp, #20]
 800a736:	2300      	movs	r3, #0
 800a738:	9307      	str	r3, [sp, #28]
 800a73a:	9b06      	ldr	r3, [sp, #24]
 800a73c:	2b09      	cmp	r3, #9
 800a73e:	f200 8089 	bhi.w	800a854 <_dtoa_r+0x2f4>
 800a742:	2b05      	cmp	r3, #5
 800a744:	bfc4      	itt	gt
 800a746:	3b04      	subgt	r3, #4
 800a748:	9306      	strgt	r3, [sp, #24]
 800a74a:	9b06      	ldr	r3, [sp, #24]
 800a74c:	f1a3 0302 	sub.w	r3, r3, #2
 800a750:	bfcc      	ite	gt
 800a752:	2500      	movgt	r5, #0
 800a754:	2501      	movle	r5, #1
 800a756:	2b03      	cmp	r3, #3
 800a758:	f200 8087 	bhi.w	800a86a <_dtoa_r+0x30a>
 800a75c:	e8df f003 	tbb	[pc, r3]
 800a760:	59383a2d 	.word	0x59383a2d
 800a764:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a768:	441d      	add	r5, r3
 800a76a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a76e:	2b20      	cmp	r3, #32
 800a770:	bfc1      	itttt	gt
 800a772:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a776:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a77a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a77e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a782:	bfda      	itte	le
 800a784:	f1c3 0320 	rsble	r3, r3, #32
 800a788:	fa06 f003 	lslle.w	r0, r6, r3
 800a78c:	4318      	orrgt	r0, r3
 800a78e:	f7f5 feb9 	bl	8000504 <__aeabi_ui2d>
 800a792:	2301      	movs	r3, #1
 800a794:	4606      	mov	r6, r0
 800a796:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a79a:	3d01      	subs	r5, #1
 800a79c:	930e      	str	r3, [sp, #56]	; 0x38
 800a79e:	e76a      	b.n	800a676 <_dtoa_r+0x116>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e7b2      	b.n	800a70a <_dtoa_r+0x1aa>
 800a7a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7a6:	e7b1      	b.n	800a70c <_dtoa_r+0x1ac>
 800a7a8:	9b04      	ldr	r3, [sp, #16]
 800a7aa:	9a00      	ldr	r2, [sp, #0]
 800a7ac:	1a9b      	subs	r3, r3, r2
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	4253      	negs	r3, r2
 800a7b2:	9307      	str	r3, [sp, #28]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a7b8:	e7bf      	b.n	800a73a <_dtoa_r+0x1da>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9308      	str	r3, [sp, #32]
 800a7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc55      	bgt.n	800a870 <_dtoa_r+0x310>
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ce:	e00c      	b.n	800a7ea <_dtoa_r+0x28a>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e7f3      	b.n	800a7bc <_dtoa_r+0x25c>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7d8:	9308      	str	r3, [sp, #32]
 800a7da:	9b00      	ldr	r3, [sp, #0]
 800a7dc:	4413      	add	r3, r2
 800a7de:	9302      	str	r3, [sp, #8]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	bfb8      	it	lt
 800a7e8:	2301      	movlt	r3, #1
 800a7ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	6042      	str	r2, [r0, #4]
 800a7f0:	2204      	movs	r2, #4
 800a7f2:	f102 0614 	add.w	r6, r2, #20
 800a7f6:	429e      	cmp	r6, r3
 800a7f8:	6841      	ldr	r1, [r0, #4]
 800a7fa:	d93d      	bls.n	800a878 <_dtoa_r+0x318>
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fca9 	bl	800b154 <_Balloc>
 800a802:	9001      	str	r0, [sp, #4]
 800a804:	2800      	cmp	r0, #0
 800a806:	d13b      	bne.n	800a880 <_dtoa_r+0x320>
 800a808:	4b11      	ldr	r3, [pc, #68]	; (800a850 <_dtoa_r+0x2f0>)
 800a80a:	4602      	mov	r2, r0
 800a80c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a810:	e6c0      	b.n	800a594 <_dtoa_r+0x34>
 800a812:	2301      	movs	r3, #1
 800a814:	e7df      	b.n	800a7d6 <_dtoa_r+0x276>
 800a816:	bf00      	nop
 800a818:	636f4361 	.word	0x636f4361
 800a81c:	3fd287a7 	.word	0x3fd287a7
 800a820:	8b60c8b3 	.word	0x8b60c8b3
 800a824:	3fc68a28 	.word	0x3fc68a28
 800a828:	509f79fb 	.word	0x509f79fb
 800a82c:	3fd34413 	.word	0x3fd34413
 800a830:	0800c9a9 	.word	0x0800c9a9
 800a834:	0800c9c0 	.word	0x0800c9c0
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	0800c9a5 	.word	0x0800c9a5
 800a840:	0800c99c 	.word	0x0800c99c
 800a844:	0800c979 	.word	0x0800c979
 800a848:	3ff80000 	.word	0x3ff80000
 800a84c:	0800cab0 	.word	0x0800cab0
 800a850:	0800ca1b 	.word	0x0800ca1b
 800a854:	2501      	movs	r5, #1
 800a856:	2300      	movs	r3, #0
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	9508      	str	r5, [sp, #32]
 800a85c:	f04f 33ff 	mov.w	r3, #4294967295
 800a860:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a864:	2200      	movs	r2, #0
 800a866:	2312      	movs	r3, #18
 800a868:	e7b0      	b.n	800a7cc <_dtoa_r+0x26c>
 800a86a:	2301      	movs	r3, #1
 800a86c:	9308      	str	r3, [sp, #32]
 800a86e:	e7f5      	b.n	800a85c <_dtoa_r+0x2fc>
 800a870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a872:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a876:	e7b8      	b.n	800a7ea <_dtoa_r+0x28a>
 800a878:	3101      	adds	r1, #1
 800a87a:	6041      	str	r1, [r0, #4]
 800a87c:	0052      	lsls	r2, r2, #1
 800a87e:	e7b8      	b.n	800a7f2 <_dtoa_r+0x292>
 800a880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a882:	9a01      	ldr	r2, [sp, #4]
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	2b0e      	cmp	r3, #14
 800a88a:	f200 809d 	bhi.w	800a9c8 <_dtoa_r+0x468>
 800a88e:	2d00      	cmp	r5, #0
 800a890:	f000 809a 	beq.w	800a9c8 <_dtoa_r+0x468>
 800a894:	9b00      	ldr	r3, [sp, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	dd32      	ble.n	800a900 <_dtoa_r+0x3a0>
 800a89a:	4ab7      	ldr	r2, [pc, #732]	; (800ab78 <_dtoa_r+0x618>)
 800a89c:	f003 030f 	and.w	r3, r3, #15
 800a8a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8a8:	9b00      	ldr	r3, [sp, #0]
 800a8aa:	05d8      	lsls	r0, r3, #23
 800a8ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8b0:	d516      	bpl.n	800a8e0 <_dtoa_r+0x380>
 800a8b2:	4bb2      	ldr	r3, [pc, #712]	; (800ab7c <_dtoa_r+0x61c>)
 800a8b4:	ec51 0b19 	vmov	r0, r1, d9
 800a8b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8bc:	f7f5 ffc6 	bl	800084c <__aeabi_ddiv>
 800a8c0:	f007 070f 	and.w	r7, r7, #15
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	468b      	mov	fp, r1
 800a8c8:	2503      	movs	r5, #3
 800a8ca:	4eac      	ldr	r6, [pc, #688]	; (800ab7c <_dtoa_r+0x61c>)
 800a8cc:	b957      	cbnz	r7, 800a8e4 <_dtoa_r+0x384>
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 ffb9 	bl	800084c <__aeabi_ddiv>
 800a8da:	4682      	mov	sl, r0
 800a8dc:	468b      	mov	fp, r1
 800a8de:	e028      	b.n	800a932 <_dtoa_r+0x3d2>
 800a8e0:	2502      	movs	r5, #2
 800a8e2:	e7f2      	b.n	800a8ca <_dtoa_r+0x36a>
 800a8e4:	07f9      	lsls	r1, r7, #31
 800a8e6:	d508      	bpl.n	800a8fa <_dtoa_r+0x39a>
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8f0:	f7f5 fe82 	bl	80005f8 <__aeabi_dmul>
 800a8f4:	3501      	adds	r5, #1
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	4689      	mov	r9, r1
 800a8fa:	107f      	asrs	r7, r7, #1
 800a8fc:	3608      	adds	r6, #8
 800a8fe:	e7e5      	b.n	800a8cc <_dtoa_r+0x36c>
 800a900:	f000 809b 	beq.w	800aa3a <_dtoa_r+0x4da>
 800a904:	9b00      	ldr	r3, [sp, #0]
 800a906:	4f9d      	ldr	r7, [pc, #628]	; (800ab7c <_dtoa_r+0x61c>)
 800a908:	425e      	negs	r6, r3
 800a90a:	4b9b      	ldr	r3, [pc, #620]	; (800ab78 <_dtoa_r+0x618>)
 800a90c:	f006 020f 	and.w	r2, r6, #15
 800a910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	ec51 0b19 	vmov	r0, r1, d9
 800a91c:	f7f5 fe6c 	bl	80005f8 <__aeabi_dmul>
 800a920:	1136      	asrs	r6, r6, #4
 800a922:	4682      	mov	sl, r0
 800a924:	468b      	mov	fp, r1
 800a926:	2300      	movs	r3, #0
 800a928:	2502      	movs	r5, #2
 800a92a:	2e00      	cmp	r6, #0
 800a92c:	d17a      	bne.n	800aa24 <_dtoa_r+0x4c4>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1d3      	bne.n	800a8da <_dtoa_r+0x37a>
 800a932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a934:	2b00      	cmp	r3, #0
 800a936:	f000 8082 	beq.w	800aa3e <_dtoa_r+0x4de>
 800a93a:	4b91      	ldr	r3, [pc, #580]	; (800ab80 <_dtoa_r+0x620>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	4650      	mov	r0, sl
 800a940:	4659      	mov	r1, fp
 800a942:	f7f6 f8cb 	bl	8000adc <__aeabi_dcmplt>
 800a946:	2800      	cmp	r0, #0
 800a948:	d079      	beq.n	800aa3e <_dtoa_r+0x4de>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d076      	beq.n	800aa3e <_dtoa_r+0x4de>
 800a950:	9b02      	ldr	r3, [sp, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	dd36      	ble.n	800a9c4 <_dtoa_r+0x464>
 800a956:	9b00      	ldr	r3, [sp, #0]
 800a958:	4650      	mov	r0, sl
 800a95a:	4659      	mov	r1, fp
 800a95c:	1e5f      	subs	r7, r3, #1
 800a95e:	2200      	movs	r2, #0
 800a960:	4b88      	ldr	r3, [pc, #544]	; (800ab84 <_dtoa_r+0x624>)
 800a962:	f7f5 fe49 	bl	80005f8 <__aeabi_dmul>
 800a966:	9e02      	ldr	r6, [sp, #8]
 800a968:	4682      	mov	sl, r0
 800a96a:	468b      	mov	fp, r1
 800a96c:	3501      	adds	r5, #1
 800a96e:	4628      	mov	r0, r5
 800a970:	f7f5 fdd8 	bl	8000524 <__aeabi_i2d>
 800a974:	4652      	mov	r2, sl
 800a976:	465b      	mov	r3, fp
 800a978:	f7f5 fe3e 	bl	80005f8 <__aeabi_dmul>
 800a97c:	4b82      	ldr	r3, [pc, #520]	; (800ab88 <_dtoa_r+0x628>)
 800a97e:	2200      	movs	r2, #0
 800a980:	f7f5 fc84 	bl	800028c <__adddf3>
 800a984:	46d0      	mov	r8, sl
 800a986:	46d9      	mov	r9, fp
 800a988:	4682      	mov	sl, r0
 800a98a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a98e:	2e00      	cmp	r6, #0
 800a990:	d158      	bne.n	800aa44 <_dtoa_r+0x4e4>
 800a992:	4b7e      	ldr	r3, [pc, #504]	; (800ab8c <_dtoa_r+0x62c>)
 800a994:	2200      	movs	r2, #0
 800a996:	4640      	mov	r0, r8
 800a998:	4649      	mov	r1, r9
 800a99a:	f7f5 fc75 	bl	8000288 <__aeabi_dsub>
 800a99e:	4652      	mov	r2, sl
 800a9a0:	465b      	mov	r3, fp
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	f7f6 f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	f040 8295 	bne.w	800aeda <_dtoa_r+0x97a>
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f6 f88f 	bl	8000adc <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	f040 8289 	bne.w	800aed6 <_dtoa_r+0x976>
 800a9c4:	ec5b ab19 	vmov	sl, fp, d9
 800a9c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f2c0 8148 	blt.w	800ac60 <_dtoa_r+0x700>
 800a9d0:	9a00      	ldr	r2, [sp, #0]
 800a9d2:	2a0e      	cmp	r2, #14
 800a9d4:	f300 8144 	bgt.w	800ac60 <_dtoa_r+0x700>
 800a9d8:	4b67      	ldr	r3, [pc, #412]	; (800ab78 <_dtoa_r+0x618>)
 800a9da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f280 80d5 	bge.w	800ab94 <_dtoa_r+0x634>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f300 80d1 	bgt.w	800ab94 <_dtoa_r+0x634>
 800a9f2:	f040 826f 	bne.w	800aed4 <_dtoa_r+0x974>
 800a9f6:	4b65      	ldr	r3, [pc, #404]	; (800ab8c <_dtoa_r+0x62c>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	f7f5 fdfb 	bl	80005f8 <__aeabi_dmul>
 800aa02:	4652      	mov	r2, sl
 800aa04:	465b      	mov	r3, fp
 800aa06:	f7f6 f87d 	bl	8000b04 <__aeabi_dcmpge>
 800aa0a:	9e03      	ldr	r6, [sp, #12]
 800aa0c:	4637      	mov	r7, r6
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f040 8245 	bne.w	800ae9e <_dtoa_r+0x93e>
 800aa14:	9d01      	ldr	r5, [sp, #4]
 800aa16:	2331      	movs	r3, #49	; 0x31
 800aa18:	f805 3b01 	strb.w	r3, [r5], #1
 800aa1c:	9b00      	ldr	r3, [sp, #0]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	e240      	b.n	800aea6 <_dtoa_r+0x946>
 800aa24:	07f2      	lsls	r2, r6, #31
 800aa26:	d505      	bpl.n	800aa34 <_dtoa_r+0x4d4>
 800aa28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa2c:	f7f5 fde4 	bl	80005f8 <__aeabi_dmul>
 800aa30:	3501      	adds	r5, #1
 800aa32:	2301      	movs	r3, #1
 800aa34:	1076      	asrs	r6, r6, #1
 800aa36:	3708      	adds	r7, #8
 800aa38:	e777      	b.n	800a92a <_dtoa_r+0x3ca>
 800aa3a:	2502      	movs	r5, #2
 800aa3c:	e779      	b.n	800a932 <_dtoa_r+0x3d2>
 800aa3e:	9f00      	ldr	r7, [sp, #0]
 800aa40:	9e03      	ldr	r6, [sp, #12]
 800aa42:	e794      	b.n	800a96e <_dtoa_r+0x40e>
 800aa44:	9901      	ldr	r1, [sp, #4]
 800aa46:	4b4c      	ldr	r3, [pc, #304]	; (800ab78 <_dtoa_r+0x618>)
 800aa48:	4431      	add	r1, r6
 800aa4a:	910d      	str	r1, [sp, #52]	; 0x34
 800aa4c:	9908      	ldr	r1, [sp, #32]
 800aa4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa56:	2900      	cmp	r1, #0
 800aa58:	d043      	beq.n	800aae2 <_dtoa_r+0x582>
 800aa5a:	494d      	ldr	r1, [pc, #308]	; (800ab90 <_dtoa_r+0x630>)
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	f7f5 fef5 	bl	800084c <__aeabi_ddiv>
 800aa62:	4652      	mov	r2, sl
 800aa64:	465b      	mov	r3, fp
 800aa66:	f7f5 fc0f 	bl	8000288 <__aeabi_dsub>
 800aa6a:	9d01      	ldr	r5, [sp, #4]
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	468b      	mov	fp, r1
 800aa70:	4649      	mov	r1, r9
 800aa72:	4640      	mov	r0, r8
 800aa74:	f7f6 f870 	bl	8000b58 <__aeabi_d2iz>
 800aa78:	4606      	mov	r6, r0
 800aa7a:	f7f5 fd53 	bl	8000524 <__aeabi_i2d>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4640      	mov	r0, r8
 800aa84:	4649      	mov	r1, r9
 800aa86:	f7f5 fbff 	bl	8000288 <__aeabi_dsub>
 800aa8a:	3630      	adds	r6, #48	; 0x30
 800aa8c:	f805 6b01 	strb.w	r6, [r5], #1
 800aa90:	4652      	mov	r2, sl
 800aa92:	465b      	mov	r3, fp
 800aa94:	4680      	mov	r8, r0
 800aa96:	4689      	mov	r9, r1
 800aa98:	f7f6 f820 	bl	8000adc <__aeabi_dcmplt>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d163      	bne.n	800ab68 <_dtoa_r+0x608>
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	464b      	mov	r3, r9
 800aaa4:	4936      	ldr	r1, [pc, #216]	; (800ab80 <_dtoa_r+0x620>)
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	f7f5 fbee 	bl	8000288 <__aeabi_dsub>
 800aaac:	4652      	mov	r2, sl
 800aaae:	465b      	mov	r3, fp
 800aab0:	f7f6 f814 	bl	8000adc <__aeabi_dcmplt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f040 80b5 	bne.w	800ac24 <_dtoa_r+0x6c4>
 800aaba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aabc:	429d      	cmp	r5, r3
 800aabe:	d081      	beq.n	800a9c4 <_dtoa_r+0x464>
 800aac0:	4b30      	ldr	r3, [pc, #192]	; (800ab84 <_dtoa_r+0x624>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	4650      	mov	r0, sl
 800aac6:	4659      	mov	r1, fp
 800aac8:	f7f5 fd96 	bl	80005f8 <__aeabi_dmul>
 800aacc:	4b2d      	ldr	r3, [pc, #180]	; (800ab84 <_dtoa_r+0x624>)
 800aace:	4682      	mov	sl, r0
 800aad0:	468b      	mov	fp, r1
 800aad2:	4640      	mov	r0, r8
 800aad4:	4649      	mov	r1, r9
 800aad6:	2200      	movs	r2, #0
 800aad8:	f7f5 fd8e 	bl	80005f8 <__aeabi_dmul>
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	e7c6      	b.n	800aa70 <_dtoa_r+0x510>
 800aae2:	4650      	mov	r0, sl
 800aae4:	4659      	mov	r1, fp
 800aae6:	f7f5 fd87 	bl	80005f8 <__aeabi_dmul>
 800aaea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaec:	9d01      	ldr	r5, [sp, #4]
 800aaee:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaf0:	4682      	mov	sl, r0
 800aaf2:	468b      	mov	fp, r1
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	f7f6 f82e 	bl	8000b58 <__aeabi_d2iz>
 800aafc:	4606      	mov	r6, r0
 800aafe:	f7f5 fd11 	bl	8000524 <__aeabi_i2d>
 800ab02:	3630      	adds	r6, #48	; 0x30
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 fbbc 	bl	8000288 <__aeabi_dsub>
 800ab10:	f805 6b01 	strb.w	r6, [r5], #1
 800ab14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab16:	429d      	cmp	r5, r3
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4689      	mov	r9, r1
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	d124      	bne.n	800ab6c <_dtoa_r+0x60c>
 800ab22:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <_dtoa_r+0x630>)
 800ab24:	4650      	mov	r0, sl
 800ab26:	4659      	mov	r1, fp
 800ab28:	f7f5 fbb0 	bl	800028c <__adddf3>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4640      	mov	r0, r8
 800ab32:	4649      	mov	r1, r9
 800ab34:	f7f5 fff0 	bl	8000b18 <__aeabi_dcmpgt>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d173      	bne.n	800ac24 <_dtoa_r+0x6c4>
 800ab3c:	4652      	mov	r2, sl
 800ab3e:	465b      	mov	r3, fp
 800ab40:	4913      	ldr	r1, [pc, #76]	; (800ab90 <_dtoa_r+0x630>)
 800ab42:	2000      	movs	r0, #0
 800ab44:	f7f5 fba0 	bl	8000288 <__aeabi_dsub>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4640      	mov	r0, r8
 800ab4e:	4649      	mov	r1, r9
 800ab50:	f7f5 ffc4 	bl	8000adc <__aeabi_dcmplt>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f43f af35 	beq.w	800a9c4 <_dtoa_r+0x464>
 800ab5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab5c:	1e6b      	subs	r3, r5, #1
 800ab5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab64:	2b30      	cmp	r3, #48	; 0x30
 800ab66:	d0f8      	beq.n	800ab5a <_dtoa_r+0x5fa>
 800ab68:	9700      	str	r7, [sp, #0]
 800ab6a:	e049      	b.n	800ac00 <_dtoa_r+0x6a0>
 800ab6c:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <_dtoa_r+0x624>)
 800ab6e:	f7f5 fd43 	bl	80005f8 <__aeabi_dmul>
 800ab72:	4680      	mov	r8, r0
 800ab74:	4689      	mov	r9, r1
 800ab76:	e7bd      	b.n	800aaf4 <_dtoa_r+0x594>
 800ab78:	0800cab0 	.word	0x0800cab0
 800ab7c:	0800ca88 	.word	0x0800ca88
 800ab80:	3ff00000 	.word	0x3ff00000
 800ab84:	40240000 	.word	0x40240000
 800ab88:	401c0000 	.word	0x401c0000
 800ab8c:	40140000 	.word	0x40140000
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	9d01      	ldr	r5, [sp, #4]
 800ab96:	4656      	mov	r6, sl
 800ab98:	465f      	mov	r7, fp
 800ab9a:	4642      	mov	r2, r8
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	4630      	mov	r0, r6
 800aba0:	4639      	mov	r1, r7
 800aba2:	f7f5 fe53 	bl	800084c <__aeabi_ddiv>
 800aba6:	f7f5 ffd7 	bl	8000b58 <__aeabi_d2iz>
 800abaa:	4682      	mov	sl, r0
 800abac:	f7f5 fcba 	bl	8000524 <__aeabi_i2d>
 800abb0:	4642      	mov	r2, r8
 800abb2:	464b      	mov	r3, r9
 800abb4:	f7f5 fd20 	bl	80005f8 <__aeabi_dmul>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800abc4:	f7f5 fb60 	bl	8000288 <__aeabi_dsub>
 800abc8:	f805 6b01 	strb.w	r6, [r5], #1
 800abcc:	9e01      	ldr	r6, [sp, #4]
 800abce:	9f03      	ldr	r7, [sp, #12]
 800abd0:	1bae      	subs	r6, r5, r6
 800abd2:	42b7      	cmp	r7, r6
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	d135      	bne.n	800ac46 <_dtoa_r+0x6e6>
 800abda:	f7f5 fb57 	bl	800028c <__adddf3>
 800abde:	4642      	mov	r2, r8
 800abe0:	464b      	mov	r3, r9
 800abe2:	4606      	mov	r6, r0
 800abe4:	460f      	mov	r7, r1
 800abe6:	f7f5 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 800abea:	b9d0      	cbnz	r0, 800ac22 <_dtoa_r+0x6c2>
 800abec:	4642      	mov	r2, r8
 800abee:	464b      	mov	r3, r9
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ff68 	bl	8000ac8 <__aeabi_dcmpeq>
 800abf8:	b110      	cbz	r0, 800ac00 <_dtoa_r+0x6a0>
 800abfa:	f01a 0f01 	tst.w	sl, #1
 800abfe:	d110      	bne.n	800ac22 <_dtoa_r+0x6c2>
 800ac00:	4620      	mov	r0, r4
 800ac02:	ee18 1a10 	vmov	r1, s16
 800ac06:	f000 fae5 	bl	800b1d4 <_Bfree>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	9800      	ldr	r0, [sp, #0]
 800ac0e:	702b      	strb	r3, [r5, #0]
 800ac10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac12:	3001      	adds	r0, #1
 800ac14:	6018      	str	r0, [r3, #0]
 800ac16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f43f acf1 	beq.w	800a600 <_dtoa_r+0xa0>
 800ac1e:	601d      	str	r5, [r3, #0]
 800ac20:	e4ee      	b.n	800a600 <_dtoa_r+0xa0>
 800ac22:	9f00      	ldr	r7, [sp, #0]
 800ac24:	462b      	mov	r3, r5
 800ac26:	461d      	mov	r5, r3
 800ac28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac2c:	2a39      	cmp	r2, #57	; 0x39
 800ac2e:	d106      	bne.n	800ac3e <_dtoa_r+0x6de>
 800ac30:	9a01      	ldr	r2, [sp, #4]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d1f7      	bne.n	800ac26 <_dtoa_r+0x6c6>
 800ac36:	9901      	ldr	r1, [sp, #4]
 800ac38:	2230      	movs	r2, #48	; 0x30
 800ac3a:	3701      	adds	r7, #1
 800ac3c:	700a      	strb	r2, [r1, #0]
 800ac3e:	781a      	ldrb	r2, [r3, #0]
 800ac40:	3201      	adds	r2, #1
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	e790      	b.n	800ab68 <_dtoa_r+0x608>
 800ac46:	4ba6      	ldr	r3, [pc, #664]	; (800aee0 <_dtoa_r+0x980>)
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f7f5 fcd5 	bl	80005f8 <__aeabi_dmul>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2300      	movs	r3, #0
 800ac52:	4606      	mov	r6, r0
 800ac54:	460f      	mov	r7, r1
 800ac56:	f7f5 ff37 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	d09d      	beq.n	800ab9a <_dtoa_r+0x63a>
 800ac5e:	e7cf      	b.n	800ac00 <_dtoa_r+0x6a0>
 800ac60:	9a08      	ldr	r2, [sp, #32]
 800ac62:	2a00      	cmp	r2, #0
 800ac64:	f000 80d7 	beq.w	800ae16 <_dtoa_r+0x8b6>
 800ac68:	9a06      	ldr	r2, [sp, #24]
 800ac6a:	2a01      	cmp	r2, #1
 800ac6c:	f300 80ba 	bgt.w	800ade4 <_dtoa_r+0x884>
 800ac70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac72:	2a00      	cmp	r2, #0
 800ac74:	f000 80b2 	beq.w	800addc <_dtoa_r+0x87c>
 800ac78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac7c:	9e07      	ldr	r6, [sp, #28]
 800ac7e:	9d04      	ldr	r5, [sp, #16]
 800ac80:	9a04      	ldr	r2, [sp, #16]
 800ac82:	441a      	add	r2, r3
 800ac84:	9204      	str	r2, [sp, #16]
 800ac86:	9a05      	ldr	r2, [sp, #20]
 800ac88:	2101      	movs	r1, #1
 800ac8a:	441a      	add	r2, r3
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	9205      	str	r2, [sp, #20]
 800ac90:	f000 fb58 	bl	800b344 <__i2b>
 800ac94:	4607      	mov	r7, r0
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	dd0c      	ble.n	800acb4 <_dtoa_r+0x754>
 800ac9a:	9b05      	ldr	r3, [sp, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dd09      	ble.n	800acb4 <_dtoa_r+0x754>
 800aca0:	42ab      	cmp	r3, r5
 800aca2:	9a04      	ldr	r2, [sp, #16]
 800aca4:	bfa8      	it	ge
 800aca6:	462b      	movge	r3, r5
 800aca8:	1ad2      	subs	r2, r2, r3
 800acaa:	9204      	str	r2, [sp, #16]
 800acac:	9a05      	ldr	r2, [sp, #20]
 800acae:	1aed      	subs	r5, r5, r3
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	9b07      	ldr	r3, [sp, #28]
 800acb6:	b31b      	cbz	r3, 800ad00 <_dtoa_r+0x7a0>
 800acb8:	9b08      	ldr	r3, [sp, #32]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f000 80af 	beq.w	800ae1e <_dtoa_r+0x8be>
 800acc0:	2e00      	cmp	r6, #0
 800acc2:	dd13      	ble.n	800acec <_dtoa_r+0x78c>
 800acc4:	4639      	mov	r1, r7
 800acc6:	4632      	mov	r2, r6
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 fbfb 	bl	800b4c4 <__pow5mult>
 800acce:	ee18 2a10 	vmov	r2, s16
 800acd2:	4601      	mov	r1, r0
 800acd4:	4607      	mov	r7, r0
 800acd6:	4620      	mov	r0, r4
 800acd8:	f000 fb4a 	bl	800b370 <__multiply>
 800acdc:	ee18 1a10 	vmov	r1, s16
 800ace0:	4680      	mov	r8, r0
 800ace2:	4620      	mov	r0, r4
 800ace4:	f000 fa76 	bl	800b1d4 <_Bfree>
 800ace8:	ee08 8a10 	vmov	s16, r8
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	1b9a      	subs	r2, r3, r6
 800acf0:	d006      	beq.n	800ad00 <_dtoa_r+0x7a0>
 800acf2:	ee18 1a10 	vmov	r1, s16
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 fbe4 	bl	800b4c4 <__pow5mult>
 800acfc:	ee08 0a10 	vmov	s16, r0
 800ad00:	2101      	movs	r1, #1
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fb1e 	bl	800b344 <__i2b>
 800ad08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	f340 8088 	ble.w	800ae22 <_dtoa_r+0x8c2>
 800ad12:	461a      	mov	r2, r3
 800ad14:	4601      	mov	r1, r0
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 fbd4 	bl	800b4c4 <__pow5mult>
 800ad1c:	9b06      	ldr	r3, [sp, #24]
 800ad1e:	2b01      	cmp	r3, #1
 800ad20:	4606      	mov	r6, r0
 800ad22:	f340 8081 	ble.w	800ae28 <_dtoa_r+0x8c8>
 800ad26:	f04f 0800 	mov.w	r8, #0
 800ad2a:	6933      	ldr	r3, [r6, #16]
 800ad2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad30:	6918      	ldr	r0, [r3, #16]
 800ad32:	f000 fab7 	bl	800b2a4 <__hi0bits>
 800ad36:	f1c0 0020 	rsb	r0, r0, #32
 800ad3a:	9b05      	ldr	r3, [sp, #20]
 800ad3c:	4418      	add	r0, r3
 800ad3e:	f010 001f 	ands.w	r0, r0, #31
 800ad42:	f000 8092 	beq.w	800ae6a <_dtoa_r+0x90a>
 800ad46:	f1c0 0320 	rsb	r3, r0, #32
 800ad4a:	2b04      	cmp	r3, #4
 800ad4c:	f340 808a 	ble.w	800ae64 <_dtoa_r+0x904>
 800ad50:	f1c0 001c 	rsb	r0, r0, #28
 800ad54:	9b04      	ldr	r3, [sp, #16]
 800ad56:	4403      	add	r3, r0
 800ad58:	9304      	str	r3, [sp, #16]
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	4403      	add	r3, r0
 800ad5e:	4405      	add	r5, r0
 800ad60:	9305      	str	r3, [sp, #20]
 800ad62:	9b04      	ldr	r3, [sp, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	dd07      	ble.n	800ad78 <_dtoa_r+0x818>
 800ad68:	ee18 1a10 	vmov	r1, s16
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fc02 	bl	800b578 <__lshift>
 800ad74:	ee08 0a10 	vmov	s16, r0
 800ad78:	9b05      	ldr	r3, [sp, #20]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	dd05      	ble.n	800ad8a <_dtoa_r+0x82a>
 800ad7e:	4631      	mov	r1, r6
 800ad80:	461a      	mov	r2, r3
 800ad82:	4620      	mov	r0, r4
 800ad84:	f000 fbf8 	bl	800b578 <__lshift>
 800ad88:	4606      	mov	r6, r0
 800ad8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d06e      	beq.n	800ae6e <_dtoa_r+0x90e>
 800ad90:	ee18 0a10 	vmov	r0, s16
 800ad94:	4631      	mov	r1, r6
 800ad96:	f000 fc5f 	bl	800b658 <__mcmp>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	da67      	bge.n	800ae6e <_dtoa_r+0x90e>
 800ad9e:	9b00      	ldr	r3, [sp, #0]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	ee18 1a10 	vmov	r1, s16
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	220a      	movs	r2, #10
 800adaa:	2300      	movs	r3, #0
 800adac:	4620      	mov	r0, r4
 800adae:	f000 fa33 	bl	800b218 <__multadd>
 800adb2:	9b08      	ldr	r3, [sp, #32]
 800adb4:	ee08 0a10 	vmov	s16, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 81b1 	beq.w	800b120 <_dtoa_r+0xbc0>
 800adbe:	2300      	movs	r3, #0
 800adc0:	4639      	mov	r1, r7
 800adc2:	220a      	movs	r2, #10
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 fa27 	bl	800b218 <__multadd>
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	4607      	mov	r7, r0
 800add0:	f300 808e 	bgt.w	800aef0 <_dtoa_r+0x990>
 800add4:	9b06      	ldr	r3, [sp, #24]
 800add6:	2b02      	cmp	r3, #2
 800add8:	dc51      	bgt.n	800ae7e <_dtoa_r+0x91e>
 800adda:	e089      	b.n	800aef0 <_dtoa_r+0x990>
 800addc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ade2:	e74b      	b.n	800ac7c <_dtoa_r+0x71c>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	1e5e      	subs	r6, r3, #1
 800ade8:	9b07      	ldr	r3, [sp, #28]
 800adea:	42b3      	cmp	r3, r6
 800adec:	bfbf      	itttt	lt
 800adee:	9b07      	ldrlt	r3, [sp, #28]
 800adf0:	9607      	strlt	r6, [sp, #28]
 800adf2:	1af2      	sublt	r2, r6, r3
 800adf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800adf6:	bfb6      	itet	lt
 800adf8:	189b      	addlt	r3, r3, r2
 800adfa:	1b9e      	subge	r6, r3, r6
 800adfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800adfe:	9b03      	ldr	r3, [sp, #12]
 800ae00:	bfb8      	it	lt
 800ae02:	2600      	movlt	r6, #0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bfb7      	itett	lt
 800ae08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae10:	1a9d      	sublt	r5, r3, r2
 800ae12:	2300      	movlt	r3, #0
 800ae14:	e734      	b.n	800ac80 <_dtoa_r+0x720>
 800ae16:	9e07      	ldr	r6, [sp, #28]
 800ae18:	9d04      	ldr	r5, [sp, #16]
 800ae1a:	9f08      	ldr	r7, [sp, #32]
 800ae1c:	e73b      	b.n	800ac96 <_dtoa_r+0x736>
 800ae1e:	9a07      	ldr	r2, [sp, #28]
 800ae20:	e767      	b.n	800acf2 <_dtoa_r+0x792>
 800ae22:	9b06      	ldr	r3, [sp, #24]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	dc18      	bgt.n	800ae5a <_dtoa_r+0x8fa>
 800ae28:	f1ba 0f00 	cmp.w	sl, #0
 800ae2c:	d115      	bne.n	800ae5a <_dtoa_r+0x8fa>
 800ae2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae32:	b993      	cbnz	r3, 800ae5a <_dtoa_r+0x8fa>
 800ae34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae38:	0d1b      	lsrs	r3, r3, #20
 800ae3a:	051b      	lsls	r3, r3, #20
 800ae3c:	b183      	cbz	r3, 800ae60 <_dtoa_r+0x900>
 800ae3e:	9b04      	ldr	r3, [sp, #16]
 800ae40:	3301      	adds	r3, #1
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	9b05      	ldr	r3, [sp, #20]
 800ae46:	3301      	adds	r3, #1
 800ae48:	9305      	str	r3, [sp, #20]
 800ae4a:	f04f 0801 	mov.w	r8, #1
 800ae4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f47f af6a 	bne.w	800ad2a <_dtoa_r+0x7ca>
 800ae56:	2001      	movs	r0, #1
 800ae58:	e76f      	b.n	800ad3a <_dtoa_r+0x7da>
 800ae5a:	f04f 0800 	mov.w	r8, #0
 800ae5e:	e7f6      	b.n	800ae4e <_dtoa_r+0x8ee>
 800ae60:	4698      	mov	r8, r3
 800ae62:	e7f4      	b.n	800ae4e <_dtoa_r+0x8ee>
 800ae64:	f43f af7d 	beq.w	800ad62 <_dtoa_r+0x802>
 800ae68:	4618      	mov	r0, r3
 800ae6a:	301c      	adds	r0, #28
 800ae6c:	e772      	b.n	800ad54 <_dtoa_r+0x7f4>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	dc37      	bgt.n	800aee4 <_dtoa_r+0x984>
 800ae74:	9b06      	ldr	r3, [sp, #24]
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	dd34      	ble.n	800aee4 <_dtoa_r+0x984>
 800ae7a:	9b03      	ldr	r3, [sp, #12]
 800ae7c:	9302      	str	r3, [sp, #8]
 800ae7e:	9b02      	ldr	r3, [sp, #8]
 800ae80:	b96b      	cbnz	r3, 800ae9e <_dtoa_r+0x93e>
 800ae82:	4631      	mov	r1, r6
 800ae84:	2205      	movs	r2, #5
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 f9c6 	bl	800b218 <__multadd>
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	4606      	mov	r6, r0
 800ae90:	ee18 0a10 	vmov	r0, s16
 800ae94:	f000 fbe0 	bl	800b658 <__mcmp>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f73f adbb 	bgt.w	800aa14 <_dtoa_r+0x4b4>
 800ae9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea0:	9d01      	ldr	r5, [sp, #4]
 800aea2:	43db      	mvns	r3, r3
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	f04f 0800 	mov.w	r8, #0
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 f991 	bl	800b1d4 <_Bfree>
 800aeb2:	2f00      	cmp	r7, #0
 800aeb4:	f43f aea4 	beq.w	800ac00 <_dtoa_r+0x6a0>
 800aeb8:	f1b8 0f00 	cmp.w	r8, #0
 800aebc:	d005      	beq.n	800aeca <_dtoa_r+0x96a>
 800aebe:	45b8      	cmp	r8, r7
 800aec0:	d003      	beq.n	800aeca <_dtoa_r+0x96a>
 800aec2:	4641      	mov	r1, r8
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 f985 	bl	800b1d4 <_Bfree>
 800aeca:	4639      	mov	r1, r7
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 f981 	bl	800b1d4 <_Bfree>
 800aed2:	e695      	b.n	800ac00 <_dtoa_r+0x6a0>
 800aed4:	2600      	movs	r6, #0
 800aed6:	4637      	mov	r7, r6
 800aed8:	e7e1      	b.n	800ae9e <_dtoa_r+0x93e>
 800aeda:	9700      	str	r7, [sp, #0]
 800aedc:	4637      	mov	r7, r6
 800aede:	e599      	b.n	800aa14 <_dtoa_r+0x4b4>
 800aee0:	40240000 	.word	0x40240000
 800aee4:	9b08      	ldr	r3, [sp, #32]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 80ca 	beq.w	800b080 <_dtoa_r+0xb20>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	9302      	str	r3, [sp, #8]
 800aef0:	2d00      	cmp	r5, #0
 800aef2:	dd05      	ble.n	800af00 <_dtoa_r+0x9a0>
 800aef4:	4639      	mov	r1, r7
 800aef6:	462a      	mov	r2, r5
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 fb3d 	bl	800b578 <__lshift>
 800aefe:	4607      	mov	r7, r0
 800af00:	f1b8 0f00 	cmp.w	r8, #0
 800af04:	d05b      	beq.n	800afbe <_dtoa_r+0xa5e>
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	4620      	mov	r0, r4
 800af0a:	f000 f923 	bl	800b154 <_Balloc>
 800af0e:	4605      	mov	r5, r0
 800af10:	b928      	cbnz	r0, 800af1e <_dtoa_r+0x9be>
 800af12:	4b87      	ldr	r3, [pc, #540]	; (800b130 <_dtoa_r+0xbd0>)
 800af14:	4602      	mov	r2, r0
 800af16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af1a:	f7ff bb3b 	b.w	800a594 <_dtoa_r+0x34>
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	3202      	adds	r2, #2
 800af22:	0092      	lsls	r2, r2, #2
 800af24:	f107 010c 	add.w	r1, r7, #12
 800af28:	300c      	adds	r0, #12
 800af2a:	f7fe fded 	bl	8009b08 <memcpy>
 800af2e:	2201      	movs	r2, #1
 800af30:	4629      	mov	r1, r5
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fb20 	bl	800b578 <__lshift>
 800af38:	9b01      	ldr	r3, [sp, #4]
 800af3a:	f103 0901 	add.w	r9, r3, #1
 800af3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af42:	4413      	add	r3, r2
 800af44:	9305      	str	r3, [sp, #20]
 800af46:	f00a 0301 	and.w	r3, sl, #1
 800af4a:	46b8      	mov	r8, r7
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	4607      	mov	r7, r0
 800af50:	4631      	mov	r1, r6
 800af52:	ee18 0a10 	vmov	r0, s16
 800af56:	f7ff fa77 	bl	800a448 <quorem>
 800af5a:	4641      	mov	r1, r8
 800af5c:	9002      	str	r0, [sp, #8]
 800af5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af62:	ee18 0a10 	vmov	r0, s16
 800af66:	f000 fb77 	bl	800b658 <__mcmp>
 800af6a:	463a      	mov	r2, r7
 800af6c:	9003      	str	r0, [sp, #12]
 800af6e:	4631      	mov	r1, r6
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fb8d 	bl	800b690 <__mdiff>
 800af76:	68c2      	ldr	r2, [r0, #12]
 800af78:	f109 3bff 	add.w	fp, r9, #4294967295
 800af7c:	4605      	mov	r5, r0
 800af7e:	bb02      	cbnz	r2, 800afc2 <_dtoa_r+0xa62>
 800af80:	4601      	mov	r1, r0
 800af82:	ee18 0a10 	vmov	r0, s16
 800af86:	f000 fb67 	bl	800b658 <__mcmp>
 800af8a:	4602      	mov	r2, r0
 800af8c:	4629      	mov	r1, r5
 800af8e:	4620      	mov	r0, r4
 800af90:	9207      	str	r2, [sp, #28]
 800af92:	f000 f91f 	bl	800b1d4 <_Bfree>
 800af96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800af9a:	ea43 0102 	orr.w	r1, r3, r2
 800af9e:	9b04      	ldr	r3, [sp, #16]
 800afa0:	430b      	orrs	r3, r1
 800afa2:	464d      	mov	r5, r9
 800afa4:	d10f      	bne.n	800afc6 <_dtoa_r+0xa66>
 800afa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afaa:	d02a      	beq.n	800b002 <_dtoa_r+0xaa2>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dd02      	ble.n	800afb8 <_dtoa_r+0xa58>
 800afb2:	9b02      	ldr	r3, [sp, #8]
 800afb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800afb8:	f88b a000 	strb.w	sl, [fp]
 800afbc:	e775      	b.n	800aeaa <_dtoa_r+0x94a>
 800afbe:	4638      	mov	r0, r7
 800afc0:	e7ba      	b.n	800af38 <_dtoa_r+0x9d8>
 800afc2:	2201      	movs	r2, #1
 800afc4:	e7e2      	b.n	800af8c <_dtoa_r+0xa2c>
 800afc6:	9b03      	ldr	r3, [sp, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	db04      	blt.n	800afd6 <_dtoa_r+0xa76>
 800afcc:	9906      	ldr	r1, [sp, #24]
 800afce:	430b      	orrs	r3, r1
 800afd0:	9904      	ldr	r1, [sp, #16]
 800afd2:	430b      	orrs	r3, r1
 800afd4:	d122      	bne.n	800b01c <_dtoa_r+0xabc>
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	ddee      	ble.n	800afb8 <_dtoa_r+0xa58>
 800afda:	ee18 1a10 	vmov	r1, s16
 800afde:	2201      	movs	r2, #1
 800afe0:	4620      	mov	r0, r4
 800afe2:	f000 fac9 	bl	800b578 <__lshift>
 800afe6:	4631      	mov	r1, r6
 800afe8:	ee08 0a10 	vmov	s16, r0
 800afec:	f000 fb34 	bl	800b658 <__mcmp>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	dc03      	bgt.n	800affc <_dtoa_r+0xa9c>
 800aff4:	d1e0      	bne.n	800afb8 <_dtoa_r+0xa58>
 800aff6:	f01a 0f01 	tst.w	sl, #1
 800affa:	d0dd      	beq.n	800afb8 <_dtoa_r+0xa58>
 800affc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b000:	d1d7      	bne.n	800afb2 <_dtoa_r+0xa52>
 800b002:	2339      	movs	r3, #57	; 0x39
 800b004:	f88b 3000 	strb.w	r3, [fp]
 800b008:	462b      	mov	r3, r5
 800b00a:	461d      	mov	r5, r3
 800b00c:	3b01      	subs	r3, #1
 800b00e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b012:	2a39      	cmp	r2, #57	; 0x39
 800b014:	d071      	beq.n	800b0fa <_dtoa_r+0xb9a>
 800b016:	3201      	adds	r2, #1
 800b018:	701a      	strb	r2, [r3, #0]
 800b01a:	e746      	b.n	800aeaa <_dtoa_r+0x94a>
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	dd07      	ble.n	800b030 <_dtoa_r+0xad0>
 800b020:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b024:	d0ed      	beq.n	800b002 <_dtoa_r+0xaa2>
 800b026:	f10a 0301 	add.w	r3, sl, #1
 800b02a:	f88b 3000 	strb.w	r3, [fp]
 800b02e:	e73c      	b.n	800aeaa <_dtoa_r+0x94a>
 800b030:	9b05      	ldr	r3, [sp, #20]
 800b032:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b036:	4599      	cmp	r9, r3
 800b038:	d047      	beq.n	800b0ca <_dtoa_r+0xb6a>
 800b03a:	ee18 1a10 	vmov	r1, s16
 800b03e:	2300      	movs	r3, #0
 800b040:	220a      	movs	r2, #10
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f8e8 	bl	800b218 <__multadd>
 800b048:	45b8      	cmp	r8, r7
 800b04a:	ee08 0a10 	vmov	s16, r0
 800b04e:	f04f 0300 	mov.w	r3, #0
 800b052:	f04f 020a 	mov.w	r2, #10
 800b056:	4641      	mov	r1, r8
 800b058:	4620      	mov	r0, r4
 800b05a:	d106      	bne.n	800b06a <_dtoa_r+0xb0a>
 800b05c:	f000 f8dc 	bl	800b218 <__multadd>
 800b060:	4680      	mov	r8, r0
 800b062:	4607      	mov	r7, r0
 800b064:	f109 0901 	add.w	r9, r9, #1
 800b068:	e772      	b.n	800af50 <_dtoa_r+0x9f0>
 800b06a:	f000 f8d5 	bl	800b218 <__multadd>
 800b06e:	4639      	mov	r1, r7
 800b070:	4680      	mov	r8, r0
 800b072:	2300      	movs	r3, #0
 800b074:	220a      	movs	r2, #10
 800b076:	4620      	mov	r0, r4
 800b078:	f000 f8ce 	bl	800b218 <__multadd>
 800b07c:	4607      	mov	r7, r0
 800b07e:	e7f1      	b.n	800b064 <_dtoa_r+0xb04>
 800b080:	9b03      	ldr	r3, [sp, #12]
 800b082:	9302      	str	r3, [sp, #8]
 800b084:	9d01      	ldr	r5, [sp, #4]
 800b086:	ee18 0a10 	vmov	r0, s16
 800b08a:	4631      	mov	r1, r6
 800b08c:	f7ff f9dc 	bl	800a448 <quorem>
 800b090:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b094:	9b01      	ldr	r3, [sp, #4]
 800b096:	f805 ab01 	strb.w	sl, [r5], #1
 800b09a:	1aea      	subs	r2, r5, r3
 800b09c:	9b02      	ldr	r3, [sp, #8]
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	dd09      	ble.n	800b0b6 <_dtoa_r+0xb56>
 800b0a2:	ee18 1a10 	vmov	r1, s16
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f000 f8b4 	bl	800b218 <__multadd>
 800b0b0:	ee08 0a10 	vmov	s16, r0
 800b0b4:	e7e7      	b.n	800b086 <_dtoa_r+0xb26>
 800b0b6:	9b02      	ldr	r3, [sp, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bfc8      	it	gt
 800b0bc:	461d      	movgt	r5, r3
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	bfd8      	it	le
 800b0c2:	2501      	movle	r5, #1
 800b0c4:	441d      	add	r5, r3
 800b0c6:	f04f 0800 	mov.w	r8, #0
 800b0ca:	ee18 1a10 	vmov	r1, s16
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fa51 	bl	800b578 <__lshift>
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	ee08 0a10 	vmov	s16, r0
 800b0dc:	f000 fabc 	bl	800b658 <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	dc91      	bgt.n	800b008 <_dtoa_r+0xaa8>
 800b0e4:	d102      	bne.n	800b0ec <_dtoa_r+0xb8c>
 800b0e6:	f01a 0f01 	tst.w	sl, #1
 800b0ea:	d18d      	bne.n	800b008 <_dtoa_r+0xaa8>
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	461d      	mov	r5, r3
 800b0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f4:	2a30      	cmp	r2, #48	; 0x30
 800b0f6:	d0fa      	beq.n	800b0ee <_dtoa_r+0xb8e>
 800b0f8:	e6d7      	b.n	800aeaa <_dtoa_r+0x94a>
 800b0fa:	9a01      	ldr	r2, [sp, #4]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d184      	bne.n	800b00a <_dtoa_r+0xaaa>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	2331      	movs	r3, #49	; 0x31
 800b108:	7013      	strb	r3, [r2, #0]
 800b10a:	e6ce      	b.n	800aeaa <_dtoa_r+0x94a>
 800b10c:	4b09      	ldr	r3, [pc, #36]	; (800b134 <_dtoa_r+0xbd4>)
 800b10e:	f7ff ba95 	b.w	800a63c <_dtoa_r+0xdc>
 800b112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b114:	2b00      	cmp	r3, #0
 800b116:	f47f aa6e 	bne.w	800a5f6 <_dtoa_r+0x96>
 800b11a:	4b07      	ldr	r3, [pc, #28]	; (800b138 <_dtoa_r+0xbd8>)
 800b11c:	f7ff ba8e 	b.w	800a63c <_dtoa_r+0xdc>
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	dcae      	bgt.n	800b084 <_dtoa_r+0xb24>
 800b126:	9b06      	ldr	r3, [sp, #24]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	f73f aea8 	bgt.w	800ae7e <_dtoa_r+0x91e>
 800b12e:	e7a9      	b.n	800b084 <_dtoa_r+0xb24>
 800b130:	0800ca1b 	.word	0x0800ca1b
 800b134:	0800c978 	.word	0x0800c978
 800b138:	0800c99c 	.word	0x0800c99c

0800b13c <_localeconv_r>:
 800b13c:	4800      	ldr	r0, [pc, #0]	; (800b140 <_localeconv_r+0x4>)
 800b13e:	4770      	bx	lr
 800b140:	20000250 	.word	0x20000250

0800b144 <malloc>:
 800b144:	4b02      	ldr	r3, [pc, #8]	; (800b150 <malloc+0xc>)
 800b146:	4601      	mov	r1, r0
 800b148:	6818      	ldr	r0, [r3, #0]
 800b14a:	f000 bc09 	b.w	800b960 <_malloc_r>
 800b14e:	bf00      	nop
 800b150:	200000fc 	.word	0x200000fc

0800b154 <_Balloc>:
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b158:	4604      	mov	r4, r0
 800b15a:	460d      	mov	r5, r1
 800b15c:	b976      	cbnz	r6, 800b17c <_Balloc+0x28>
 800b15e:	2010      	movs	r0, #16
 800b160:	f7ff fff0 	bl	800b144 <malloc>
 800b164:	4602      	mov	r2, r0
 800b166:	6260      	str	r0, [r4, #36]	; 0x24
 800b168:	b920      	cbnz	r0, 800b174 <_Balloc+0x20>
 800b16a:	4b18      	ldr	r3, [pc, #96]	; (800b1cc <_Balloc+0x78>)
 800b16c:	4818      	ldr	r0, [pc, #96]	; (800b1d0 <_Balloc+0x7c>)
 800b16e:	2166      	movs	r1, #102	; 0x66
 800b170:	f000 fdd6 	bl	800bd20 <__assert_func>
 800b174:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b178:	6006      	str	r6, [r0, #0]
 800b17a:	60c6      	str	r6, [r0, #12]
 800b17c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b17e:	68f3      	ldr	r3, [r6, #12]
 800b180:	b183      	cbz	r3, 800b1a4 <_Balloc+0x50>
 800b182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b18a:	b9b8      	cbnz	r0, 800b1bc <_Balloc+0x68>
 800b18c:	2101      	movs	r1, #1
 800b18e:	fa01 f605 	lsl.w	r6, r1, r5
 800b192:	1d72      	adds	r2, r6, #5
 800b194:	0092      	lsls	r2, r2, #2
 800b196:	4620      	mov	r0, r4
 800b198:	f000 fb60 	bl	800b85c <_calloc_r>
 800b19c:	b160      	cbz	r0, 800b1b8 <_Balloc+0x64>
 800b19e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1a2:	e00e      	b.n	800b1c2 <_Balloc+0x6e>
 800b1a4:	2221      	movs	r2, #33	; 0x21
 800b1a6:	2104      	movs	r1, #4
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 fb57 	bl	800b85c <_calloc_r>
 800b1ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1b0:	60f0      	str	r0, [r6, #12]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e4      	bne.n	800b182 <_Balloc+0x2e>
 800b1b8:	2000      	movs	r0, #0
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	6802      	ldr	r2, [r0, #0]
 800b1be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1c8:	e7f7      	b.n	800b1ba <_Balloc+0x66>
 800b1ca:	bf00      	nop
 800b1cc:	0800c9a9 	.word	0x0800c9a9
 800b1d0:	0800ca2c 	.word	0x0800ca2c

0800b1d4 <_Bfree>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1d8:	4605      	mov	r5, r0
 800b1da:	460c      	mov	r4, r1
 800b1dc:	b976      	cbnz	r6, 800b1fc <_Bfree+0x28>
 800b1de:	2010      	movs	r0, #16
 800b1e0:	f7ff ffb0 	bl	800b144 <malloc>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	6268      	str	r0, [r5, #36]	; 0x24
 800b1e8:	b920      	cbnz	r0, 800b1f4 <_Bfree+0x20>
 800b1ea:	4b09      	ldr	r3, [pc, #36]	; (800b210 <_Bfree+0x3c>)
 800b1ec:	4809      	ldr	r0, [pc, #36]	; (800b214 <_Bfree+0x40>)
 800b1ee:	218a      	movs	r1, #138	; 0x8a
 800b1f0:	f000 fd96 	bl	800bd20 <__assert_func>
 800b1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1f8:	6006      	str	r6, [r0, #0]
 800b1fa:	60c6      	str	r6, [r0, #12]
 800b1fc:	b13c      	cbz	r4, 800b20e <_Bfree+0x3a>
 800b1fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b200:	6862      	ldr	r2, [r4, #4]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b208:	6021      	str	r1, [r4, #0]
 800b20a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	0800c9a9 	.word	0x0800c9a9
 800b214:	0800ca2c 	.word	0x0800ca2c

0800b218 <__multadd>:
 800b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b21c:	690d      	ldr	r5, [r1, #16]
 800b21e:	4607      	mov	r7, r0
 800b220:	460c      	mov	r4, r1
 800b222:	461e      	mov	r6, r3
 800b224:	f101 0c14 	add.w	ip, r1, #20
 800b228:	2000      	movs	r0, #0
 800b22a:	f8dc 3000 	ldr.w	r3, [ip]
 800b22e:	b299      	uxth	r1, r3
 800b230:	fb02 6101 	mla	r1, r2, r1, r6
 800b234:	0c1e      	lsrs	r6, r3, #16
 800b236:	0c0b      	lsrs	r3, r1, #16
 800b238:	fb02 3306 	mla	r3, r2, r6, r3
 800b23c:	b289      	uxth	r1, r1
 800b23e:	3001      	adds	r0, #1
 800b240:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b244:	4285      	cmp	r5, r0
 800b246:	f84c 1b04 	str.w	r1, [ip], #4
 800b24a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b24e:	dcec      	bgt.n	800b22a <__multadd+0x12>
 800b250:	b30e      	cbz	r6, 800b296 <__multadd+0x7e>
 800b252:	68a3      	ldr	r3, [r4, #8]
 800b254:	42ab      	cmp	r3, r5
 800b256:	dc19      	bgt.n	800b28c <__multadd+0x74>
 800b258:	6861      	ldr	r1, [r4, #4]
 800b25a:	4638      	mov	r0, r7
 800b25c:	3101      	adds	r1, #1
 800b25e:	f7ff ff79 	bl	800b154 <_Balloc>
 800b262:	4680      	mov	r8, r0
 800b264:	b928      	cbnz	r0, 800b272 <__multadd+0x5a>
 800b266:	4602      	mov	r2, r0
 800b268:	4b0c      	ldr	r3, [pc, #48]	; (800b29c <__multadd+0x84>)
 800b26a:	480d      	ldr	r0, [pc, #52]	; (800b2a0 <__multadd+0x88>)
 800b26c:	21b5      	movs	r1, #181	; 0xb5
 800b26e:	f000 fd57 	bl	800bd20 <__assert_func>
 800b272:	6922      	ldr	r2, [r4, #16]
 800b274:	3202      	adds	r2, #2
 800b276:	f104 010c 	add.w	r1, r4, #12
 800b27a:	0092      	lsls	r2, r2, #2
 800b27c:	300c      	adds	r0, #12
 800b27e:	f7fe fc43 	bl	8009b08 <memcpy>
 800b282:	4621      	mov	r1, r4
 800b284:	4638      	mov	r0, r7
 800b286:	f7ff ffa5 	bl	800b1d4 <_Bfree>
 800b28a:	4644      	mov	r4, r8
 800b28c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b290:	3501      	adds	r5, #1
 800b292:	615e      	str	r6, [r3, #20]
 800b294:	6125      	str	r5, [r4, #16]
 800b296:	4620      	mov	r0, r4
 800b298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29c:	0800ca1b 	.word	0x0800ca1b
 800b2a0:	0800ca2c 	.word	0x0800ca2c

0800b2a4 <__hi0bits>:
 800b2a4:	0c03      	lsrs	r3, r0, #16
 800b2a6:	041b      	lsls	r3, r3, #16
 800b2a8:	b9d3      	cbnz	r3, 800b2e0 <__hi0bits+0x3c>
 800b2aa:	0400      	lsls	r0, r0, #16
 800b2ac:	2310      	movs	r3, #16
 800b2ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2b2:	bf04      	itt	eq
 800b2b4:	0200      	lsleq	r0, r0, #8
 800b2b6:	3308      	addeq	r3, #8
 800b2b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2bc:	bf04      	itt	eq
 800b2be:	0100      	lsleq	r0, r0, #4
 800b2c0:	3304      	addeq	r3, #4
 800b2c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2c6:	bf04      	itt	eq
 800b2c8:	0080      	lsleq	r0, r0, #2
 800b2ca:	3302      	addeq	r3, #2
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	db05      	blt.n	800b2dc <__hi0bits+0x38>
 800b2d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2d4:	f103 0301 	add.w	r3, r3, #1
 800b2d8:	bf08      	it	eq
 800b2da:	2320      	moveq	r3, #32
 800b2dc:	4618      	mov	r0, r3
 800b2de:	4770      	bx	lr
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	e7e4      	b.n	800b2ae <__hi0bits+0xa>

0800b2e4 <__lo0bits>:
 800b2e4:	6803      	ldr	r3, [r0, #0]
 800b2e6:	f013 0207 	ands.w	r2, r3, #7
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	d00b      	beq.n	800b306 <__lo0bits+0x22>
 800b2ee:	07da      	lsls	r2, r3, #31
 800b2f0:	d423      	bmi.n	800b33a <__lo0bits+0x56>
 800b2f2:	0798      	lsls	r0, r3, #30
 800b2f4:	bf49      	itett	mi
 800b2f6:	085b      	lsrmi	r3, r3, #1
 800b2f8:	089b      	lsrpl	r3, r3, #2
 800b2fa:	2001      	movmi	r0, #1
 800b2fc:	600b      	strmi	r3, [r1, #0]
 800b2fe:	bf5c      	itt	pl
 800b300:	600b      	strpl	r3, [r1, #0]
 800b302:	2002      	movpl	r0, #2
 800b304:	4770      	bx	lr
 800b306:	b298      	uxth	r0, r3
 800b308:	b9a8      	cbnz	r0, 800b336 <__lo0bits+0x52>
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	2010      	movs	r0, #16
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	b90a      	cbnz	r2, 800b316 <__lo0bits+0x32>
 800b312:	3008      	adds	r0, #8
 800b314:	0a1b      	lsrs	r3, r3, #8
 800b316:	071a      	lsls	r2, r3, #28
 800b318:	bf04      	itt	eq
 800b31a:	091b      	lsreq	r3, r3, #4
 800b31c:	3004      	addeq	r0, #4
 800b31e:	079a      	lsls	r2, r3, #30
 800b320:	bf04      	itt	eq
 800b322:	089b      	lsreq	r3, r3, #2
 800b324:	3002      	addeq	r0, #2
 800b326:	07da      	lsls	r2, r3, #31
 800b328:	d403      	bmi.n	800b332 <__lo0bits+0x4e>
 800b32a:	085b      	lsrs	r3, r3, #1
 800b32c:	f100 0001 	add.w	r0, r0, #1
 800b330:	d005      	beq.n	800b33e <__lo0bits+0x5a>
 800b332:	600b      	str	r3, [r1, #0]
 800b334:	4770      	bx	lr
 800b336:	4610      	mov	r0, r2
 800b338:	e7e9      	b.n	800b30e <__lo0bits+0x2a>
 800b33a:	2000      	movs	r0, #0
 800b33c:	4770      	bx	lr
 800b33e:	2020      	movs	r0, #32
 800b340:	4770      	bx	lr
	...

0800b344 <__i2b>:
 800b344:	b510      	push	{r4, lr}
 800b346:	460c      	mov	r4, r1
 800b348:	2101      	movs	r1, #1
 800b34a:	f7ff ff03 	bl	800b154 <_Balloc>
 800b34e:	4602      	mov	r2, r0
 800b350:	b928      	cbnz	r0, 800b35e <__i2b+0x1a>
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <__i2b+0x24>)
 800b354:	4805      	ldr	r0, [pc, #20]	; (800b36c <__i2b+0x28>)
 800b356:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b35a:	f000 fce1 	bl	800bd20 <__assert_func>
 800b35e:	2301      	movs	r3, #1
 800b360:	6144      	str	r4, [r0, #20]
 800b362:	6103      	str	r3, [r0, #16]
 800b364:	bd10      	pop	{r4, pc}
 800b366:	bf00      	nop
 800b368:	0800ca1b 	.word	0x0800ca1b
 800b36c:	0800ca2c 	.word	0x0800ca2c

0800b370 <__multiply>:
 800b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	4691      	mov	r9, r2
 800b376:	690a      	ldr	r2, [r1, #16]
 800b378:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	bfb8      	it	lt
 800b380:	460b      	movlt	r3, r1
 800b382:	460c      	mov	r4, r1
 800b384:	bfbc      	itt	lt
 800b386:	464c      	movlt	r4, r9
 800b388:	4699      	movlt	r9, r3
 800b38a:	6927      	ldr	r7, [r4, #16]
 800b38c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b390:	68a3      	ldr	r3, [r4, #8]
 800b392:	6861      	ldr	r1, [r4, #4]
 800b394:	eb07 060a 	add.w	r6, r7, sl
 800b398:	42b3      	cmp	r3, r6
 800b39a:	b085      	sub	sp, #20
 800b39c:	bfb8      	it	lt
 800b39e:	3101      	addlt	r1, #1
 800b3a0:	f7ff fed8 	bl	800b154 <_Balloc>
 800b3a4:	b930      	cbnz	r0, 800b3b4 <__multiply+0x44>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	4b44      	ldr	r3, [pc, #272]	; (800b4bc <__multiply+0x14c>)
 800b3aa:	4845      	ldr	r0, [pc, #276]	; (800b4c0 <__multiply+0x150>)
 800b3ac:	f240 115d 	movw	r1, #349	; 0x15d
 800b3b0:	f000 fcb6 	bl	800bd20 <__assert_func>
 800b3b4:	f100 0514 	add.w	r5, r0, #20
 800b3b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3bc:	462b      	mov	r3, r5
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4543      	cmp	r3, r8
 800b3c2:	d321      	bcc.n	800b408 <__multiply+0x98>
 800b3c4:	f104 0314 	add.w	r3, r4, #20
 800b3c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b3cc:	f109 0314 	add.w	r3, r9, #20
 800b3d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b3d4:	9202      	str	r2, [sp, #8]
 800b3d6:	1b3a      	subs	r2, r7, r4
 800b3d8:	3a15      	subs	r2, #21
 800b3da:	f022 0203 	bic.w	r2, r2, #3
 800b3de:	3204      	adds	r2, #4
 800b3e0:	f104 0115 	add.w	r1, r4, #21
 800b3e4:	428f      	cmp	r7, r1
 800b3e6:	bf38      	it	cc
 800b3e8:	2204      	movcc	r2, #4
 800b3ea:	9201      	str	r2, [sp, #4]
 800b3ec:	9a02      	ldr	r2, [sp, #8]
 800b3ee:	9303      	str	r3, [sp, #12]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d80c      	bhi.n	800b40e <__multiply+0x9e>
 800b3f4:	2e00      	cmp	r6, #0
 800b3f6:	dd03      	ble.n	800b400 <__multiply+0x90>
 800b3f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d05a      	beq.n	800b4b6 <__multiply+0x146>
 800b400:	6106      	str	r6, [r0, #16]
 800b402:	b005      	add	sp, #20
 800b404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b408:	f843 2b04 	str.w	r2, [r3], #4
 800b40c:	e7d8      	b.n	800b3c0 <__multiply+0x50>
 800b40e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b412:	f1ba 0f00 	cmp.w	sl, #0
 800b416:	d024      	beq.n	800b462 <__multiply+0xf2>
 800b418:	f104 0e14 	add.w	lr, r4, #20
 800b41c:	46a9      	mov	r9, r5
 800b41e:	f04f 0c00 	mov.w	ip, #0
 800b422:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b426:	f8d9 1000 	ldr.w	r1, [r9]
 800b42a:	fa1f fb82 	uxth.w	fp, r2
 800b42e:	b289      	uxth	r1, r1
 800b430:	fb0a 110b 	mla	r1, sl, fp, r1
 800b434:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b438:	f8d9 2000 	ldr.w	r2, [r9]
 800b43c:	4461      	add	r1, ip
 800b43e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b442:	fb0a c20b 	mla	r2, sl, fp, ip
 800b446:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b44a:	b289      	uxth	r1, r1
 800b44c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b450:	4577      	cmp	r7, lr
 800b452:	f849 1b04 	str.w	r1, [r9], #4
 800b456:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b45a:	d8e2      	bhi.n	800b422 <__multiply+0xb2>
 800b45c:	9a01      	ldr	r2, [sp, #4]
 800b45e:	f845 c002 	str.w	ip, [r5, r2]
 800b462:	9a03      	ldr	r2, [sp, #12]
 800b464:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b468:	3304      	adds	r3, #4
 800b46a:	f1b9 0f00 	cmp.w	r9, #0
 800b46e:	d020      	beq.n	800b4b2 <__multiply+0x142>
 800b470:	6829      	ldr	r1, [r5, #0]
 800b472:	f104 0c14 	add.w	ip, r4, #20
 800b476:	46ae      	mov	lr, r5
 800b478:	f04f 0a00 	mov.w	sl, #0
 800b47c:	f8bc b000 	ldrh.w	fp, [ip]
 800b480:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b484:	fb09 220b 	mla	r2, r9, fp, r2
 800b488:	4492      	add	sl, r2
 800b48a:	b289      	uxth	r1, r1
 800b48c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b490:	f84e 1b04 	str.w	r1, [lr], #4
 800b494:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b498:	f8be 1000 	ldrh.w	r1, [lr]
 800b49c:	0c12      	lsrs	r2, r2, #16
 800b49e:	fb09 1102 	mla	r1, r9, r2, r1
 800b4a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b4a6:	4567      	cmp	r7, ip
 800b4a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4ac:	d8e6      	bhi.n	800b47c <__multiply+0x10c>
 800b4ae:	9a01      	ldr	r2, [sp, #4]
 800b4b0:	50a9      	str	r1, [r5, r2]
 800b4b2:	3504      	adds	r5, #4
 800b4b4:	e79a      	b.n	800b3ec <__multiply+0x7c>
 800b4b6:	3e01      	subs	r6, #1
 800b4b8:	e79c      	b.n	800b3f4 <__multiply+0x84>
 800b4ba:	bf00      	nop
 800b4bc:	0800ca1b 	.word	0x0800ca1b
 800b4c0:	0800ca2c 	.word	0x0800ca2c

0800b4c4 <__pow5mult>:
 800b4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c8:	4615      	mov	r5, r2
 800b4ca:	f012 0203 	ands.w	r2, r2, #3
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	d007      	beq.n	800b4e4 <__pow5mult+0x20>
 800b4d4:	4c25      	ldr	r4, [pc, #148]	; (800b56c <__pow5mult+0xa8>)
 800b4d6:	3a01      	subs	r2, #1
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4de:	f7ff fe9b 	bl	800b218 <__multadd>
 800b4e2:	4607      	mov	r7, r0
 800b4e4:	10ad      	asrs	r5, r5, #2
 800b4e6:	d03d      	beq.n	800b564 <__pow5mult+0xa0>
 800b4e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4ea:	b97c      	cbnz	r4, 800b50c <__pow5mult+0x48>
 800b4ec:	2010      	movs	r0, #16
 800b4ee:	f7ff fe29 	bl	800b144 <malloc>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	6270      	str	r0, [r6, #36]	; 0x24
 800b4f6:	b928      	cbnz	r0, 800b504 <__pow5mult+0x40>
 800b4f8:	4b1d      	ldr	r3, [pc, #116]	; (800b570 <__pow5mult+0xac>)
 800b4fa:	481e      	ldr	r0, [pc, #120]	; (800b574 <__pow5mult+0xb0>)
 800b4fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b500:	f000 fc0e 	bl	800bd20 <__assert_func>
 800b504:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b508:	6004      	str	r4, [r0, #0]
 800b50a:	60c4      	str	r4, [r0, #12]
 800b50c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b510:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b514:	b94c      	cbnz	r4, 800b52a <__pow5mult+0x66>
 800b516:	f240 2171 	movw	r1, #625	; 0x271
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7ff ff12 	bl	800b344 <__i2b>
 800b520:	2300      	movs	r3, #0
 800b522:	f8c8 0008 	str.w	r0, [r8, #8]
 800b526:	4604      	mov	r4, r0
 800b528:	6003      	str	r3, [r0, #0]
 800b52a:	f04f 0900 	mov.w	r9, #0
 800b52e:	07eb      	lsls	r3, r5, #31
 800b530:	d50a      	bpl.n	800b548 <__pow5mult+0x84>
 800b532:	4639      	mov	r1, r7
 800b534:	4622      	mov	r2, r4
 800b536:	4630      	mov	r0, r6
 800b538:	f7ff ff1a 	bl	800b370 <__multiply>
 800b53c:	4639      	mov	r1, r7
 800b53e:	4680      	mov	r8, r0
 800b540:	4630      	mov	r0, r6
 800b542:	f7ff fe47 	bl	800b1d4 <_Bfree>
 800b546:	4647      	mov	r7, r8
 800b548:	106d      	asrs	r5, r5, #1
 800b54a:	d00b      	beq.n	800b564 <__pow5mult+0xa0>
 800b54c:	6820      	ldr	r0, [r4, #0]
 800b54e:	b938      	cbnz	r0, 800b560 <__pow5mult+0x9c>
 800b550:	4622      	mov	r2, r4
 800b552:	4621      	mov	r1, r4
 800b554:	4630      	mov	r0, r6
 800b556:	f7ff ff0b 	bl	800b370 <__multiply>
 800b55a:	6020      	str	r0, [r4, #0]
 800b55c:	f8c0 9000 	str.w	r9, [r0]
 800b560:	4604      	mov	r4, r0
 800b562:	e7e4      	b.n	800b52e <__pow5mult+0x6a>
 800b564:	4638      	mov	r0, r7
 800b566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56a:	bf00      	nop
 800b56c:	0800cb78 	.word	0x0800cb78
 800b570:	0800c9a9 	.word	0x0800c9a9
 800b574:	0800ca2c 	.word	0x0800ca2c

0800b578 <__lshift>:
 800b578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b57c:	460c      	mov	r4, r1
 800b57e:	6849      	ldr	r1, [r1, #4]
 800b580:	6923      	ldr	r3, [r4, #16]
 800b582:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b586:	68a3      	ldr	r3, [r4, #8]
 800b588:	4607      	mov	r7, r0
 800b58a:	4691      	mov	r9, r2
 800b58c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b590:	f108 0601 	add.w	r6, r8, #1
 800b594:	42b3      	cmp	r3, r6
 800b596:	db0b      	blt.n	800b5b0 <__lshift+0x38>
 800b598:	4638      	mov	r0, r7
 800b59a:	f7ff fddb 	bl	800b154 <_Balloc>
 800b59e:	4605      	mov	r5, r0
 800b5a0:	b948      	cbnz	r0, 800b5b6 <__lshift+0x3e>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	4b2a      	ldr	r3, [pc, #168]	; (800b650 <__lshift+0xd8>)
 800b5a6:	482b      	ldr	r0, [pc, #172]	; (800b654 <__lshift+0xdc>)
 800b5a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5ac:	f000 fbb8 	bl	800bd20 <__assert_func>
 800b5b0:	3101      	adds	r1, #1
 800b5b2:	005b      	lsls	r3, r3, #1
 800b5b4:	e7ee      	b.n	800b594 <__lshift+0x1c>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f100 0114 	add.w	r1, r0, #20
 800b5bc:	f100 0210 	add.w	r2, r0, #16
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	4553      	cmp	r3, sl
 800b5c4:	db37      	blt.n	800b636 <__lshift+0xbe>
 800b5c6:	6920      	ldr	r0, [r4, #16]
 800b5c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5cc:	f104 0314 	add.w	r3, r4, #20
 800b5d0:	f019 091f 	ands.w	r9, r9, #31
 800b5d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b5dc:	d02f      	beq.n	800b63e <__lshift+0xc6>
 800b5de:	f1c9 0e20 	rsb	lr, r9, #32
 800b5e2:	468a      	mov	sl, r1
 800b5e4:	f04f 0c00 	mov.w	ip, #0
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	fa02 f209 	lsl.w	r2, r2, r9
 800b5ee:	ea42 020c 	orr.w	r2, r2, ip
 800b5f2:	f84a 2b04 	str.w	r2, [sl], #4
 800b5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5fa:	4298      	cmp	r0, r3
 800b5fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b600:	d8f2      	bhi.n	800b5e8 <__lshift+0x70>
 800b602:	1b03      	subs	r3, r0, r4
 800b604:	3b15      	subs	r3, #21
 800b606:	f023 0303 	bic.w	r3, r3, #3
 800b60a:	3304      	adds	r3, #4
 800b60c:	f104 0215 	add.w	r2, r4, #21
 800b610:	4290      	cmp	r0, r2
 800b612:	bf38      	it	cc
 800b614:	2304      	movcc	r3, #4
 800b616:	f841 c003 	str.w	ip, [r1, r3]
 800b61a:	f1bc 0f00 	cmp.w	ip, #0
 800b61e:	d001      	beq.n	800b624 <__lshift+0xac>
 800b620:	f108 0602 	add.w	r6, r8, #2
 800b624:	3e01      	subs	r6, #1
 800b626:	4638      	mov	r0, r7
 800b628:	612e      	str	r6, [r5, #16]
 800b62a:	4621      	mov	r1, r4
 800b62c:	f7ff fdd2 	bl	800b1d4 <_Bfree>
 800b630:	4628      	mov	r0, r5
 800b632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b636:	f842 0f04 	str.w	r0, [r2, #4]!
 800b63a:	3301      	adds	r3, #1
 800b63c:	e7c1      	b.n	800b5c2 <__lshift+0x4a>
 800b63e:	3904      	subs	r1, #4
 800b640:	f853 2b04 	ldr.w	r2, [r3], #4
 800b644:	f841 2f04 	str.w	r2, [r1, #4]!
 800b648:	4298      	cmp	r0, r3
 800b64a:	d8f9      	bhi.n	800b640 <__lshift+0xc8>
 800b64c:	e7ea      	b.n	800b624 <__lshift+0xac>
 800b64e:	bf00      	nop
 800b650:	0800ca1b 	.word	0x0800ca1b
 800b654:	0800ca2c 	.word	0x0800ca2c

0800b658 <__mcmp>:
 800b658:	b530      	push	{r4, r5, lr}
 800b65a:	6902      	ldr	r2, [r0, #16]
 800b65c:	690c      	ldr	r4, [r1, #16]
 800b65e:	1b12      	subs	r2, r2, r4
 800b660:	d10e      	bne.n	800b680 <__mcmp+0x28>
 800b662:	f100 0314 	add.w	r3, r0, #20
 800b666:	3114      	adds	r1, #20
 800b668:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b66c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b670:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b674:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d003      	beq.n	800b684 <__mcmp+0x2c>
 800b67c:	d305      	bcc.n	800b68a <__mcmp+0x32>
 800b67e:	2201      	movs	r2, #1
 800b680:	4610      	mov	r0, r2
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	4283      	cmp	r3, r0
 800b686:	d3f3      	bcc.n	800b670 <__mcmp+0x18>
 800b688:	e7fa      	b.n	800b680 <__mcmp+0x28>
 800b68a:	f04f 32ff 	mov.w	r2, #4294967295
 800b68e:	e7f7      	b.n	800b680 <__mcmp+0x28>

0800b690 <__mdiff>:
 800b690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	460c      	mov	r4, r1
 800b696:	4606      	mov	r6, r0
 800b698:	4611      	mov	r1, r2
 800b69a:	4620      	mov	r0, r4
 800b69c:	4690      	mov	r8, r2
 800b69e:	f7ff ffdb 	bl	800b658 <__mcmp>
 800b6a2:	1e05      	subs	r5, r0, #0
 800b6a4:	d110      	bne.n	800b6c8 <__mdiff+0x38>
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff fd53 	bl	800b154 <_Balloc>
 800b6ae:	b930      	cbnz	r0, 800b6be <__mdiff+0x2e>
 800b6b0:	4b3a      	ldr	r3, [pc, #232]	; (800b79c <__mdiff+0x10c>)
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	f240 2132 	movw	r1, #562	; 0x232
 800b6b8:	4839      	ldr	r0, [pc, #228]	; (800b7a0 <__mdiff+0x110>)
 800b6ba:	f000 fb31 	bl	800bd20 <__assert_func>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c8:	bfa4      	itt	ge
 800b6ca:	4643      	movge	r3, r8
 800b6cc:	46a0      	movge	r8, r4
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6d4:	bfa6      	itte	ge
 800b6d6:	461c      	movge	r4, r3
 800b6d8:	2500      	movge	r5, #0
 800b6da:	2501      	movlt	r5, #1
 800b6dc:	f7ff fd3a 	bl	800b154 <_Balloc>
 800b6e0:	b920      	cbnz	r0, 800b6ec <__mdiff+0x5c>
 800b6e2:	4b2e      	ldr	r3, [pc, #184]	; (800b79c <__mdiff+0x10c>)
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b6ea:	e7e5      	b.n	800b6b8 <__mdiff+0x28>
 800b6ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6f0:	6926      	ldr	r6, [r4, #16]
 800b6f2:	60c5      	str	r5, [r0, #12]
 800b6f4:	f104 0914 	add.w	r9, r4, #20
 800b6f8:	f108 0514 	add.w	r5, r8, #20
 800b6fc:	f100 0e14 	add.w	lr, r0, #20
 800b700:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b704:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b708:	f108 0210 	add.w	r2, r8, #16
 800b70c:	46f2      	mov	sl, lr
 800b70e:	2100      	movs	r1, #0
 800b710:	f859 3b04 	ldr.w	r3, [r9], #4
 800b714:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b718:	fa1f f883 	uxth.w	r8, r3
 800b71c:	fa11 f18b 	uxtah	r1, r1, fp
 800b720:	0c1b      	lsrs	r3, r3, #16
 800b722:	eba1 0808 	sub.w	r8, r1, r8
 800b726:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b72a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b72e:	fa1f f888 	uxth.w	r8, r8
 800b732:	1419      	asrs	r1, r3, #16
 800b734:	454e      	cmp	r6, r9
 800b736:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b73a:	f84a 3b04 	str.w	r3, [sl], #4
 800b73e:	d8e7      	bhi.n	800b710 <__mdiff+0x80>
 800b740:	1b33      	subs	r3, r6, r4
 800b742:	3b15      	subs	r3, #21
 800b744:	f023 0303 	bic.w	r3, r3, #3
 800b748:	3304      	adds	r3, #4
 800b74a:	3415      	adds	r4, #21
 800b74c:	42a6      	cmp	r6, r4
 800b74e:	bf38      	it	cc
 800b750:	2304      	movcc	r3, #4
 800b752:	441d      	add	r5, r3
 800b754:	4473      	add	r3, lr
 800b756:	469e      	mov	lr, r3
 800b758:	462e      	mov	r6, r5
 800b75a:	4566      	cmp	r6, ip
 800b75c:	d30e      	bcc.n	800b77c <__mdiff+0xec>
 800b75e:	f10c 0203 	add.w	r2, ip, #3
 800b762:	1b52      	subs	r2, r2, r5
 800b764:	f022 0203 	bic.w	r2, r2, #3
 800b768:	3d03      	subs	r5, #3
 800b76a:	45ac      	cmp	ip, r5
 800b76c:	bf38      	it	cc
 800b76e:	2200      	movcc	r2, #0
 800b770:	441a      	add	r2, r3
 800b772:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b776:	b17b      	cbz	r3, 800b798 <__mdiff+0x108>
 800b778:	6107      	str	r7, [r0, #16]
 800b77a:	e7a3      	b.n	800b6c4 <__mdiff+0x34>
 800b77c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b780:	fa11 f288 	uxtah	r2, r1, r8
 800b784:	1414      	asrs	r4, r2, #16
 800b786:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b78a:	b292      	uxth	r2, r2
 800b78c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b790:	f84e 2b04 	str.w	r2, [lr], #4
 800b794:	1421      	asrs	r1, r4, #16
 800b796:	e7e0      	b.n	800b75a <__mdiff+0xca>
 800b798:	3f01      	subs	r7, #1
 800b79a:	e7ea      	b.n	800b772 <__mdiff+0xe2>
 800b79c:	0800ca1b 	.word	0x0800ca1b
 800b7a0:	0800ca2c 	.word	0x0800ca2c

0800b7a4 <__d2b>:
 800b7a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	2101      	movs	r1, #1
 800b7ac:	ec57 6b10 	vmov	r6, r7, d0
 800b7b0:	4690      	mov	r8, r2
 800b7b2:	f7ff fccf 	bl	800b154 <_Balloc>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	b930      	cbnz	r0, 800b7c8 <__d2b+0x24>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	4b25      	ldr	r3, [pc, #148]	; (800b854 <__d2b+0xb0>)
 800b7be:	4826      	ldr	r0, [pc, #152]	; (800b858 <__d2b+0xb4>)
 800b7c0:	f240 310a 	movw	r1, #778	; 0x30a
 800b7c4:	f000 faac 	bl	800bd20 <__assert_func>
 800b7c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7d0:	bb35      	cbnz	r5, 800b820 <__d2b+0x7c>
 800b7d2:	2e00      	cmp	r6, #0
 800b7d4:	9301      	str	r3, [sp, #4]
 800b7d6:	d028      	beq.n	800b82a <__d2b+0x86>
 800b7d8:	4668      	mov	r0, sp
 800b7da:	9600      	str	r6, [sp, #0]
 800b7dc:	f7ff fd82 	bl	800b2e4 <__lo0bits>
 800b7e0:	9900      	ldr	r1, [sp, #0]
 800b7e2:	b300      	cbz	r0, 800b826 <__d2b+0x82>
 800b7e4:	9a01      	ldr	r2, [sp, #4]
 800b7e6:	f1c0 0320 	rsb	r3, r0, #32
 800b7ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ee:	430b      	orrs	r3, r1
 800b7f0:	40c2      	lsrs	r2, r0
 800b7f2:	6163      	str	r3, [r4, #20]
 800b7f4:	9201      	str	r2, [sp, #4]
 800b7f6:	9b01      	ldr	r3, [sp, #4]
 800b7f8:	61a3      	str	r3, [r4, #24]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	bf14      	ite	ne
 800b7fe:	2202      	movne	r2, #2
 800b800:	2201      	moveq	r2, #1
 800b802:	6122      	str	r2, [r4, #16]
 800b804:	b1d5      	cbz	r5, 800b83c <__d2b+0x98>
 800b806:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b80a:	4405      	add	r5, r0
 800b80c:	f8c9 5000 	str.w	r5, [r9]
 800b810:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b814:	f8c8 0000 	str.w	r0, [r8]
 800b818:	4620      	mov	r0, r4
 800b81a:	b003      	add	sp, #12
 800b81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b824:	e7d5      	b.n	800b7d2 <__d2b+0x2e>
 800b826:	6161      	str	r1, [r4, #20]
 800b828:	e7e5      	b.n	800b7f6 <__d2b+0x52>
 800b82a:	a801      	add	r0, sp, #4
 800b82c:	f7ff fd5a 	bl	800b2e4 <__lo0bits>
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	6163      	str	r3, [r4, #20]
 800b834:	2201      	movs	r2, #1
 800b836:	6122      	str	r2, [r4, #16]
 800b838:	3020      	adds	r0, #32
 800b83a:	e7e3      	b.n	800b804 <__d2b+0x60>
 800b83c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b844:	f8c9 0000 	str.w	r0, [r9]
 800b848:	6918      	ldr	r0, [r3, #16]
 800b84a:	f7ff fd2b 	bl	800b2a4 <__hi0bits>
 800b84e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b852:	e7df      	b.n	800b814 <__d2b+0x70>
 800b854:	0800ca1b 	.word	0x0800ca1b
 800b858:	0800ca2c 	.word	0x0800ca2c

0800b85c <_calloc_r>:
 800b85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b85e:	fba1 2402 	umull	r2, r4, r1, r2
 800b862:	b94c      	cbnz	r4, 800b878 <_calloc_r+0x1c>
 800b864:	4611      	mov	r1, r2
 800b866:	9201      	str	r2, [sp, #4]
 800b868:	f000 f87a 	bl	800b960 <_malloc_r>
 800b86c:	9a01      	ldr	r2, [sp, #4]
 800b86e:	4605      	mov	r5, r0
 800b870:	b930      	cbnz	r0, 800b880 <_calloc_r+0x24>
 800b872:	4628      	mov	r0, r5
 800b874:	b003      	add	sp, #12
 800b876:	bd30      	pop	{r4, r5, pc}
 800b878:	220c      	movs	r2, #12
 800b87a:	6002      	str	r2, [r0, #0]
 800b87c:	2500      	movs	r5, #0
 800b87e:	e7f8      	b.n	800b872 <_calloc_r+0x16>
 800b880:	4621      	mov	r1, r4
 800b882:	f7fe f94f 	bl	8009b24 <memset>
 800b886:	e7f4      	b.n	800b872 <_calloc_r+0x16>

0800b888 <_free_r>:
 800b888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b88a:	2900      	cmp	r1, #0
 800b88c:	d044      	beq.n	800b918 <_free_r+0x90>
 800b88e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b892:	9001      	str	r0, [sp, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f1a1 0404 	sub.w	r4, r1, #4
 800b89a:	bfb8      	it	lt
 800b89c:	18e4      	addlt	r4, r4, r3
 800b89e:	f000 fa9b 	bl	800bdd8 <__malloc_lock>
 800b8a2:	4a1e      	ldr	r2, [pc, #120]	; (800b91c <_free_r+0x94>)
 800b8a4:	9801      	ldr	r0, [sp, #4]
 800b8a6:	6813      	ldr	r3, [r2, #0]
 800b8a8:	b933      	cbnz	r3, 800b8b8 <_free_r+0x30>
 800b8aa:	6063      	str	r3, [r4, #4]
 800b8ac:	6014      	str	r4, [r2, #0]
 800b8ae:	b003      	add	sp, #12
 800b8b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8b4:	f000 ba96 	b.w	800bde4 <__malloc_unlock>
 800b8b8:	42a3      	cmp	r3, r4
 800b8ba:	d908      	bls.n	800b8ce <_free_r+0x46>
 800b8bc:	6825      	ldr	r5, [r4, #0]
 800b8be:	1961      	adds	r1, r4, r5
 800b8c0:	428b      	cmp	r3, r1
 800b8c2:	bf01      	itttt	eq
 800b8c4:	6819      	ldreq	r1, [r3, #0]
 800b8c6:	685b      	ldreq	r3, [r3, #4]
 800b8c8:	1949      	addeq	r1, r1, r5
 800b8ca:	6021      	streq	r1, [r4, #0]
 800b8cc:	e7ed      	b.n	800b8aa <_free_r+0x22>
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	b10b      	cbz	r3, 800b8d8 <_free_r+0x50>
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	d9fa      	bls.n	800b8ce <_free_r+0x46>
 800b8d8:	6811      	ldr	r1, [r2, #0]
 800b8da:	1855      	adds	r5, r2, r1
 800b8dc:	42a5      	cmp	r5, r4
 800b8de:	d10b      	bne.n	800b8f8 <_free_r+0x70>
 800b8e0:	6824      	ldr	r4, [r4, #0]
 800b8e2:	4421      	add	r1, r4
 800b8e4:	1854      	adds	r4, r2, r1
 800b8e6:	42a3      	cmp	r3, r4
 800b8e8:	6011      	str	r1, [r2, #0]
 800b8ea:	d1e0      	bne.n	800b8ae <_free_r+0x26>
 800b8ec:	681c      	ldr	r4, [r3, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	6053      	str	r3, [r2, #4]
 800b8f2:	4421      	add	r1, r4
 800b8f4:	6011      	str	r1, [r2, #0]
 800b8f6:	e7da      	b.n	800b8ae <_free_r+0x26>
 800b8f8:	d902      	bls.n	800b900 <_free_r+0x78>
 800b8fa:	230c      	movs	r3, #12
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	e7d6      	b.n	800b8ae <_free_r+0x26>
 800b900:	6825      	ldr	r5, [r4, #0]
 800b902:	1961      	adds	r1, r4, r5
 800b904:	428b      	cmp	r3, r1
 800b906:	bf04      	itt	eq
 800b908:	6819      	ldreq	r1, [r3, #0]
 800b90a:	685b      	ldreq	r3, [r3, #4]
 800b90c:	6063      	str	r3, [r4, #4]
 800b90e:	bf04      	itt	eq
 800b910:	1949      	addeq	r1, r1, r5
 800b912:	6021      	streq	r1, [r4, #0]
 800b914:	6054      	str	r4, [r2, #4]
 800b916:	e7ca      	b.n	800b8ae <_free_r+0x26>
 800b918:	b003      	add	sp, #12
 800b91a:	bd30      	pop	{r4, r5, pc}
 800b91c:	20002090 	.word	0x20002090

0800b920 <sbrk_aligned>:
 800b920:	b570      	push	{r4, r5, r6, lr}
 800b922:	4e0e      	ldr	r6, [pc, #56]	; (800b95c <sbrk_aligned+0x3c>)
 800b924:	460c      	mov	r4, r1
 800b926:	6831      	ldr	r1, [r6, #0]
 800b928:	4605      	mov	r5, r0
 800b92a:	b911      	cbnz	r1, 800b932 <sbrk_aligned+0x12>
 800b92c:	f000 f9e8 	bl	800bd00 <_sbrk_r>
 800b930:	6030      	str	r0, [r6, #0]
 800b932:	4621      	mov	r1, r4
 800b934:	4628      	mov	r0, r5
 800b936:	f000 f9e3 	bl	800bd00 <_sbrk_r>
 800b93a:	1c43      	adds	r3, r0, #1
 800b93c:	d00a      	beq.n	800b954 <sbrk_aligned+0x34>
 800b93e:	1cc4      	adds	r4, r0, #3
 800b940:	f024 0403 	bic.w	r4, r4, #3
 800b944:	42a0      	cmp	r0, r4
 800b946:	d007      	beq.n	800b958 <sbrk_aligned+0x38>
 800b948:	1a21      	subs	r1, r4, r0
 800b94a:	4628      	mov	r0, r5
 800b94c:	f000 f9d8 	bl	800bd00 <_sbrk_r>
 800b950:	3001      	adds	r0, #1
 800b952:	d101      	bne.n	800b958 <sbrk_aligned+0x38>
 800b954:	f04f 34ff 	mov.w	r4, #4294967295
 800b958:	4620      	mov	r0, r4
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	20002094 	.word	0x20002094

0800b960 <_malloc_r>:
 800b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b964:	1ccd      	adds	r5, r1, #3
 800b966:	f025 0503 	bic.w	r5, r5, #3
 800b96a:	3508      	adds	r5, #8
 800b96c:	2d0c      	cmp	r5, #12
 800b96e:	bf38      	it	cc
 800b970:	250c      	movcc	r5, #12
 800b972:	2d00      	cmp	r5, #0
 800b974:	4607      	mov	r7, r0
 800b976:	db01      	blt.n	800b97c <_malloc_r+0x1c>
 800b978:	42a9      	cmp	r1, r5
 800b97a:	d905      	bls.n	800b988 <_malloc_r+0x28>
 800b97c:	230c      	movs	r3, #12
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	2600      	movs	r6, #0
 800b982:	4630      	mov	r0, r6
 800b984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b988:	4e2e      	ldr	r6, [pc, #184]	; (800ba44 <_malloc_r+0xe4>)
 800b98a:	f000 fa25 	bl	800bdd8 <__malloc_lock>
 800b98e:	6833      	ldr	r3, [r6, #0]
 800b990:	461c      	mov	r4, r3
 800b992:	bb34      	cbnz	r4, 800b9e2 <_malloc_r+0x82>
 800b994:	4629      	mov	r1, r5
 800b996:	4638      	mov	r0, r7
 800b998:	f7ff ffc2 	bl	800b920 <sbrk_aligned>
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	4604      	mov	r4, r0
 800b9a0:	d14d      	bne.n	800ba3e <_malloc_r+0xde>
 800b9a2:	6834      	ldr	r4, [r6, #0]
 800b9a4:	4626      	mov	r6, r4
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	d140      	bne.n	800ba2c <_malloc_r+0xcc>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	4638      	mov	r0, r7
 800b9b0:	eb04 0803 	add.w	r8, r4, r3
 800b9b4:	f000 f9a4 	bl	800bd00 <_sbrk_r>
 800b9b8:	4580      	cmp	r8, r0
 800b9ba:	d13a      	bne.n	800ba32 <_malloc_r+0xd2>
 800b9bc:	6821      	ldr	r1, [r4, #0]
 800b9be:	3503      	adds	r5, #3
 800b9c0:	1a6d      	subs	r5, r5, r1
 800b9c2:	f025 0503 	bic.w	r5, r5, #3
 800b9c6:	3508      	adds	r5, #8
 800b9c8:	2d0c      	cmp	r5, #12
 800b9ca:	bf38      	it	cc
 800b9cc:	250c      	movcc	r5, #12
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4638      	mov	r0, r7
 800b9d2:	f7ff ffa5 	bl	800b920 <sbrk_aligned>
 800b9d6:	3001      	adds	r0, #1
 800b9d8:	d02b      	beq.n	800ba32 <_malloc_r+0xd2>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	442b      	add	r3, r5
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	e00e      	b.n	800ba00 <_malloc_r+0xa0>
 800b9e2:	6822      	ldr	r2, [r4, #0]
 800b9e4:	1b52      	subs	r2, r2, r5
 800b9e6:	d41e      	bmi.n	800ba26 <_malloc_r+0xc6>
 800b9e8:	2a0b      	cmp	r2, #11
 800b9ea:	d916      	bls.n	800ba1a <_malloc_r+0xba>
 800b9ec:	1961      	adds	r1, r4, r5
 800b9ee:	42a3      	cmp	r3, r4
 800b9f0:	6025      	str	r5, [r4, #0]
 800b9f2:	bf18      	it	ne
 800b9f4:	6059      	strne	r1, [r3, #4]
 800b9f6:	6863      	ldr	r3, [r4, #4]
 800b9f8:	bf08      	it	eq
 800b9fa:	6031      	streq	r1, [r6, #0]
 800b9fc:	5162      	str	r2, [r4, r5]
 800b9fe:	604b      	str	r3, [r1, #4]
 800ba00:	4638      	mov	r0, r7
 800ba02:	f104 060b 	add.w	r6, r4, #11
 800ba06:	f000 f9ed 	bl	800bde4 <__malloc_unlock>
 800ba0a:	f026 0607 	bic.w	r6, r6, #7
 800ba0e:	1d23      	adds	r3, r4, #4
 800ba10:	1af2      	subs	r2, r6, r3
 800ba12:	d0b6      	beq.n	800b982 <_malloc_r+0x22>
 800ba14:	1b9b      	subs	r3, r3, r6
 800ba16:	50a3      	str	r3, [r4, r2]
 800ba18:	e7b3      	b.n	800b982 <_malloc_r+0x22>
 800ba1a:	6862      	ldr	r2, [r4, #4]
 800ba1c:	42a3      	cmp	r3, r4
 800ba1e:	bf0c      	ite	eq
 800ba20:	6032      	streq	r2, [r6, #0]
 800ba22:	605a      	strne	r2, [r3, #4]
 800ba24:	e7ec      	b.n	800ba00 <_malloc_r+0xa0>
 800ba26:	4623      	mov	r3, r4
 800ba28:	6864      	ldr	r4, [r4, #4]
 800ba2a:	e7b2      	b.n	800b992 <_malloc_r+0x32>
 800ba2c:	4634      	mov	r4, r6
 800ba2e:	6876      	ldr	r6, [r6, #4]
 800ba30:	e7b9      	b.n	800b9a6 <_malloc_r+0x46>
 800ba32:	230c      	movs	r3, #12
 800ba34:	603b      	str	r3, [r7, #0]
 800ba36:	4638      	mov	r0, r7
 800ba38:	f000 f9d4 	bl	800bde4 <__malloc_unlock>
 800ba3c:	e7a1      	b.n	800b982 <_malloc_r+0x22>
 800ba3e:	6025      	str	r5, [r4, #0]
 800ba40:	e7de      	b.n	800ba00 <_malloc_r+0xa0>
 800ba42:	bf00      	nop
 800ba44:	20002090 	.word	0x20002090

0800ba48 <__ssputs_r>:
 800ba48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba4c:	688e      	ldr	r6, [r1, #8]
 800ba4e:	429e      	cmp	r6, r3
 800ba50:	4682      	mov	sl, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	4690      	mov	r8, r2
 800ba56:	461f      	mov	r7, r3
 800ba58:	d838      	bhi.n	800bacc <__ssputs_r+0x84>
 800ba5a:	898a      	ldrh	r2, [r1, #12]
 800ba5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba60:	d032      	beq.n	800bac8 <__ssputs_r+0x80>
 800ba62:	6825      	ldr	r5, [r4, #0]
 800ba64:	6909      	ldr	r1, [r1, #16]
 800ba66:	eba5 0901 	sub.w	r9, r5, r1
 800ba6a:	6965      	ldr	r5, [r4, #20]
 800ba6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba74:	3301      	adds	r3, #1
 800ba76:	444b      	add	r3, r9
 800ba78:	106d      	asrs	r5, r5, #1
 800ba7a:	429d      	cmp	r5, r3
 800ba7c:	bf38      	it	cc
 800ba7e:	461d      	movcc	r5, r3
 800ba80:	0553      	lsls	r3, r2, #21
 800ba82:	d531      	bpl.n	800bae8 <__ssputs_r+0xa0>
 800ba84:	4629      	mov	r1, r5
 800ba86:	f7ff ff6b 	bl	800b960 <_malloc_r>
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	b950      	cbnz	r0, 800baa4 <__ssputs_r+0x5c>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	f8ca 3000 	str.w	r3, [sl]
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba9a:	81a3      	strh	r3, [r4, #12]
 800ba9c:	f04f 30ff 	mov.w	r0, #4294967295
 800baa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa4:	6921      	ldr	r1, [r4, #16]
 800baa6:	464a      	mov	r2, r9
 800baa8:	f7fe f82e 	bl	8009b08 <memcpy>
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	6126      	str	r6, [r4, #16]
 800baba:	6165      	str	r5, [r4, #20]
 800babc:	444e      	add	r6, r9
 800babe:	eba5 0509 	sub.w	r5, r5, r9
 800bac2:	6026      	str	r6, [r4, #0]
 800bac4:	60a5      	str	r5, [r4, #8]
 800bac6:	463e      	mov	r6, r7
 800bac8:	42be      	cmp	r6, r7
 800baca:	d900      	bls.n	800bace <__ssputs_r+0x86>
 800bacc:	463e      	mov	r6, r7
 800bace:	6820      	ldr	r0, [r4, #0]
 800bad0:	4632      	mov	r2, r6
 800bad2:	4641      	mov	r1, r8
 800bad4:	f000 f966 	bl	800bda4 <memmove>
 800bad8:	68a3      	ldr	r3, [r4, #8]
 800bada:	1b9b      	subs	r3, r3, r6
 800badc:	60a3      	str	r3, [r4, #8]
 800bade:	6823      	ldr	r3, [r4, #0]
 800bae0:	4433      	add	r3, r6
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	2000      	movs	r0, #0
 800bae6:	e7db      	b.n	800baa0 <__ssputs_r+0x58>
 800bae8:	462a      	mov	r2, r5
 800baea:	f000 f981 	bl	800bdf0 <_realloc_r>
 800baee:	4606      	mov	r6, r0
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d1e1      	bne.n	800bab8 <__ssputs_r+0x70>
 800baf4:	6921      	ldr	r1, [r4, #16]
 800baf6:	4650      	mov	r0, sl
 800baf8:	f7ff fec6 	bl	800b888 <_free_r>
 800bafc:	e7c7      	b.n	800ba8e <__ssputs_r+0x46>
	...

0800bb00 <_svfiprintf_r>:
 800bb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb04:	4698      	mov	r8, r3
 800bb06:	898b      	ldrh	r3, [r1, #12]
 800bb08:	061b      	lsls	r3, r3, #24
 800bb0a:	b09d      	sub	sp, #116	; 0x74
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	460d      	mov	r5, r1
 800bb10:	4614      	mov	r4, r2
 800bb12:	d50e      	bpl.n	800bb32 <_svfiprintf_r+0x32>
 800bb14:	690b      	ldr	r3, [r1, #16]
 800bb16:	b963      	cbnz	r3, 800bb32 <_svfiprintf_r+0x32>
 800bb18:	2140      	movs	r1, #64	; 0x40
 800bb1a:	f7ff ff21 	bl	800b960 <_malloc_r>
 800bb1e:	6028      	str	r0, [r5, #0]
 800bb20:	6128      	str	r0, [r5, #16]
 800bb22:	b920      	cbnz	r0, 800bb2e <_svfiprintf_r+0x2e>
 800bb24:	230c      	movs	r3, #12
 800bb26:	603b      	str	r3, [r7, #0]
 800bb28:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2c:	e0d1      	b.n	800bcd2 <_svfiprintf_r+0x1d2>
 800bb2e:	2340      	movs	r3, #64	; 0x40
 800bb30:	616b      	str	r3, [r5, #20]
 800bb32:	2300      	movs	r3, #0
 800bb34:	9309      	str	r3, [sp, #36]	; 0x24
 800bb36:	2320      	movs	r3, #32
 800bb38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb40:	2330      	movs	r3, #48	; 0x30
 800bb42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bcec <_svfiprintf_r+0x1ec>
 800bb46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb4a:	f04f 0901 	mov.w	r9, #1
 800bb4e:	4623      	mov	r3, r4
 800bb50:	469a      	mov	sl, r3
 800bb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb56:	b10a      	cbz	r2, 800bb5c <_svfiprintf_r+0x5c>
 800bb58:	2a25      	cmp	r2, #37	; 0x25
 800bb5a:	d1f9      	bne.n	800bb50 <_svfiprintf_r+0x50>
 800bb5c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb60:	d00b      	beq.n	800bb7a <_svfiprintf_r+0x7a>
 800bb62:	465b      	mov	r3, fp
 800bb64:	4622      	mov	r2, r4
 800bb66:	4629      	mov	r1, r5
 800bb68:	4638      	mov	r0, r7
 800bb6a:	f7ff ff6d 	bl	800ba48 <__ssputs_r>
 800bb6e:	3001      	adds	r0, #1
 800bb70:	f000 80aa 	beq.w	800bcc8 <_svfiprintf_r+0x1c8>
 800bb74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb76:	445a      	add	r2, fp
 800bb78:	9209      	str	r2, [sp, #36]	; 0x24
 800bb7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f000 80a2 	beq.w	800bcc8 <_svfiprintf_r+0x1c8>
 800bb84:	2300      	movs	r3, #0
 800bb86:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb8e:	f10a 0a01 	add.w	sl, sl, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	9307      	str	r3, [sp, #28]
 800bb96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb9a:	931a      	str	r3, [sp, #104]	; 0x68
 800bb9c:	4654      	mov	r4, sl
 800bb9e:	2205      	movs	r2, #5
 800bba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba4:	4851      	ldr	r0, [pc, #324]	; (800bcec <_svfiprintf_r+0x1ec>)
 800bba6:	f7f4 fb1b 	bl	80001e0 <memchr>
 800bbaa:	9a04      	ldr	r2, [sp, #16]
 800bbac:	b9d8      	cbnz	r0, 800bbe6 <_svfiprintf_r+0xe6>
 800bbae:	06d0      	lsls	r0, r2, #27
 800bbb0:	bf44      	itt	mi
 800bbb2:	2320      	movmi	r3, #32
 800bbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb8:	0711      	lsls	r1, r2, #28
 800bbba:	bf44      	itt	mi
 800bbbc:	232b      	movmi	r3, #43	; 0x2b
 800bbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc8:	d015      	beq.n	800bbf6 <_svfiprintf_r+0xf6>
 800bbca:	9a07      	ldr	r2, [sp, #28]
 800bbcc:	4654      	mov	r4, sl
 800bbce:	2000      	movs	r0, #0
 800bbd0:	f04f 0c0a 	mov.w	ip, #10
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbda:	3b30      	subs	r3, #48	; 0x30
 800bbdc:	2b09      	cmp	r3, #9
 800bbde:	d94e      	bls.n	800bc7e <_svfiprintf_r+0x17e>
 800bbe0:	b1b0      	cbz	r0, 800bc10 <_svfiprintf_r+0x110>
 800bbe2:	9207      	str	r2, [sp, #28]
 800bbe4:	e014      	b.n	800bc10 <_svfiprintf_r+0x110>
 800bbe6:	eba0 0308 	sub.w	r3, r0, r8
 800bbea:	fa09 f303 	lsl.w	r3, r9, r3
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	46a2      	mov	sl, r4
 800bbf4:	e7d2      	b.n	800bb9c <_svfiprintf_r+0x9c>
 800bbf6:	9b03      	ldr	r3, [sp, #12]
 800bbf8:	1d19      	adds	r1, r3, #4
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	9103      	str	r1, [sp, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bfbb      	ittet	lt
 800bc02:	425b      	neglt	r3, r3
 800bc04:	f042 0202 	orrlt.w	r2, r2, #2
 800bc08:	9307      	strge	r3, [sp, #28]
 800bc0a:	9307      	strlt	r3, [sp, #28]
 800bc0c:	bfb8      	it	lt
 800bc0e:	9204      	strlt	r2, [sp, #16]
 800bc10:	7823      	ldrb	r3, [r4, #0]
 800bc12:	2b2e      	cmp	r3, #46	; 0x2e
 800bc14:	d10c      	bne.n	800bc30 <_svfiprintf_r+0x130>
 800bc16:	7863      	ldrb	r3, [r4, #1]
 800bc18:	2b2a      	cmp	r3, #42	; 0x2a
 800bc1a:	d135      	bne.n	800bc88 <_svfiprintf_r+0x188>
 800bc1c:	9b03      	ldr	r3, [sp, #12]
 800bc1e:	1d1a      	adds	r2, r3, #4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	9203      	str	r2, [sp, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	bfb8      	it	lt
 800bc28:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc2c:	3402      	adds	r4, #2
 800bc2e:	9305      	str	r3, [sp, #20]
 800bc30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bcfc <_svfiprintf_r+0x1fc>
 800bc34:	7821      	ldrb	r1, [r4, #0]
 800bc36:	2203      	movs	r2, #3
 800bc38:	4650      	mov	r0, sl
 800bc3a:	f7f4 fad1 	bl	80001e0 <memchr>
 800bc3e:	b140      	cbz	r0, 800bc52 <_svfiprintf_r+0x152>
 800bc40:	2340      	movs	r3, #64	; 0x40
 800bc42:	eba0 000a 	sub.w	r0, r0, sl
 800bc46:	fa03 f000 	lsl.w	r0, r3, r0
 800bc4a:	9b04      	ldr	r3, [sp, #16]
 800bc4c:	4303      	orrs	r3, r0
 800bc4e:	3401      	adds	r4, #1
 800bc50:	9304      	str	r3, [sp, #16]
 800bc52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc56:	4826      	ldr	r0, [pc, #152]	; (800bcf0 <_svfiprintf_r+0x1f0>)
 800bc58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc5c:	2206      	movs	r2, #6
 800bc5e:	f7f4 fabf 	bl	80001e0 <memchr>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d038      	beq.n	800bcd8 <_svfiprintf_r+0x1d8>
 800bc66:	4b23      	ldr	r3, [pc, #140]	; (800bcf4 <_svfiprintf_r+0x1f4>)
 800bc68:	bb1b      	cbnz	r3, 800bcb2 <_svfiprintf_r+0x1b2>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	3307      	adds	r3, #7
 800bc6e:	f023 0307 	bic.w	r3, r3, #7
 800bc72:	3308      	adds	r3, #8
 800bc74:	9303      	str	r3, [sp, #12]
 800bc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc78:	4433      	add	r3, r6
 800bc7a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc7c:	e767      	b.n	800bb4e <_svfiprintf_r+0x4e>
 800bc7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc82:	460c      	mov	r4, r1
 800bc84:	2001      	movs	r0, #1
 800bc86:	e7a5      	b.n	800bbd4 <_svfiprintf_r+0xd4>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	3401      	adds	r4, #1
 800bc8c:	9305      	str	r3, [sp, #20]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	f04f 0c0a 	mov.w	ip, #10
 800bc94:	4620      	mov	r0, r4
 800bc96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc9a:	3a30      	subs	r2, #48	; 0x30
 800bc9c:	2a09      	cmp	r2, #9
 800bc9e:	d903      	bls.n	800bca8 <_svfiprintf_r+0x1a8>
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d0c5      	beq.n	800bc30 <_svfiprintf_r+0x130>
 800bca4:	9105      	str	r1, [sp, #20]
 800bca6:	e7c3      	b.n	800bc30 <_svfiprintf_r+0x130>
 800bca8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcac:	4604      	mov	r4, r0
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e7f0      	b.n	800bc94 <_svfiprintf_r+0x194>
 800bcb2:	ab03      	add	r3, sp, #12
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	462a      	mov	r2, r5
 800bcb8:	4b0f      	ldr	r3, [pc, #60]	; (800bcf8 <_svfiprintf_r+0x1f8>)
 800bcba:	a904      	add	r1, sp, #16
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7fd ffd9 	bl	8009c74 <_printf_float>
 800bcc2:	1c42      	adds	r2, r0, #1
 800bcc4:	4606      	mov	r6, r0
 800bcc6:	d1d6      	bne.n	800bc76 <_svfiprintf_r+0x176>
 800bcc8:	89ab      	ldrh	r3, [r5, #12]
 800bcca:	065b      	lsls	r3, r3, #25
 800bccc:	f53f af2c 	bmi.w	800bb28 <_svfiprintf_r+0x28>
 800bcd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcd2:	b01d      	add	sp, #116	; 0x74
 800bcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd8:	ab03      	add	r3, sp, #12
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	462a      	mov	r2, r5
 800bcde:	4b06      	ldr	r3, [pc, #24]	; (800bcf8 <_svfiprintf_r+0x1f8>)
 800bce0:	a904      	add	r1, sp, #16
 800bce2:	4638      	mov	r0, r7
 800bce4:	f7fe fa6a 	bl	800a1bc <_printf_i>
 800bce8:	e7eb      	b.n	800bcc2 <_svfiprintf_r+0x1c2>
 800bcea:	bf00      	nop
 800bcec:	0800cb84 	.word	0x0800cb84
 800bcf0:	0800cb8e 	.word	0x0800cb8e
 800bcf4:	08009c75 	.word	0x08009c75
 800bcf8:	0800ba49 	.word	0x0800ba49
 800bcfc:	0800cb8a 	.word	0x0800cb8a

0800bd00 <_sbrk_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4d06      	ldr	r5, [pc, #24]	; (800bd1c <_sbrk_r+0x1c>)
 800bd04:	2300      	movs	r3, #0
 800bd06:	4604      	mov	r4, r0
 800bd08:	4608      	mov	r0, r1
 800bd0a:	602b      	str	r3, [r5, #0]
 800bd0c:	f7f5 fd98 	bl	8001840 <_sbrk>
 800bd10:	1c43      	adds	r3, r0, #1
 800bd12:	d102      	bne.n	800bd1a <_sbrk_r+0x1a>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	b103      	cbz	r3, 800bd1a <_sbrk_r+0x1a>
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	bd38      	pop	{r3, r4, r5, pc}
 800bd1c:	20002098 	.word	0x20002098

0800bd20 <__assert_func>:
 800bd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd22:	4614      	mov	r4, r2
 800bd24:	461a      	mov	r2, r3
 800bd26:	4b09      	ldr	r3, [pc, #36]	; (800bd4c <__assert_func+0x2c>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	68d8      	ldr	r0, [r3, #12]
 800bd2e:	b14c      	cbz	r4, 800bd44 <__assert_func+0x24>
 800bd30:	4b07      	ldr	r3, [pc, #28]	; (800bd50 <__assert_func+0x30>)
 800bd32:	9100      	str	r1, [sp, #0]
 800bd34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd38:	4906      	ldr	r1, [pc, #24]	; (800bd54 <__assert_func+0x34>)
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	f000 f80e 	bl	800bd5c <fiprintf>
 800bd40:	f000 faac 	bl	800c29c <abort>
 800bd44:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <__assert_func+0x38>)
 800bd46:	461c      	mov	r4, r3
 800bd48:	e7f3      	b.n	800bd32 <__assert_func+0x12>
 800bd4a:	bf00      	nop
 800bd4c:	200000fc 	.word	0x200000fc
 800bd50:	0800cb95 	.word	0x0800cb95
 800bd54:	0800cba2 	.word	0x0800cba2
 800bd58:	0800cbd0 	.word	0x0800cbd0

0800bd5c <fiprintf>:
 800bd5c:	b40e      	push	{r1, r2, r3}
 800bd5e:	b503      	push	{r0, r1, lr}
 800bd60:	4601      	mov	r1, r0
 800bd62:	ab03      	add	r3, sp, #12
 800bd64:	4805      	ldr	r0, [pc, #20]	; (800bd7c <fiprintf+0x20>)
 800bd66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd6a:	6800      	ldr	r0, [r0, #0]
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	f000 f897 	bl	800bea0 <_vfiprintf_r>
 800bd72:	b002      	add	sp, #8
 800bd74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd78:	b003      	add	sp, #12
 800bd7a:	4770      	bx	lr
 800bd7c:	200000fc 	.word	0x200000fc

0800bd80 <__ascii_mbtowc>:
 800bd80:	b082      	sub	sp, #8
 800bd82:	b901      	cbnz	r1, 800bd86 <__ascii_mbtowc+0x6>
 800bd84:	a901      	add	r1, sp, #4
 800bd86:	b142      	cbz	r2, 800bd9a <__ascii_mbtowc+0x1a>
 800bd88:	b14b      	cbz	r3, 800bd9e <__ascii_mbtowc+0x1e>
 800bd8a:	7813      	ldrb	r3, [r2, #0]
 800bd8c:	600b      	str	r3, [r1, #0]
 800bd8e:	7812      	ldrb	r2, [r2, #0]
 800bd90:	1e10      	subs	r0, r2, #0
 800bd92:	bf18      	it	ne
 800bd94:	2001      	movne	r0, #1
 800bd96:	b002      	add	sp, #8
 800bd98:	4770      	bx	lr
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	e7fb      	b.n	800bd96 <__ascii_mbtowc+0x16>
 800bd9e:	f06f 0001 	mvn.w	r0, #1
 800bda2:	e7f8      	b.n	800bd96 <__ascii_mbtowc+0x16>

0800bda4 <memmove>:
 800bda4:	4288      	cmp	r0, r1
 800bda6:	b510      	push	{r4, lr}
 800bda8:	eb01 0402 	add.w	r4, r1, r2
 800bdac:	d902      	bls.n	800bdb4 <memmove+0x10>
 800bdae:	4284      	cmp	r4, r0
 800bdb0:	4623      	mov	r3, r4
 800bdb2:	d807      	bhi.n	800bdc4 <memmove+0x20>
 800bdb4:	1e43      	subs	r3, r0, #1
 800bdb6:	42a1      	cmp	r1, r4
 800bdb8:	d008      	beq.n	800bdcc <memmove+0x28>
 800bdba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdc2:	e7f8      	b.n	800bdb6 <memmove+0x12>
 800bdc4:	4402      	add	r2, r0
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	428a      	cmp	r2, r1
 800bdca:	d100      	bne.n	800bdce <memmove+0x2a>
 800bdcc:	bd10      	pop	{r4, pc}
 800bdce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdd6:	e7f7      	b.n	800bdc8 <memmove+0x24>

0800bdd8 <__malloc_lock>:
 800bdd8:	4801      	ldr	r0, [pc, #4]	; (800bde0 <__malloc_lock+0x8>)
 800bdda:	f000 bc1f 	b.w	800c61c <__retarget_lock_acquire_recursive>
 800bdde:	bf00      	nop
 800bde0:	2000209c 	.word	0x2000209c

0800bde4 <__malloc_unlock>:
 800bde4:	4801      	ldr	r0, [pc, #4]	; (800bdec <__malloc_unlock+0x8>)
 800bde6:	f000 bc1a 	b.w	800c61e <__retarget_lock_release_recursive>
 800bdea:	bf00      	nop
 800bdec:	2000209c 	.word	0x2000209c

0800bdf0 <_realloc_r>:
 800bdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	4614      	mov	r4, r2
 800bdf8:	460e      	mov	r6, r1
 800bdfa:	b921      	cbnz	r1, 800be06 <_realloc_r+0x16>
 800bdfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be00:	4611      	mov	r1, r2
 800be02:	f7ff bdad 	b.w	800b960 <_malloc_r>
 800be06:	b92a      	cbnz	r2, 800be14 <_realloc_r+0x24>
 800be08:	f7ff fd3e 	bl	800b888 <_free_r>
 800be0c:	4625      	mov	r5, r4
 800be0e:	4628      	mov	r0, r5
 800be10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be14:	f000 fc6a 	bl	800c6ec <_malloc_usable_size_r>
 800be18:	4284      	cmp	r4, r0
 800be1a:	4607      	mov	r7, r0
 800be1c:	d802      	bhi.n	800be24 <_realloc_r+0x34>
 800be1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be22:	d812      	bhi.n	800be4a <_realloc_r+0x5a>
 800be24:	4621      	mov	r1, r4
 800be26:	4640      	mov	r0, r8
 800be28:	f7ff fd9a 	bl	800b960 <_malloc_r>
 800be2c:	4605      	mov	r5, r0
 800be2e:	2800      	cmp	r0, #0
 800be30:	d0ed      	beq.n	800be0e <_realloc_r+0x1e>
 800be32:	42bc      	cmp	r4, r7
 800be34:	4622      	mov	r2, r4
 800be36:	4631      	mov	r1, r6
 800be38:	bf28      	it	cs
 800be3a:	463a      	movcs	r2, r7
 800be3c:	f7fd fe64 	bl	8009b08 <memcpy>
 800be40:	4631      	mov	r1, r6
 800be42:	4640      	mov	r0, r8
 800be44:	f7ff fd20 	bl	800b888 <_free_r>
 800be48:	e7e1      	b.n	800be0e <_realloc_r+0x1e>
 800be4a:	4635      	mov	r5, r6
 800be4c:	e7df      	b.n	800be0e <_realloc_r+0x1e>

0800be4e <__sfputc_r>:
 800be4e:	6893      	ldr	r3, [r2, #8]
 800be50:	3b01      	subs	r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	b410      	push	{r4}
 800be56:	6093      	str	r3, [r2, #8]
 800be58:	da08      	bge.n	800be6c <__sfputc_r+0x1e>
 800be5a:	6994      	ldr	r4, [r2, #24]
 800be5c:	42a3      	cmp	r3, r4
 800be5e:	db01      	blt.n	800be64 <__sfputc_r+0x16>
 800be60:	290a      	cmp	r1, #10
 800be62:	d103      	bne.n	800be6c <__sfputc_r+0x1e>
 800be64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be68:	f000 b94a 	b.w	800c100 <__swbuf_r>
 800be6c:	6813      	ldr	r3, [r2, #0]
 800be6e:	1c58      	adds	r0, r3, #1
 800be70:	6010      	str	r0, [r2, #0]
 800be72:	7019      	strb	r1, [r3, #0]
 800be74:	4608      	mov	r0, r1
 800be76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <__sfputs_r>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	4606      	mov	r6, r0
 800be80:	460f      	mov	r7, r1
 800be82:	4614      	mov	r4, r2
 800be84:	18d5      	adds	r5, r2, r3
 800be86:	42ac      	cmp	r4, r5
 800be88:	d101      	bne.n	800be8e <__sfputs_r+0x12>
 800be8a:	2000      	movs	r0, #0
 800be8c:	e007      	b.n	800be9e <__sfputs_r+0x22>
 800be8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be92:	463a      	mov	r2, r7
 800be94:	4630      	mov	r0, r6
 800be96:	f7ff ffda 	bl	800be4e <__sfputc_r>
 800be9a:	1c43      	adds	r3, r0, #1
 800be9c:	d1f3      	bne.n	800be86 <__sfputs_r+0xa>
 800be9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bea0 <_vfiprintf_r>:
 800bea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bea4:	460d      	mov	r5, r1
 800bea6:	b09d      	sub	sp, #116	; 0x74
 800bea8:	4614      	mov	r4, r2
 800beaa:	4698      	mov	r8, r3
 800beac:	4606      	mov	r6, r0
 800beae:	b118      	cbz	r0, 800beb8 <_vfiprintf_r+0x18>
 800beb0:	6983      	ldr	r3, [r0, #24]
 800beb2:	b90b      	cbnz	r3, 800beb8 <_vfiprintf_r+0x18>
 800beb4:	f000 fb14 	bl	800c4e0 <__sinit>
 800beb8:	4b89      	ldr	r3, [pc, #548]	; (800c0e0 <_vfiprintf_r+0x240>)
 800beba:	429d      	cmp	r5, r3
 800bebc:	d11b      	bne.n	800bef6 <_vfiprintf_r+0x56>
 800bebe:	6875      	ldr	r5, [r6, #4]
 800bec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bec2:	07d9      	lsls	r1, r3, #31
 800bec4:	d405      	bmi.n	800bed2 <_vfiprintf_r+0x32>
 800bec6:	89ab      	ldrh	r3, [r5, #12]
 800bec8:	059a      	lsls	r2, r3, #22
 800beca:	d402      	bmi.n	800bed2 <_vfiprintf_r+0x32>
 800becc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bece:	f000 fba5 	bl	800c61c <__retarget_lock_acquire_recursive>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	071b      	lsls	r3, r3, #28
 800bed6:	d501      	bpl.n	800bedc <_vfiprintf_r+0x3c>
 800bed8:	692b      	ldr	r3, [r5, #16]
 800beda:	b9eb      	cbnz	r3, 800bf18 <_vfiprintf_r+0x78>
 800bedc:	4629      	mov	r1, r5
 800bede:	4630      	mov	r0, r6
 800bee0:	f000 f96e 	bl	800c1c0 <__swsetup_r>
 800bee4:	b1c0      	cbz	r0, 800bf18 <_vfiprintf_r+0x78>
 800bee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bee8:	07dc      	lsls	r4, r3, #31
 800beea:	d50e      	bpl.n	800bf0a <_vfiprintf_r+0x6a>
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	b01d      	add	sp, #116	; 0x74
 800bef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef6:	4b7b      	ldr	r3, [pc, #492]	; (800c0e4 <_vfiprintf_r+0x244>)
 800bef8:	429d      	cmp	r5, r3
 800befa:	d101      	bne.n	800bf00 <_vfiprintf_r+0x60>
 800befc:	68b5      	ldr	r5, [r6, #8]
 800befe:	e7df      	b.n	800bec0 <_vfiprintf_r+0x20>
 800bf00:	4b79      	ldr	r3, [pc, #484]	; (800c0e8 <_vfiprintf_r+0x248>)
 800bf02:	429d      	cmp	r5, r3
 800bf04:	bf08      	it	eq
 800bf06:	68f5      	ldreq	r5, [r6, #12]
 800bf08:	e7da      	b.n	800bec0 <_vfiprintf_r+0x20>
 800bf0a:	89ab      	ldrh	r3, [r5, #12]
 800bf0c:	0598      	lsls	r0, r3, #22
 800bf0e:	d4ed      	bmi.n	800beec <_vfiprintf_r+0x4c>
 800bf10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf12:	f000 fb84 	bl	800c61e <__retarget_lock_release_recursive>
 800bf16:	e7e9      	b.n	800beec <_vfiprintf_r+0x4c>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1c:	2320      	movs	r3, #32
 800bf1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf22:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf26:	2330      	movs	r3, #48	; 0x30
 800bf28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0ec <_vfiprintf_r+0x24c>
 800bf2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf30:	f04f 0901 	mov.w	r9, #1
 800bf34:	4623      	mov	r3, r4
 800bf36:	469a      	mov	sl, r3
 800bf38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf3c:	b10a      	cbz	r2, 800bf42 <_vfiprintf_r+0xa2>
 800bf3e:	2a25      	cmp	r2, #37	; 0x25
 800bf40:	d1f9      	bne.n	800bf36 <_vfiprintf_r+0x96>
 800bf42:	ebba 0b04 	subs.w	fp, sl, r4
 800bf46:	d00b      	beq.n	800bf60 <_vfiprintf_r+0xc0>
 800bf48:	465b      	mov	r3, fp
 800bf4a:	4622      	mov	r2, r4
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	4630      	mov	r0, r6
 800bf50:	f7ff ff94 	bl	800be7c <__sfputs_r>
 800bf54:	3001      	adds	r0, #1
 800bf56:	f000 80aa 	beq.w	800c0ae <_vfiprintf_r+0x20e>
 800bf5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf5c:	445a      	add	r2, fp
 800bf5e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf60:	f89a 3000 	ldrb.w	r3, [sl]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 80a2 	beq.w	800c0ae <_vfiprintf_r+0x20e>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf74:	f10a 0a01 	add.w	sl, sl, #1
 800bf78:	9304      	str	r3, [sp, #16]
 800bf7a:	9307      	str	r3, [sp, #28]
 800bf7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf80:	931a      	str	r3, [sp, #104]	; 0x68
 800bf82:	4654      	mov	r4, sl
 800bf84:	2205      	movs	r2, #5
 800bf86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf8a:	4858      	ldr	r0, [pc, #352]	; (800c0ec <_vfiprintf_r+0x24c>)
 800bf8c:	f7f4 f928 	bl	80001e0 <memchr>
 800bf90:	9a04      	ldr	r2, [sp, #16]
 800bf92:	b9d8      	cbnz	r0, 800bfcc <_vfiprintf_r+0x12c>
 800bf94:	06d1      	lsls	r1, r2, #27
 800bf96:	bf44      	itt	mi
 800bf98:	2320      	movmi	r3, #32
 800bf9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf9e:	0713      	lsls	r3, r2, #28
 800bfa0:	bf44      	itt	mi
 800bfa2:	232b      	movmi	r3, #43	; 0x2b
 800bfa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800bfac:	2b2a      	cmp	r3, #42	; 0x2a
 800bfae:	d015      	beq.n	800bfdc <_vfiprintf_r+0x13c>
 800bfb0:	9a07      	ldr	r2, [sp, #28]
 800bfb2:	4654      	mov	r4, sl
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	f04f 0c0a 	mov.w	ip, #10
 800bfba:	4621      	mov	r1, r4
 800bfbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfc0:	3b30      	subs	r3, #48	; 0x30
 800bfc2:	2b09      	cmp	r3, #9
 800bfc4:	d94e      	bls.n	800c064 <_vfiprintf_r+0x1c4>
 800bfc6:	b1b0      	cbz	r0, 800bff6 <_vfiprintf_r+0x156>
 800bfc8:	9207      	str	r2, [sp, #28]
 800bfca:	e014      	b.n	800bff6 <_vfiprintf_r+0x156>
 800bfcc:	eba0 0308 	sub.w	r3, r0, r8
 800bfd0:	fa09 f303 	lsl.w	r3, r9, r3
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	9304      	str	r3, [sp, #16]
 800bfd8:	46a2      	mov	sl, r4
 800bfda:	e7d2      	b.n	800bf82 <_vfiprintf_r+0xe2>
 800bfdc:	9b03      	ldr	r3, [sp, #12]
 800bfde:	1d19      	adds	r1, r3, #4
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	9103      	str	r1, [sp, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	bfbb      	ittet	lt
 800bfe8:	425b      	neglt	r3, r3
 800bfea:	f042 0202 	orrlt.w	r2, r2, #2
 800bfee:	9307      	strge	r3, [sp, #28]
 800bff0:	9307      	strlt	r3, [sp, #28]
 800bff2:	bfb8      	it	lt
 800bff4:	9204      	strlt	r2, [sp, #16]
 800bff6:	7823      	ldrb	r3, [r4, #0]
 800bff8:	2b2e      	cmp	r3, #46	; 0x2e
 800bffa:	d10c      	bne.n	800c016 <_vfiprintf_r+0x176>
 800bffc:	7863      	ldrb	r3, [r4, #1]
 800bffe:	2b2a      	cmp	r3, #42	; 0x2a
 800c000:	d135      	bne.n	800c06e <_vfiprintf_r+0x1ce>
 800c002:	9b03      	ldr	r3, [sp, #12]
 800c004:	1d1a      	adds	r2, r3, #4
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	9203      	str	r2, [sp, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfb8      	it	lt
 800c00e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c012:	3402      	adds	r4, #2
 800c014:	9305      	str	r3, [sp, #20]
 800c016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c0fc <_vfiprintf_r+0x25c>
 800c01a:	7821      	ldrb	r1, [r4, #0]
 800c01c:	2203      	movs	r2, #3
 800c01e:	4650      	mov	r0, sl
 800c020:	f7f4 f8de 	bl	80001e0 <memchr>
 800c024:	b140      	cbz	r0, 800c038 <_vfiprintf_r+0x198>
 800c026:	2340      	movs	r3, #64	; 0x40
 800c028:	eba0 000a 	sub.w	r0, r0, sl
 800c02c:	fa03 f000 	lsl.w	r0, r3, r0
 800c030:	9b04      	ldr	r3, [sp, #16]
 800c032:	4303      	orrs	r3, r0
 800c034:	3401      	adds	r4, #1
 800c036:	9304      	str	r3, [sp, #16]
 800c038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c03c:	482c      	ldr	r0, [pc, #176]	; (800c0f0 <_vfiprintf_r+0x250>)
 800c03e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c042:	2206      	movs	r2, #6
 800c044:	f7f4 f8cc 	bl	80001e0 <memchr>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d03f      	beq.n	800c0cc <_vfiprintf_r+0x22c>
 800c04c:	4b29      	ldr	r3, [pc, #164]	; (800c0f4 <_vfiprintf_r+0x254>)
 800c04e:	bb1b      	cbnz	r3, 800c098 <_vfiprintf_r+0x1f8>
 800c050:	9b03      	ldr	r3, [sp, #12]
 800c052:	3307      	adds	r3, #7
 800c054:	f023 0307 	bic.w	r3, r3, #7
 800c058:	3308      	adds	r3, #8
 800c05a:	9303      	str	r3, [sp, #12]
 800c05c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c05e:	443b      	add	r3, r7
 800c060:	9309      	str	r3, [sp, #36]	; 0x24
 800c062:	e767      	b.n	800bf34 <_vfiprintf_r+0x94>
 800c064:	fb0c 3202 	mla	r2, ip, r2, r3
 800c068:	460c      	mov	r4, r1
 800c06a:	2001      	movs	r0, #1
 800c06c:	e7a5      	b.n	800bfba <_vfiprintf_r+0x11a>
 800c06e:	2300      	movs	r3, #0
 800c070:	3401      	adds	r4, #1
 800c072:	9305      	str	r3, [sp, #20]
 800c074:	4619      	mov	r1, r3
 800c076:	f04f 0c0a 	mov.w	ip, #10
 800c07a:	4620      	mov	r0, r4
 800c07c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c080:	3a30      	subs	r2, #48	; 0x30
 800c082:	2a09      	cmp	r2, #9
 800c084:	d903      	bls.n	800c08e <_vfiprintf_r+0x1ee>
 800c086:	2b00      	cmp	r3, #0
 800c088:	d0c5      	beq.n	800c016 <_vfiprintf_r+0x176>
 800c08a:	9105      	str	r1, [sp, #20]
 800c08c:	e7c3      	b.n	800c016 <_vfiprintf_r+0x176>
 800c08e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c092:	4604      	mov	r4, r0
 800c094:	2301      	movs	r3, #1
 800c096:	e7f0      	b.n	800c07a <_vfiprintf_r+0x1da>
 800c098:	ab03      	add	r3, sp, #12
 800c09a:	9300      	str	r3, [sp, #0]
 800c09c:	462a      	mov	r2, r5
 800c09e:	4b16      	ldr	r3, [pc, #88]	; (800c0f8 <_vfiprintf_r+0x258>)
 800c0a0:	a904      	add	r1, sp, #16
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	f7fd fde6 	bl	8009c74 <_printf_float>
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	1c78      	adds	r0, r7, #1
 800c0ac:	d1d6      	bne.n	800c05c <_vfiprintf_r+0x1bc>
 800c0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0b0:	07d9      	lsls	r1, r3, #31
 800c0b2:	d405      	bmi.n	800c0c0 <_vfiprintf_r+0x220>
 800c0b4:	89ab      	ldrh	r3, [r5, #12]
 800c0b6:	059a      	lsls	r2, r3, #22
 800c0b8:	d402      	bmi.n	800c0c0 <_vfiprintf_r+0x220>
 800c0ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0bc:	f000 faaf 	bl	800c61e <__retarget_lock_release_recursive>
 800c0c0:	89ab      	ldrh	r3, [r5, #12]
 800c0c2:	065b      	lsls	r3, r3, #25
 800c0c4:	f53f af12 	bmi.w	800beec <_vfiprintf_r+0x4c>
 800c0c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0ca:	e711      	b.n	800bef0 <_vfiprintf_r+0x50>
 800c0cc:	ab03      	add	r3, sp, #12
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	462a      	mov	r2, r5
 800c0d2:	4b09      	ldr	r3, [pc, #36]	; (800c0f8 <_vfiprintf_r+0x258>)
 800c0d4:	a904      	add	r1, sp, #16
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f7fe f870 	bl	800a1bc <_printf_i>
 800c0dc:	e7e4      	b.n	800c0a8 <_vfiprintf_r+0x208>
 800c0de:	bf00      	nop
 800c0e0:	0800ccfc 	.word	0x0800ccfc
 800c0e4:	0800cd1c 	.word	0x0800cd1c
 800c0e8:	0800ccdc 	.word	0x0800ccdc
 800c0ec:	0800cb84 	.word	0x0800cb84
 800c0f0:	0800cb8e 	.word	0x0800cb8e
 800c0f4:	08009c75 	.word	0x08009c75
 800c0f8:	0800be7d 	.word	0x0800be7d
 800c0fc:	0800cb8a 	.word	0x0800cb8a

0800c100 <__swbuf_r>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	460e      	mov	r6, r1
 800c104:	4614      	mov	r4, r2
 800c106:	4605      	mov	r5, r0
 800c108:	b118      	cbz	r0, 800c112 <__swbuf_r+0x12>
 800c10a:	6983      	ldr	r3, [r0, #24]
 800c10c:	b90b      	cbnz	r3, 800c112 <__swbuf_r+0x12>
 800c10e:	f000 f9e7 	bl	800c4e0 <__sinit>
 800c112:	4b21      	ldr	r3, [pc, #132]	; (800c198 <__swbuf_r+0x98>)
 800c114:	429c      	cmp	r4, r3
 800c116:	d12b      	bne.n	800c170 <__swbuf_r+0x70>
 800c118:	686c      	ldr	r4, [r5, #4]
 800c11a:	69a3      	ldr	r3, [r4, #24]
 800c11c:	60a3      	str	r3, [r4, #8]
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	071a      	lsls	r2, r3, #28
 800c122:	d52f      	bpl.n	800c184 <__swbuf_r+0x84>
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	b36b      	cbz	r3, 800c184 <__swbuf_r+0x84>
 800c128:	6923      	ldr	r3, [r4, #16]
 800c12a:	6820      	ldr	r0, [r4, #0]
 800c12c:	1ac0      	subs	r0, r0, r3
 800c12e:	6963      	ldr	r3, [r4, #20]
 800c130:	b2f6      	uxtb	r6, r6
 800c132:	4283      	cmp	r3, r0
 800c134:	4637      	mov	r7, r6
 800c136:	dc04      	bgt.n	800c142 <__swbuf_r+0x42>
 800c138:	4621      	mov	r1, r4
 800c13a:	4628      	mov	r0, r5
 800c13c:	f000 f93c 	bl	800c3b8 <_fflush_r>
 800c140:	bb30      	cbnz	r0, 800c190 <__swbuf_r+0x90>
 800c142:	68a3      	ldr	r3, [r4, #8]
 800c144:	3b01      	subs	r3, #1
 800c146:	60a3      	str	r3, [r4, #8]
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	6022      	str	r2, [r4, #0]
 800c14e:	701e      	strb	r6, [r3, #0]
 800c150:	6963      	ldr	r3, [r4, #20]
 800c152:	3001      	adds	r0, #1
 800c154:	4283      	cmp	r3, r0
 800c156:	d004      	beq.n	800c162 <__swbuf_r+0x62>
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	07db      	lsls	r3, r3, #31
 800c15c:	d506      	bpl.n	800c16c <__swbuf_r+0x6c>
 800c15e:	2e0a      	cmp	r6, #10
 800c160:	d104      	bne.n	800c16c <__swbuf_r+0x6c>
 800c162:	4621      	mov	r1, r4
 800c164:	4628      	mov	r0, r5
 800c166:	f000 f927 	bl	800c3b8 <_fflush_r>
 800c16a:	b988      	cbnz	r0, 800c190 <__swbuf_r+0x90>
 800c16c:	4638      	mov	r0, r7
 800c16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c170:	4b0a      	ldr	r3, [pc, #40]	; (800c19c <__swbuf_r+0x9c>)
 800c172:	429c      	cmp	r4, r3
 800c174:	d101      	bne.n	800c17a <__swbuf_r+0x7a>
 800c176:	68ac      	ldr	r4, [r5, #8]
 800c178:	e7cf      	b.n	800c11a <__swbuf_r+0x1a>
 800c17a:	4b09      	ldr	r3, [pc, #36]	; (800c1a0 <__swbuf_r+0xa0>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	bf08      	it	eq
 800c180:	68ec      	ldreq	r4, [r5, #12]
 800c182:	e7ca      	b.n	800c11a <__swbuf_r+0x1a>
 800c184:	4621      	mov	r1, r4
 800c186:	4628      	mov	r0, r5
 800c188:	f000 f81a 	bl	800c1c0 <__swsetup_r>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d0cb      	beq.n	800c128 <__swbuf_r+0x28>
 800c190:	f04f 37ff 	mov.w	r7, #4294967295
 800c194:	e7ea      	b.n	800c16c <__swbuf_r+0x6c>
 800c196:	bf00      	nop
 800c198:	0800ccfc 	.word	0x0800ccfc
 800c19c:	0800cd1c 	.word	0x0800cd1c
 800c1a0:	0800ccdc 	.word	0x0800ccdc

0800c1a4 <__ascii_wctomb>:
 800c1a4:	b149      	cbz	r1, 800c1ba <__ascii_wctomb+0x16>
 800c1a6:	2aff      	cmp	r2, #255	; 0xff
 800c1a8:	bf85      	ittet	hi
 800c1aa:	238a      	movhi	r3, #138	; 0x8a
 800c1ac:	6003      	strhi	r3, [r0, #0]
 800c1ae:	700a      	strbls	r2, [r1, #0]
 800c1b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1b4:	bf98      	it	ls
 800c1b6:	2001      	movls	r0, #1
 800c1b8:	4770      	bx	lr
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	4770      	bx	lr
	...

0800c1c0 <__swsetup_r>:
 800c1c0:	4b32      	ldr	r3, [pc, #200]	; (800c28c <__swsetup_r+0xcc>)
 800c1c2:	b570      	push	{r4, r5, r6, lr}
 800c1c4:	681d      	ldr	r5, [r3, #0]
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	b125      	cbz	r5, 800c1d6 <__swsetup_r+0x16>
 800c1cc:	69ab      	ldr	r3, [r5, #24]
 800c1ce:	b913      	cbnz	r3, 800c1d6 <__swsetup_r+0x16>
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f000 f985 	bl	800c4e0 <__sinit>
 800c1d6:	4b2e      	ldr	r3, [pc, #184]	; (800c290 <__swsetup_r+0xd0>)
 800c1d8:	429c      	cmp	r4, r3
 800c1da:	d10f      	bne.n	800c1fc <__swsetup_r+0x3c>
 800c1dc:	686c      	ldr	r4, [r5, #4]
 800c1de:	89a3      	ldrh	r3, [r4, #12]
 800c1e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1e4:	0719      	lsls	r1, r3, #28
 800c1e6:	d42c      	bmi.n	800c242 <__swsetup_r+0x82>
 800c1e8:	06dd      	lsls	r5, r3, #27
 800c1ea:	d411      	bmi.n	800c210 <__swsetup_r+0x50>
 800c1ec:	2309      	movs	r3, #9
 800c1ee:	6033      	str	r3, [r6, #0]
 800c1f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fa:	e03e      	b.n	800c27a <__swsetup_r+0xba>
 800c1fc:	4b25      	ldr	r3, [pc, #148]	; (800c294 <__swsetup_r+0xd4>)
 800c1fe:	429c      	cmp	r4, r3
 800c200:	d101      	bne.n	800c206 <__swsetup_r+0x46>
 800c202:	68ac      	ldr	r4, [r5, #8]
 800c204:	e7eb      	b.n	800c1de <__swsetup_r+0x1e>
 800c206:	4b24      	ldr	r3, [pc, #144]	; (800c298 <__swsetup_r+0xd8>)
 800c208:	429c      	cmp	r4, r3
 800c20a:	bf08      	it	eq
 800c20c:	68ec      	ldreq	r4, [r5, #12]
 800c20e:	e7e6      	b.n	800c1de <__swsetup_r+0x1e>
 800c210:	0758      	lsls	r0, r3, #29
 800c212:	d512      	bpl.n	800c23a <__swsetup_r+0x7a>
 800c214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c216:	b141      	cbz	r1, 800c22a <__swsetup_r+0x6a>
 800c218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c21c:	4299      	cmp	r1, r3
 800c21e:	d002      	beq.n	800c226 <__swsetup_r+0x66>
 800c220:	4630      	mov	r0, r6
 800c222:	f7ff fb31 	bl	800b888 <_free_r>
 800c226:	2300      	movs	r3, #0
 800c228:	6363      	str	r3, [r4, #52]	; 0x34
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c230:	81a3      	strh	r3, [r4, #12]
 800c232:	2300      	movs	r3, #0
 800c234:	6063      	str	r3, [r4, #4]
 800c236:	6923      	ldr	r3, [r4, #16]
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	f043 0308 	orr.w	r3, r3, #8
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	6923      	ldr	r3, [r4, #16]
 800c244:	b94b      	cbnz	r3, 800c25a <__swsetup_r+0x9a>
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c24c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c250:	d003      	beq.n	800c25a <__swsetup_r+0x9a>
 800c252:	4621      	mov	r1, r4
 800c254:	4630      	mov	r0, r6
 800c256:	f000 fa09 	bl	800c66c <__smakebuf_r>
 800c25a:	89a0      	ldrh	r0, [r4, #12]
 800c25c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c260:	f010 0301 	ands.w	r3, r0, #1
 800c264:	d00a      	beq.n	800c27c <__swsetup_r+0xbc>
 800c266:	2300      	movs	r3, #0
 800c268:	60a3      	str	r3, [r4, #8]
 800c26a:	6963      	ldr	r3, [r4, #20]
 800c26c:	425b      	negs	r3, r3
 800c26e:	61a3      	str	r3, [r4, #24]
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	b943      	cbnz	r3, 800c286 <__swsetup_r+0xc6>
 800c274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c278:	d1ba      	bne.n	800c1f0 <__swsetup_r+0x30>
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	0781      	lsls	r1, r0, #30
 800c27e:	bf58      	it	pl
 800c280:	6963      	ldrpl	r3, [r4, #20]
 800c282:	60a3      	str	r3, [r4, #8]
 800c284:	e7f4      	b.n	800c270 <__swsetup_r+0xb0>
 800c286:	2000      	movs	r0, #0
 800c288:	e7f7      	b.n	800c27a <__swsetup_r+0xba>
 800c28a:	bf00      	nop
 800c28c:	200000fc 	.word	0x200000fc
 800c290:	0800ccfc 	.word	0x0800ccfc
 800c294:	0800cd1c 	.word	0x0800cd1c
 800c298:	0800ccdc 	.word	0x0800ccdc

0800c29c <abort>:
 800c29c:	b508      	push	{r3, lr}
 800c29e:	2006      	movs	r0, #6
 800c2a0:	f000 fa54 	bl	800c74c <raise>
 800c2a4:	2001      	movs	r0, #1
 800c2a6:	f7f5 fa53 	bl	8001750 <_exit>
	...

0800c2ac <__sflush_r>:
 800c2ac:	898a      	ldrh	r2, [r1, #12]
 800c2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	0710      	lsls	r0, r2, #28
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	d458      	bmi.n	800c36c <__sflush_r+0xc0>
 800c2ba:	684b      	ldr	r3, [r1, #4]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dc05      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dc02      	bgt.n	800c2cc <__sflush_r+0x20>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2ce:	2e00      	cmp	r6, #0
 800c2d0:	d0f9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2d8:	682f      	ldr	r7, [r5, #0]
 800c2da:	602b      	str	r3, [r5, #0]
 800c2dc:	d032      	beq.n	800c344 <__sflush_r+0x98>
 800c2de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	075a      	lsls	r2, r3, #29
 800c2e4:	d505      	bpl.n	800c2f2 <__sflush_r+0x46>
 800c2e6:	6863      	ldr	r3, [r4, #4]
 800c2e8:	1ac0      	subs	r0, r0, r3
 800c2ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2ec:	b10b      	cbz	r3, 800c2f2 <__sflush_r+0x46>
 800c2ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2f0:	1ac0      	subs	r0, r0, r3
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f8:	6a21      	ldr	r1, [r4, #32]
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b0      	blx	r6
 800c2fe:	1c43      	adds	r3, r0, #1
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	d106      	bne.n	800c312 <__sflush_r+0x66>
 800c304:	6829      	ldr	r1, [r5, #0]
 800c306:	291d      	cmp	r1, #29
 800c308:	d82c      	bhi.n	800c364 <__sflush_r+0xb8>
 800c30a:	4a2a      	ldr	r2, [pc, #168]	; (800c3b4 <__sflush_r+0x108>)
 800c30c:	40ca      	lsrs	r2, r1
 800c30e:	07d6      	lsls	r6, r2, #31
 800c310:	d528      	bpl.n	800c364 <__sflush_r+0xb8>
 800c312:	2200      	movs	r2, #0
 800c314:	6062      	str	r2, [r4, #4]
 800c316:	04d9      	lsls	r1, r3, #19
 800c318:	6922      	ldr	r2, [r4, #16]
 800c31a:	6022      	str	r2, [r4, #0]
 800c31c:	d504      	bpl.n	800c328 <__sflush_r+0x7c>
 800c31e:	1c42      	adds	r2, r0, #1
 800c320:	d101      	bne.n	800c326 <__sflush_r+0x7a>
 800c322:	682b      	ldr	r3, [r5, #0]
 800c324:	b903      	cbnz	r3, 800c328 <__sflush_r+0x7c>
 800c326:	6560      	str	r0, [r4, #84]	; 0x54
 800c328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c32a:	602f      	str	r7, [r5, #0]
 800c32c:	2900      	cmp	r1, #0
 800c32e:	d0ca      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c334:	4299      	cmp	r1, r3
 800c336:	d002      	beq.n	800c33e <__sflush_r+0x92>
 800c338:	4628      	mov	r0, r5
 800c33a:	f7ff faa5 	bl	800b888 <_free_r>
 800c33e:	2000      	movs	r0, #0
 800c340:	6360      	str	r0, [r4, #52]	; 0x34
 800c342:	e7c1      	b.n	800c2c8 <__sflush_r+0x1c>
 800c344:	6a21      	ldr	r1, [r4, #32]
 800c346:	2301      	movs	r3, #1
 800c348:	4628      	mov	r0, r5
 800c34a:	47b0      	blx	r6
 800c34c:	1c41      	adds	r1, r0, #1
 800c34e:	d1c7      	bne.n	800c2e0 <__sflush_r+0x34>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0c4      	beq.n	800c2e0 <__sflush_r+0x34>
 800c356:	2b1d      	cmp	r3, #29
 800c358:	d001      	beq.n	800c35e <__sflush_r+0xb2>
 800c35a:	2b16      	cmp	r3, #22
 800c35c:	d101      	bne.n	800c362 <__sflush_r+0xb6>
 800c35e:	602f      	str	r7, [r5, #0]
 800c360:	e7b1      	b.n	800c2c6 <__sflush_r+0x1a>
 800c362:	89a3      	ldrh	r3, [r4, #12]
 800c364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c368:	81a3      	strh	r3, [r4, #12]
 800c36a:	e7ad      	b.n	800c2c8 <__sflush_r+0x1c>
 800c36c:	690f      	ldr	r7, [r1, #16]
 800c36e:	2f00      	cmp	r7, #0
 800c370:	d0a9      	beq.n	800c2c6 <__sflush_r+0x1a>
 800c372:	0793      	lsls	r3, r2, #30
 800c374:	680e      	ldr	r6, [r1, #0]
 800c376:	bf08      	it	eq
 800c378:	694b      	ldreq	r3, [r1, #20]
 800c37a:	600f      	str	r7, [r1, #0]
 800c37c:	bf18      	it	ne
 800c37e:	2300      	movne	r3, #0
 800c380:	eba6 0807 	sub.w	r8, r6, r7
 800c384:	608b      	str	r3, [r1, #8]
 800c386:	f1b8 0f00 	cmp.w	r8, #0
 800c38a:	dd9c      	ble.n	800c2c6 <__sflush_r+0x1a>
 800c38c:	6a21      	ldr	r1, [r4, #32]
 800c38e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c390:	4643      	mov	r3, r8
 800c392:	463a      	mov	r2, r7
 800c394:	4628      	mov	r0, r5
 800c396:	47b0      	blx	r6
 800c398:	2800      	cmp	r0, #0
 800c39a:	dc06      	bgt.n	800c3aa <__sflush_r+0xfe>
 800c39c:	89a3      	ldrh	r3, [r4, #12]
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e78e      	b.n	800c2c8 <__sflush_r+0x1c>
 800c3aa:	4407      	add	r7, r0
 800c3ac:	eba8 0800 	sub.w	r8, r8, r0
 800c3b0:	e7e9      	b.n	800c386 <__sflush_r+0xda>
 800c3b2:	bf00      	nop
 800c3b4:	20400001 	.word	0x20400001

0800c3b8 <_fflush_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	690b      	ldr	r3, [r1, #16]
 800c3bc:	4605      	mov	r5, r0
 800c3be:	460c      	mov	r4, r1
 800c3c0:	b913      	cbnz	r3, 800c3c8 <_fflush_r+0x10>
 800c3c2:	2500      	movs	r5, #0
 800c3c4:	4628      	mov	r0, r5
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	b118      	cbz	r0, 800c3d2 <_fflush_r+0x1a>
 800c3ca:	6983      	ldr	r3, [r0, #24]
 800c3cc:	b90b      	cbnz	r3, 800c3d2 <_fflush_r+0x1a>
 800c3ce:	f000 f887 	bl	800c4e0 <__sinit>
 800c3d2:	4b14      	ldr	r3, [pc, #80]	; (800c424 <_fflush_r+0x6c>)
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d11b      	bne.n	800c410 <_fflush_r+0x58>
 800c3d8:	686c      	ldr	r4, [r5, #4]
 800c3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d0ef      	beq.n	800c3c2 <_fflush_r+0xa>
 800c3e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3e4:	07d0      	lsls	r0, r2, #31
 800c3e6:	d404      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3e8:	0599      	lsls	r1, r3, #22
 800c3ea:	d402      	bmi.n	800c3f2 <_fflush_r+0x3a>
 800c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ee:	f000 f915 	bl	800c61c <__retarget_lock_acquire_recursive>
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	f7ff ff59 	bl	800c2ac <__sflush_r>
 800c3fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3fc:	07da      	lsls	r2, r3, #31
 800c3fe:	4605      	mov	r5, r0
 800c400:	d4e0      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c402:	89a3      	ldrh	r3, [r4, #12]
 800c404:	059b      	lsls	r3, r3, #22
 800c406:	d4dd      	bmi.n	800c3c4 <_fflush_r+0xc>
 800c408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c40a:	f000 f908 	bl	800c61e <__retarget_lock_release_recursive>
 800c40e:	e7d9      	b.n	800c3c4 <_fflush_r+0xc>
 800c410:	4b05      	ldr	r3, [pc, #20]	; (800c428 <_fflush_r+0x70>)
 800c412:	429c      	cmp	r4, r3
 800c414:	d101      	bne.n	800c41a <_fflush_r+0x62>
 800c416:	68ac      	ldr	r4, [r5, #8]
 800c418:	e7df      	b.n	800c3da <_fflush_r+0x22>
 800c41a:	4b04      	ldr	r3, [pc, #16]	; (800c42c <_fflush_r+0x74>)
 800c41c:	429c      	cmp	r4, r3
 800c41e:	bf08      	it	eq
 800c420:	68ec      	ldreq	r4, [r5, #12]
 800c422:	e7da      	b.n	800c3da <_fflush_r+0x22>
 800c424:	0800ccfc 	.word	0x0800ccfc
 800c428:	0800cd1c 	.word	0x0800cd1c
 800c42c:	0800ccdc 	.word	0x0800ccdc

0800c430 <std>:
 800c430:	2300      	movs	r3, #0
 800c432:	b510      	push	{r4, lr}
 800c434:	4604      	mov	r4, r0
 800c436:	e9c0 3300 	strd	r3, r3, [r0]
 800c43a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c43e:	6083      	str	r3, [r0, #8]
 800c440:	8181      	strh	r1, [r0, #12]
 800c442:	6643      	str	r3, [r0, #100]	; 0x64
 800c444:	81c2      	strh	r2, [r0, #14]
 800c446:	6183      	str	r3, [r0, #24]
 800c448:	4619      	mov	r1, r3
 800c44a:	2208      	movs	r2, #8
 800c44c:	305c      	adds	r0, #92	; 0x5c
 800c44e:	f7fd fb69 	bl	8009b24 <memset>
 800c452:	4b05      	ldr	r3, [pc, #20]	; (800c468 <std+0x38>)
 800c454:	6263      	str	r3, [r4, #36]	; 0x24
 800c456:	4b05      	ldr	r3, [pc, #20]	; (800c46c <std+0x3c>)
 800c458:	62a3      	str	r3, [r4, #40]	; 0x28
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <std+0x40>)
 800c45c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <std+0x44>)
 800c460:	6224      	str	r4, [r4, #32]
 800c462:	6323      	str	r3, [r4, #48]	; 0x30
 800c464:	bd10      	pop	{r4, pc}
 800c466:	bf00      	nop
 800c468:	0800c785 	.word	0x0800c785
 800c46c:	0800c7a7 	.word	0x0800c7a7
 800c470:	0800c7df 	.word	0x0800c7df
 800c474:	0800c803 	.word	0x0800c803

0800c478 <_cleanup_r>:
 800c478:	4901      	ldr	r1, [pc, #4]	; (800c480 <_cleanup_r+0x8>)
 800c47a:	f000 b8af 	b.w	800c5dc <_fwalk_reent>
 800c47e:	bf00      	nop
 800c480:	0800c3b9 	.word	0x0800c3b9

0800c484 <__sfmoreglue>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	2268      	movs	r2, #104	; 0x68
 800c488:	1e4d      	subs	r5, r1, #1
 800c48a:	4355      	muls	r5, r2
 800c48c:	460e      	mov	r6, r1
 800c48e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c492:	f7ff fa65 	bl	800b960 <_malloc_r>
 800c496:	4604      	mov	r4, r0
 800c498:	b140      	cbz	r0, 800c4ac <__sfmoreglue+0x28>
 800c49a:	2100      	movs	r1, #0
 800c49c:	e9c0 1600 	strd	r1, r6, [r0]
 800c4a0:	300c      	adds	r0, #12
 800c4a2:	60a0      	str	r0, [r4, #8]
 800c4a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4a8:	f7fd fb3c 	bl	8009b24 <memset>
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}

0800c4b0 <__sfp_lock_acquire>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__sfp_lock_acquire+0x8>)
 800c4b2:	f000 b8b3 	b.w	800c61c <__retarget_lock_acquire_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	2000209d 	.word	0x2000209d

0800c4bc <__sfp_lock_release>:
 800c4bc:	4801      	ldr	r0, [pc, #4]	; (800c4c4 <__sfp_lock_release+0x8>)
 800c4be:	f000 b8ae 	b.w	800c61e <__retarget_lock_release_recursive>
 800c4c2:	bf00      	nop
 800c4c4:	2000209d 	.word	0x2000209d

0800c4c8 <__sinit_lock_acquire>:
 800c4c8:	4801      	ldr	r0, [pc, #4]	; (800c4d0 <__sinit_lock_acquire+0x8>)
 800c4ca:	f000 b8a7 	b.w	800c61c <__retarget_lock_acquire_recursive>
 800c4ce:	bf00      	nop
 800c4d0:	2000209e 	.word	0x2000209e

0800c4d4 <__sinit_lock_release>:
 800c4d4:	4801      	ldr	r0, [pc, #4]	; (800c4dc <__sinit_lock_release+0x8>)
 800c4d6:	f000 b8a2 	b.w	800c61e <__retarget_lock_release_recursive>
 800c4da:	bf00      	nop
 800c4dc:	2000209e 	.word	0x2000209e

0800c4e0 <__sinit>:
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	f7ff fff0 	bl	800c4c8 <__sinit_lock_acquire>
 800c4e8:	69a3      	ldr	r3, [r4, #24]
 800c4ea:	b11b      	cbz	r3, 800c4f4 <__sinit+0x14>
 800c4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f0:	f7ff bff0 	b.w	800c4d4 <__sinit_lock_release>
 800c4f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4f8:	6523      	str	r3, [r4, #80]	; 0x50
 800c4fa:	4b13      	ldr	r3, [pc, #76]	; (800c548 <__sinit+0x68>)
 800c4fc:	4a13      	ldr	r2, [pc, #76]	; (800c54c <__sinit+0x6c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	62a2      	str	r2, [r4, #40]	; 0x28
 800c502:	42a3      	cmp	r3, r4
 800c504:	bf04      	itt	eq
 800c506:	2301      	moveq	r3, #1
 800c508:	61a3      	streq	r3, [r4, #24]
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 f820 	bl	800c550 <__sfp>
 800c510:	6060      	str	r0, [r4, #4]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f81c 	bl	800c550 <__sfp>
 800c518:	60a0      	str	r0, [r4, #8]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 f818 	bl	800c550 <__sfp>
 800c520:	2200      	movs	r2, #0
 800c522:	60e0      	str	r0, [r4, #12]
 800c524:	2104      	movs	r1, #4
 800c526:	6860      	ldr	r0, [r4, #4]
 800c528:	f7ff ff82 	bl	800c430 <std>
 800c52c:	68a0      	ldr	r0, [r4, #8]
 800c52e:	2201      	movs	r2, #1
 800c530:	2109      	movs	r1, #9
 800c532:	f7ff ff7d 	bl	800c430 <std>
 800c536:	68e0      	ldr	r0, [r4, #12]
 800c538:	2202      	movs	r2, #2
 800c53a:	2112      	movs	r1, #18
 800c53c:	f7ff ff78 	bl	800c430 <std>
 800c540:	2301      	movs	r3, #1
 800c542:	61a3      	str	r3, [r4, #24]
 800c544:	e7d2      	b.n	800c4ec <__sinit+0xc>
 800c546:	bf00      	nop
 800c548:	0800c964 	.word	0x0800c964
 800c54c:	0800c479 	.word	0x0800c479

0800c550 <__sfp>:
 800c550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c552:	4607      	mov	r7, r0
 800c554:	f7ff ffac 	bl	800c4b0 <__sfp_lock_acquire>
 800c558:	4b1e      	ldr	r3, [pc, #120]	; (800c5d4 <__sfp+0x84>)
 800c55a:	681e      	ldr	r6, [r3, #0]
 800c55c:	69b3      	ldr	r3, [r6, #24]
 800c55e:	b913      	cbnz	r3, 800c566 <__sfp+0x16>
 800c560:	4630      	mov	r0, r6
 800c562:	f7ff ffbd 	bl	800c4e0 <__sinit>
 800c566:	3648      	adds	r6, #72	; 0x48
 800c568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	d503      	bpl.n	800c578 <__sfp+0x28>
 800c570:	6833      	ldr	r3, [r6, #0]
 800c572:	b30b      	cbz	r3, 800c5b8 <__sfp+0x68>
 800c574:	6836      	ldr	r6, [r6, #0]
 800c576:	e7f7      	b.n	800c568 <__sfp+0x18>
 800c578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c57c:	b9d5      	cbnz	r5, 800c5b4 <__sfp+0x64>
 800c57e:	4b16      	ldr	r3, [pc, #88]	; (800c5d8 <__sfp+0x88>)
 800c580:	60e3      	str	r3, [r4, #12]
 800c582:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c586:	6665      	str	r5, [r4, #100]	; 0x64
 800c588:	f000 f847 	bl	800c61a <__retarget_lock_init_recursive>
 800c58c:	f7ff ff96 	bl	800c4bc <__sfp_lock_release>
 800c590:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c594:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c598:	6025      	str	r5, [r4, #0]
 800c59a:	61a5      	str	r5, [r4, #24]
 800c59c:	2208      	movs	r2, #8
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5a4:	f7fd fabe 	bl	8009b24 <memset>
 800c5a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5b4:	3468      	adds	r4, #104	; 0x68
 800c5b6:	e7d9      	b.n	800c56c <__sfp+0x1c>
 800c5b8:	2104      	movs	r1, #4
 800c5ba:	4638      	mov	r0, r7
 800c5bc:	f7ff ff62 	bl	800c484 <__sfmoreglue>
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	6030      	str	r0, [r6, #0]
 800c5c4:	2800      	cmp	r0, #0
 800c5c6:	d1d5      	bne.n	800c574 <__sfp+0x24>
 800c5c8:	f7ff ff78 	bl	800c4bc <__sfp_lock_release>
 800c5cc:	230c      	movs	r3, #12
 800c5ce:	603b      	str	r3, [r7, #0]
 800c5d0:	e7ee      	b.n	800c5b0 <__sfp+0x60>
 800c5d2:	bf00      	nop
 800c5d4:	0800c964 	.word	0x0800c964
 800c5d8:	ffff0001 	.word	0xffff0001

0800c5dc <_fwalk_reent>:
 800c5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	4688      	mov	r8, r1
 800c5e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5e8:	2700      	movs	r7, #0
 800c5ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5ee:	f1b9 0901 	subs.w	r9, r9, #1
 800c5f2:	d505      	bpl.n	800c600 <_fwalk_reent+0x24>
 800c5f4:	6824      	ldr	r4, [r4, #0]
 800c5f6:	2c00      	cmp	r4, #0
 800c5f8:	d1f7      	bne.n	800c5ea <_fwalk_reent+0xe>
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c600:	89ab      	ldrh	r3, [r5, #12]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d907      	bls.n	800c616 <_fwalk_reent+0x3a>
 800c606:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c60a:	3301      	adds	r3, #1
 800c60c:	d003      	beq.n	800c616 <_fwalk_reent+0x3a>
 800c60e:	4629      	mov	r1, r5
 800c610:	4630      	mov	r0, r6
 800c612:	47c0      	blx	r8
 800c614:	4307      	orrs	r7, r0
 800c616:	3568      	adds	r5, #104	; 0x68
 800c618:	e7e9      	b.n	800c5ee <_fwalk_reent+0x12>

0800c61a <__retarget_lock_init_recursive>:
 800c61a:	4770      	bx	lr

0800c61c <__retarget_lock_acquire_recursive>:
 800c61c:	4770      	bx	lr

0800c61e <__retarget_lock_release_recursive>:
 800c61e:	4770      	bx	lr

0800c620 <__swhatbuf_r>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	460e      	mov	r6, r1
 800c624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c628:	2900      	cmp	r1, #0
 800c62a:	b096      	sub	sp, #88	; 0x58
 800c62c:	4614      	mov	r4, r2
 800c62e:	461d      	mov	r5, r3
 800c630:	da08      	bge.n	800c644 <__swhatbuf_r+0x24>
 800c632:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	602a      	str	r2, [r5, #0]
 800c63a:	061a      	lsls	r2, r3, #24
 800c63c:	d410      	bmi.n	800c660 <__swhatbuf_r+0x40>
 800c63e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c642:	e00e      	b.n	800c662 <__swhatbuf_r+0x42>
 800c644:	466a      	mov	r2, sp
 800c646:	f000 f903 	bl	800c850 <_fstat_r>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	dbf1      	blt.n	800c632 <__swhatbuf_r+0x12>
 800c64e:	9a01      	ldr	r2, [sp, #4]
 800c650:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c654:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c658:	425a      	negs	r2, r3
 800c65a:	415a      	adcs	r2, r3
 800c65c:	602a      	str	r2, [r5, #0]
 800c65e:	e7ee      	b.n	800c63e <__swhatbuf_r+0x1e>
 800c660:	2340      	movs	r3, #64	; 0x40
 800c662:	2000      	movs	r0, #0
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	b016      	add	sp, #88	; 0x58
 800c668:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c66c <__smakebuf_r>:
 800c66c:	898b      	ldrh	r3, [r1, #12]
 800c66e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c670:	079d      	lsls	r5, r3, #30
 800c672:	4606      	mov	r6, r0
 800c674:	460c      	mov	r4, r1
 800c676:	d507      	bpl.n	800c688 <__smakebuf_r+0x1c>
 800c678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c67c:	6023      	str	r3, [r4, #0]
 800c67e:	6123      	str	r3, [r4, #16]
 800c680:	2301      	movs	r3, #1
 800c682:	6163      	str	r3, [r4, #20]
 800c684:	b002      	add	sp, #8
 800c686:	bd70      	pop	{r4, r5, r6, pc}
 800c688:	ab01      	add	r3, sp, #4
 800c68a:	466a      	mov	r2, sp
 800c68c:	f7ff ffc8 	bl	800c620 <__swhatbuf_r>
 800c690:	9900      	ldr	r1, [sp, #0]
 800c692:	4605      	mov	r5, r0
 800c694:	4630      	mov	r0, r6
 800c696:	f7ff f963 	bl	800b960 <_malloc_r>
 800c69a:	b948      	cbnz	r0, 800c6b0 <__smakebuf_r+0x44>
 800c69c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6a0:	059a      	lsls	r2, r3, #22
 800c6a2:	d4ef      	bmi.n	800c684 <__smakebuf_r+0x18>
 800c6a4:	f023 0303 	bic.w	r3, r3, #3
 800c6a8:	f043 0302 	orr.w	r3, r3, #2
 800c6ac:	81a3      	strh	r3, [r4, #12]
 800c6ae:	e7e3      	b.n	800c678 <__smakebuf_r+0xc>
 800c6b0:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <__smakebuf_r+0x7c>)
 800c6b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	6020      	str	r0, [r4, #0]
 800c6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6bc:	81a3      	strh	r3, [r4, #12]
 800c6be:	9b00      	ldr	r3, [sp, #0]
 800c6c0:	6163      	str	r3, [r4, #20]
 800c6c2:	9b01      	ldr	r3, [sp, #4]
 800c6c4:	6120      	str	r0, [r4, #16]
 800c6c6:	b15b      	cbz	r3, 800c6e0 <__smakebuf_r+0x74>
 800c6c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f000 f8d1 	bl	800c874 <_isatty_r>
 800c6d2:	b128      	cbz	r0, 800c6e0 <__smakebuf_r+0x74>
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	f023 0303 	bic.w	r3, r3, #3
 800c6da:	f043 0301 	orr.w	r3, r3, #1
 800c6de:	81a3      	strh	r3, [r4, #12]
 800c6e0:	89a0      	ldrh	r0, [r4, #12]
 800c6e2:	4305      	orrs	r5, r0
 800c6e4:	81a5      	strh	r5, [r4, #12]
 800c6e6:	e7cd      	b.n	800c684 <__smakebuf_r+0x18>
 800c6e8:	0800c479 	.word	0x0800c479

0800c6ec <_malloc_usable_size_r>:
 800c6ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6f0:	1f18      	subs	r0, r3, #4
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	bfbc      	itt	lt
 800c6f6:	580b      	ldrlt	r3, [r1, r0]
 800c6f8:	18c0      	addlt	r0, r0, r3
 800c6fa:	4770      	bx	lr

0800c6fc <_raise_r>:
 800c6fc:	291f      	cmp	r1, #31
 800c6fe:	b538      	push	{r3, r4, r5, lr}
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	d904      	bls.n	800c710 <_raise_r+0x14>
 800c706:	2316      	movs	r3, #22
 800c708:	6003      	str	r3, [r0, #0]
 800c70a:	f04f 30ff 	mov.w	r0, #4294967295
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c712:	b112      	cbz	r2, 800c71a <_raise_r+0x1e>
 800c714:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c718:	b94b      	cbnz	r3, 800c72e <_raise_r+0x32>
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 f830 	bl	800c780 <_getpid_r>
 800c720:	462a      	mov	r2, r5
 800c722:	4601      	mov	r1, r0
 800c724:	4620      	mov	r0, r4
 800c726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c72a:	f000 b817 	b.w	800c75c <_kill_r>
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d00a      	beq.n	800c748 <_raise_r+0x4c>
 800c732:	1c59      	adds	r1, r3, #1
 800c734:	d103      	bne.n	800c73e <_raise_r+0x42>
 800c736:	2316      	movs	r3, #22
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	2001      	movs	r0, #1
 800c73c:	e7e7      	b.n	800c70e <_raise_r+0x12>
 800c73e:	2400      	movs	r4, #0
 800c740:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c744:	4628      	mov	r0, r5
 800c746:	4798      	blx	r3
 800c748:	2000      	movs	r0, #0
 800c74a:	e7e0      	b.n	800c70e <_raise_r+0x12>

0800c74c <raise>:
 800c74c:	4b02      	ldr	r3, [pc, #8]	; (800c758 <raise+0xc>)
 800c74e:	4601      	mov	r1, r0
 800c750:	6818      	ldr	r0, [r3, #0]
 800c752:	f7ff bfd3 	b.w	800c6fc <_raise_r>
 800c756:	bf00      	nop
 800c758:	200000fc 	.word	0x200000fc

0800c75c <_kill_r>:
 800c75c:	b538      	push	{r3, r4, r5, lr}
 800c75e:	4d07      	ldr	r5, [pc, #28]	; (800c77c <_kill_r+0x20>)
 800c760:	2300      	movs	r3, #0
 800c762:	4604      	mov	r4, r0
 800c764:	4608      	mov	r0, r1
 800c766:	4611      	mov	r1, r2
 800c768:	602b      	str	r3, [r5, #0]
 800c76a:	f7f4 ffe1 	bl	8001730 <_kill>
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	d102      	bne.n	800c778 <_kill_r+0x1c>
 800c772:	682b      	ldr	r3, [r5, #0]
 800c774:	b103      	cbz	r3, 800c778 <_kill_r+0x1c>
 800c776:	6023      	str	r3, [r4, #0]
 800c778:	bd38      	pop	{r3, r4, r5, pc}
 800c77a:	bf00      	nop
 800c77c:	20002098 	.word	0x20002098

0800c780 <_getpid_r>:
 800c780:	f7f4 bfce 	b.w	8001720 <_getpid>

0800c784 <__sread>:
 800c784:	b510      	push	{r4, lr}
 800c786:	460c      	mov	r4, r1
 800c788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78c:	f000 f894 	bl	800c8b8 <_read_r>
 800c790:	2800      	cmp	r0, #0
 800c792:	bfab      	itete	ge
 800c794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c796:	89a3      	ldrhlt	r3, [r4, #12]
 800c798:	181b      	addge	r3, r3, r0
 800c79a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c79e:	bfac      	ite	ge
 800c7a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7a2:	81a3      	strhlt	r3, [r4, #12]
 800c7a4:	bd10      	pop	{r4, pc}

0800c7a6 <__swrite>:
 800c7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7aa:	461f      	mov	r7, r3
 800c7ac:	898b      	ldrh	r3, [r1, #12]
 800c7ae:	05db      	lsls	r3, r3, #23
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	d505      	bpl.n	800c7c4 <__swrite+0x1e>
 800c7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7bc:	2302      	movs	r3, #2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f000 f868 	bl	800c894 <_lseek_r>
 800c7c4:	89a3      	ldrh	r3, [r4, #12]
 800c7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	4632      	mov	r2, r6
 800c7d2:	463b      	mov	r3, r7
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7da:	f000 b817 	b.w	800c80c <_write_r>

0800c7de <__sseek>:
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7e6:	f000 f855 	bl	800c894 <_lseek_r>
 800c7ea:	1c43      	adds	r3, r0, #1
 800c7ec:	89a3      	ldrh	r3, [r4, #12]
 800c7ee:	bf15      	itete	ne
 800c7f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7fa:	81a3      	strheq	r3, [r4, #12]
 800c7fc:	bf18      	it	ne
 800c7fe:	81a3      	strhne	r3, [r4, #12]
 800c800:	bd10      	pop	{r4, pc}

0800c802 <__sclose>:
 800c802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c806:	f000 b813 	b.w	800c830 <_close_r>
	...

0800c80c <_write_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d07      	ldr	r5, [pc, #28]	; (800c82c <_write_r+0x20>)
 800c810:	4604      	mov	r4, r0
 800c812:	4608      	mov	r0, r1
 800c814:	4611      	mov	r1, r2
 800c816:	2200      	movs	r2, #0
 800c818:	602a      	str	r2, [r5, #0]
 800c81a:	461a      	mov	r2, r3
 800c81c:	f7f4 ffbf 	bl	800179e <_write>
 800c820:	1c43      	adds	r3, r0, #1
 800c822:	d102      	bne.n	800c82a <_write_r+0x1e>
 800c824:	682b      	ldr	r3, [r5, #0]
 800c826:	b103      	cbz	r3, 800c82a <_write_r+0x1e>
 800c828:	6023      	str	r3, [r4, #0]
 800c82a:	bd38      	pop	{r3, r4, r5, pc}
 800c82c:	20002098 	.word	0x20002098

0800c830 <_close_r>:
 800c830:	b538      	push	{r3, r4, r5, lr}
 800c832:	4d06      	ldr	r5, [pc, #24]	; (800c84c <_close_r+0x1c>)
 800c834:	2300      	movs	r3, #0
 800c836:	4604      	mov	r4, r0
 800c838:	4608      	mov	r0, r1
 800c83a:	602b      	str	r3, [r5, #0]
 800c83c:	f7f4 ffcb 	bl	80017d6 <_close>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d102      	bne.n	800c84a <_close_r+0x1a>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	b103      	cbz	r3, 800c84a <_close_r+0x1a>
 800c848:	6023      	str	r3, [r4, #0]
 800c84a:	bd38      	pop	{r3, r4, r5, pc}
 800c84c:	20002098 	.word	0x20002098

0800c850 <_fstat_r>:
 800c850:	b538      	push	{r3, r4, r5, lr}
 800c852:	4d07      	ldr	r5, [pc, #28]	; (800c870 <_fstat_r+0x20>)
 800c854:	2300      	movs	r3, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	602b      	str	r3, [r5, #0]
 800c85e:	f7f4 ffc6 	bl	80017ee <_fstat>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	d102      	bne.n	800c86c <_fstat_r+0x1c>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	b103      	cbz	r3, 800c86c <_fstat_r+0x1c>
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	bd38      	pop	{r3, r4, r5, pc}
 800c86e:	bf00      	nop
 800c870:	20002098 	.word	0x20002098

0800c874 <_isatty_r>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4d06      	ldr	r5, [pc, #24]	; (800c890 <_isatty_r+0x1c>)
 800c878:	2300      	movs	r3, #0
 800c87a:	4604      	mov	r4, r0
 800c87c:	4608      	mov	r0, r1
 800c87e:	602b      	str	r3, [r5, #0]
 800c880:	f7f4 ffc5 	bl	800180e <_isatty>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_isatty_r+0x1a>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_isatty_r+0x1a>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20002098 	.word	0x20002098

0800c894 <_lseek_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	; (800c8b4 <_lseek_r+0x20>)
 800c898:	4604      	mov	r4, r0
 800c89a:	4608      	mov	r0, r1
 800c89c:	4611      	mov	r1, r2
 800c89e:	2200      	movs	r2, #0
 800c8a0:	602a      	str	r2, [r5, #0]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	f7f4 ffbe 	bl	8001824 <_lseek>
 800c8a8:	1c43      	adds	r3, r0, #1
 800c8aa:	d102      	bne.n	800c8b2 <_lseek_r+0x1e>
 800c8ac:	682b      	ldr	r3, [r5, #0]
 800c8ae:	b103      	cbz	r3, 800c8b2 <_lseek_r+0x1e>
 800c8b0:	6023      	str	r3, [r4, #0]
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	20002098 	.word	0x20002098

0800c8b8 <_read_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d07      	ldr	r5, [pc, #28]	; (800c8d8 <_read_r+0x20>)
 800c8bc:	4604      	mov	r4, r0
 800c8be:	4608      	mov	r0, r1
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	602a      	str	r2, [r5, #0]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	f7f4 ff4c 	bl	8001764 <_read>
 800c8cc:	1c43      	adds	r3, r0, #1
 800c8ce:	d102      	bne.n	800c8d6 <_read_r+0x1e>
 800c8d0:	682b      	ldr	r3, [r5, #0]
 800c8d2:	b103      	cbz	r3, 800c8d6 <_read_r+0x1e>
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	bd38      	pop	{r3, r4, r5, pc}
 800c8d8:	20002098 	.word	0x20002098

0800c8dc <_init>:
 800c8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8de:	bf00      	nop
 800c8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e2:	bc08      	pop	{r3}
 800c8e4:	469e      	mov	lr, r3
 800c8e6:	4770      	bx	lr

0800c8e8 <_fini>:
 800c8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ea:	bf00      	nop
 800c8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ee:	bc08      	pop	{r3}
 800c8f0:	469e      	mov	lr, r3
 800c8f2:	4770      	bx	lr
